BROKER SCHEMA ru.croc.sbkz.mediation.bl.esql

/**
 * Определяет на основе ответа от Pragma, находится ли клиент
 * в черном списке или же нет и определяет дальнейшее прохождение
 * потока.
 **/
CREATE FILTER MODULE BlackListPragmaResponse_IsInBlackList
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE blStatus CHARACTER;
		
		SET blStatus = Root.XMLNSC.KZBlackListRs.BLStatus;
		
		IF blStatus = '1' THEN
			RETURN TRUE;
		ELSEIF blStatus = '2' THEN
			RETURN FALSE;
		END IF;
		
	END;

END MODULE;

/**
 * Заполнение полей заголовка MQRFH2 для
 * маршрутизации в систему AML.
 **/
CREATE COMPUTE MODULE BlackListPragmaResponse_FillMqRfh2usr
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		
		-- Определяем идентификатор системы, в который надо отправить запрос
		DECLARE systemId, adapterType CHARACTER;
		
		SET systemId 	= 'urn:sbkzsystems:aml';
		SET adapterType = 'urn:sbkztypes:esb:adapter';
		
		-- Создаем заголовок и вставляем переменные для маршрутизации
	 	IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
	 	END IF;
	 	-- Константа для указания, что ищем адаптер системы
	 	SET OutputRoot.MQRFH2.usr.TypeId	= adapterType;
	 	-- Идентификатор системы, в адаптер которой необходимо отправить запрос
	 	SET OutputRoot.MQRFH2.usr.SystemId	= systemId;
		-- Сохраняем статус BLStatus, который приходит от Прагмы
		SET OutputRoot.MQRFH2.usr.BLStatus	= InputRoot.XMLNSC.KZBlackListRs.BLStatus;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

/**
 * Восстановление исходного сообщения-запроса
 * на проверку наличия клиента в чёрном списке.
 **/
CREATE COMPUTE MODULE BlackListPragmaResponse_RestoreOrigRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		SET OutputRoot.XMLNSC = Environment.Variables.Source.XMLNSC;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
