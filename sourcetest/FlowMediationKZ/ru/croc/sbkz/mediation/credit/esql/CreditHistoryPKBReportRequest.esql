BROKER SCHEMA ru.croc.sbkz.mediation.credit.esql

/**
 * Заполнение полей заголовка MQRFH2 для
 * маршрутизации в систему ПКБ.
 **/
CREATE COMPUTE MODULE CreditHistoryPKBReportRequest_FillMqRfh2usrForPKB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		
		-- Определяем идентификатор системы, в который надо отправить запрос
		DECLARE systemId, adapterType CHARACTER;
		
		SET systemId 	= 'urn:sbkzsystems:pkb';
		SET adapterType = 'urn:sbkztypes:esb:adapter';
		
		-- Создаем заголовок и вставляем переменные для маршрутизации
	 	IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
	 	END IF;
	 	-- Константа для указания, что ищем адаптер системы
	 	SET OutputRoot.MQRFH2.usr.TypeId	= adapterType;
	 	-- Идентификатор системы, в адаптер которой необходимо отправить запрос
	 	SET OutputRoot.MQRFH2.usr.SystemId	= systemId;

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

/**
 * Формирует запросы на получение отчетов в формате XML и HTML.
 * Запросы отсылаются асинхронно и обрабатываются в рамках одной
 * агрегации. Из списка возможных отчетов выбираются только те, в которых
 * @importcode=6 - расширенный отчет или же, если такого отчета в списке
 * нет, тогда ищется отчет с @importcode=4, т.е. стандартный.
 * Если и стандартного отчета не обнаружено, то генерируется ошибка (ИЛИ НЕТ???).
 **/
CREATE COMPUTE MODULE CreditHistoryPKBReportRequest_MakeReportRequest
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		DECLARE InpCreditHistory REFERENCE TO Environment.Variables.Source.XMLNSC;
		DECLARE InpPKBReportList REFERENCE TO InputRoot.XMLNSC;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'KZGetCreditHistoryRq';
		
		CALL FillMDOStandartElementsRq(InpPKBReportList, OutputRoot.XMLNSC);
		
		DECLARE OutRq REFERENCE TO OutputRoot.XMLNSC.KZGetCreditHistoryRq;
		
		SET OutRq.ApplicationNumber 		= InpCreditHistory.KZGetCreditHistoryRq.ApplicationNumber;
		SET OutRq.BKI 						= InpCreditHistory.KZGetCreditHistoryRq.BKI;
		SET OutRq.PersonInfo.PersonIdType 	= InpCreditHistory.KZGetCreditHistoryRq.PersonInfo.PersonIdType;
		SET OutRq.PersonInfo.PersonId 		= InpCreditHistory.KZGetCreditHistoryRq.PersonInfo.PersonId;
		
		CALL FillSOAPHeaderFields(OutputRoot.XMLNSC);
		
		-- Устанавливаем вначале пустое значение
		SET OutRq.ReportFormat 	= '';
		SET OutRq.ReportCode 	= GetApplicableReportCode(InpPKBReportList.KZGetPKBReportListRs.ReportList);
		
		-- Асинхронный запрос на отчет в формате XML
		SET OutRq.ReportFormat = REPORTFORMAT_XML;
		PROPAGATE TO TERMINAL 'out' DELETE NONE;
		-- Асинхронный запрос на отчет в формате HTML
		SET OutRq.ReportFormat = REPORTFORMAT_HTML;
		PROPAGATE TO TERMINAL 'out' DELETE NONE;
		
		-- Отсылка Echo-сообщения с параметрами ответа как в исходном
		-- входящем сообщении для ПМИЛа.
		CALL CopyEntireMessage();
		SET OutputRoot.MQMD.MsgId = Environment.Variables.InputMQMD.MsgId;
		SET OutputRoot.MQMD.ReplyToQ = Environment.Variables.InputMQMD.ReplyToQ;
		SET OutputRoot.MQMD.ReplyToQMgr = Environment.Variables.InputMQMD.ReplyToQMgr;
		PROPAGATE TO TERMINAL 'out1';
		
		RETURN FALSE;
	END;
	
	
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

/**
 * Проверка того, что статус код операции
 * не ошибочный (равен нулю).
 **/
CREATE FILTER MODULE CreditHistoryPKBReportRequest_IsErrorReturned
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		IF Root.XMLNSC.KZGetPKBReportListRs.Status.ifxca:StatusCode <> STATUS_CODE_OK THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;

/**
 * Проверяет список возвращенных отчетов и
 * маршрутизирует поток в зависимости от того,
 * найдены ли отчеты, доступные для обработки.
 **/
CREATE FILTER MODULE CreditHistoryPKBReportRequest_IsApplicableReportCodeReturned
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE applicableCode CHARACTER;
		SET applicableCode = GetApplicableReportCode(Root.XMLNSC.KZGetPKBReportListRs.ReportList);
		
		IF applicableCode <> REPORTFORMAT_NONE THEN
			RETURN TRUE;
		ELSE
			RETURN FALSE;
		END IF;
	END;
END MODULE;

/**
 * Заменяет ошибочные коды в ответном сообщении на неошибочные
 * перед передачей обратно в шину. Т.е., фактически, выполняет
 * предобработку ошибочных ответов.
 **/
CREATE COMPUTE MODULE CreditHistoryPKBReportRequest_AdjustErrorCodes
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		DECLARE rootTag REFERENCE TO InputRoot.XMLNSC.*[<];
		DECLARE outRs REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE FIELD OutputRoot.XMLNSC.KZGetCreditHistoryRs AS outRs;
		
		SET outRs = rootTag;
		
		IF rootTag.Status.ifxca:StatusCode = STATUS_CODE_CLIENT_NF THEN
			SET outRs.Status.ifxca:StatusCode = STATUS_CODE_OK;
			DELETE FIELD outRs.Status.ifxca:StatusDesc;
		END IF;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

/**
 * Формирует сообщение в шину с ошибкой о том,
 * что не найден формат отчета, доступный для обработки
 * (расширенный или стандартный).
 **/
CREATE COMPUTE MODULE CreditHistoryPKBReportRequest_ConstructMissedReportReplyMessage
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		
		DECLARE outRs REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE FIELD OutputRoot.XMLNSC.KZGetCreditHistoryRs AS outRs;
		
		DECLARE statusCode CHARACTER STATUS_NO_APPLICABLE_FORMAT;
		DECLARE statusDesc CHARACTER DESC_NO_APPLICABLE_FORMAT;
			
		CALL FillMDOStandartElementsRs(InputRoot.XMLNSC, OutputRoot.XMLNSC);
		
		SET outRs.Status.ifxca:StatusCode VALUE	= statusCode;
		SET outRs.Status.ifxca:StatusDesc VALUE	= statusDesc;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

/**
 * Получение из возвращенного списка допустимых форматов отчета
 * importcode отчета, для которого выполняется запрос. Если ни один
 * подходящий отчет не найден, то возвращается '-1'.
 **/
CREATE FUNCTION GetApplicableReportCode(IN reportList REFERENCE) RETURNS CHARACTER
BEGIN
	DECLARE standartReport ROW;
	DECLARE extendedReport ROW;
	
	DECLARE standartReportU ROW;
	DECLARE extendedReportU ROW;
	DECLARE firstedReportU ROW;
		 
	SET standartReport = THE(SELECT R FROM reportList.Report[] AS R WHERE R.ImportCode = IMPORTCODE_STANDART);
	SET extendedReport = THE(SELECT R FROM reportList.Report[] AS R WHERE R.ImportCode = IMPORTCODE_EXTENDED);
	 
	
	SET standartReportU = THE(SELECT R FROM reportList.Report[] AS R WHERE R.ImportCode = IMPORTCODE_STANDART_U);
	SET firstedReportU  = THE(SELECT R FROM reportList.Report[] AS R WHERE R.ImportCode = IMPORTCODE_FIRSTED_U);
	SET extendedReportU = THE(SELECT R FROM reportList.Report[] AS R WHERE R.ImportCode = IMPORTCODE_EXTENDED_U);
			
	IF CARDINALITY(extendedReport.*[]) <> 0 THEN
		RETURN IMPORTCODE_EXTENDED;
	ELSEIF CARDINALITY(standartReport.*[]) <> 0 THEN
		RETURN IMPORTCODE_STANDART;
	ELSEIF CARDINALITY(extendedReportU.*[]) <> 0 THEN
		RETURN IMPORTCODE_EXTENDED_U;
	ELSEIF CARDINALITY(standartReportU.*[]) <> 0 THEN
		RETURN IMPORTCODE_STANDART_U;		
	ELSEIF CARDINALITY(firstedReportU.*[]) <> 0 THEN
		RETURN IMPORTCODE_FIRSTED_U;	
	ELSE		
		RETURN REPORTFORMAT_NONE;
	END IF;
END;
