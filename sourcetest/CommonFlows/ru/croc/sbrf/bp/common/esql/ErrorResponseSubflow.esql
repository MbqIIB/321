BROKER SCHEMA ru.croc.sbrf.bp.common.esql
PATH ru.croc.sbrf.mdm.common;

DECLARE mdmschema NAMESPACE 'http://sbrf.ru/mdm/adapter/1';

-- Признак возврата сообщения об ошибке в формате IFX
DECLARE needIFXReply EXTERNAL BOOLEAN TRUE;
DECLARE ERROR_CODE CONSTANT CHARACTER '-100';

CREATE COMPUTE MODULE ErrorResponseSubflow_CreateErrorResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		-- Копирование заголовков сообщения (какие есть, далее будут модифицированы)
		CALL CopyMessageHeaders();
		
		-- Получение имени очереди и идентификатора корреляции (если есть) для отправки ответа
		-- 	в случае флоу запроса - из заголовков исходного сообщения
		-- 	в случае флоу ответа - из Environment.UserProperties (заполняется в EventLogSubflow)
		DECLARE sOutQueueName CHARACTER 
			COALESCE(
				Environment.UserProperties.ReplyToQ,
				InputRoot.MQMD.ReplyToQ, 
				'');
		DECLARE sOutQMgrName CHARACTER 
			COALESCE(
				Environment.UserProperties.ReplyToQMgr,
				InputRoot.MQMD.ReplyToQMgr, 
				'');
		-- Получение SOAP-идентификатора ответа (если есть) для отправки ответа через веб-сервис
		DECLARE sSOAPReplyIdentifier CHARACTER Environment.UserProperties.ReplyIdentifier;
		
		-- Если есть непустой SOAP-идентификатор
		IF sSOAPReplyIdentifier <> '' THEN
			SET OutputRoot.MQMD = NULL;
			SET OutputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier = CAST(sSOAPReplyIdentifier AS BLOB);
		-- Если указана очередь ответа
		ELSEIF sOutQueueName <> '' AND sOutQueueName <> 'UNKNOWN' AND sOutQMgrName <> '' THEN
			DECLARE correlId CHARACTER
				COALESCE(
					Environment.UserProperties.InputMsgId,
					InputRoot.MQMD.MsgId, 
					'');
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueName = sOutQueueName;
			SET OutputLocalEnvironment.Destination.MQ.DestinationData[1].queueManagerName = sOutQMgrName;			
			SET OutputRoot.MQMD.CorrelId	= CAST(correlId AS BLOB);
			SET OutputRoot.MQMD.MsgType		= MQMT_REPLY;
			SET OutputRoot.Properties.ReplyIdentifier = CAST(correlId AS BLOB);
			SET OutputRoot.Properties.ExpirationTime = NULL;
		-- Если ничего не указано, то формировать сообщение незачем
		ELSE
			RETURN FALSE;
		END IF;

		-- Получение описания ошибки
		DECLARE sErrDescr CHARACTER;
		DECLARE sErrNumber CHARACTER;
		CALL ru.croc.sbrf.mdm.common.GetExcDescription(InputExceptionList, sErrDescr, sErrNumber);

		-- Формирование структуры сообщения-ответа
		DECLARE outMsg REFERENCE TO OutputRoot;
		-- MDM
		IF EXISTS(InputRoot.XMLNSC.IFX[]) OR EXISTS(Environment.UserProperties.Service[]) THEN
			
			CREATE FIELD OutputRoot.XMLNSC.IFX.{REPLACE(Environment.UserProperties.Service, 'Rq', 'Rs')} AS outMsg;
			SET outMsg.RqUID = Environment.UserProperties.RqUID;
			SET outMsg.SPName = Environment.UserProperties.SPName;
			CREATE FIELD outMsg.{REPLACE(Environment.UserProperties.Operation, 'Rq', 'Rs')} AS outMsg;
			SET outMsg.Status.StatusCode = sErrNumber;
			SET outMsg.Status.StatusDesc = sErrDescr;
			SET outMsg.RqUID = Environment.UserProperties.RqUID;
			
		-- BP
		ELSE
			CREATE FIELD OutputRoot.XMLNSC.{REPLACE(COALESCE(FIELDNAME(InputRoot.XMLNSC.*:*[<]),Environment.UserProperties.Operation), 'Rq', 'Rs')} AS outMsg;
			SET outMsg.RqUID   = Environment.UserProperties.RqUID;
			SET outMsg.RqTm    = getLocalTimeStamp();
			SET outMsg.OperUID = Environment.UserProperties.OperUID;
			SET outMsg.Status.StatusCode       = ERROR_CODE;
			SET outMsg.Status.StatusDesc 	   = 'Ошибка обработки, операция не может быть выполнена';
			SET outMsg.Status.ServerStatusDesc = sErrDescr;
		END IF;
			
		IF sSOAPReplyIdentifier <> '' THEN
			PROPAGATE TO TERMINAL 'out1';
		ELSE
			PROPAGATE TO TERMINAL 'out';
		END IF;
		
		RETURN FALSE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;

--------------------------------
--
-- Необходимо возвращать ответ с ошибкой в формате IFX или в формате системы
--
--------------------------------
CREATE FILTER MODULE ErrorResponseSubflow_needIFXReply
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN needIFXReply;
	END;

END MODULE;

CREATE COMPUTE MODULE ErrorResponseSubflow_SetNS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders();
		CREATE FIELD OutputRoot.XMLNSC.mdmschema:DoIFXRs;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.mdmschema:DoIFXRs;
		CALL setNamespaceInfo(InputRoot.XMLNSC, outRef, mdmschema);
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;