BROKER SCHEMA ru.croc.sbrf.bp.common.esql

/*
DECLARE EventSourceProp EXTERNAL CHARACTER 'NSI';
DECLARE EventReceiverProp EXTERNAL CHARACTER 'A_FILE_NSI';

-- Параметр отключения логирования в БД КСШ в рамках потока, где размещен данный узел ErrorHandlerSubflow
-- по умолчанию отключен (логирование ведется)
-- Для включения в свойствах потока нужно установить значение параметра в '1'
DECLARE DisableFlowLogging EXTERNAL CHARACTER '0';
*/

CREATE COMPUTE MODULE NSIErrorHandlerSubflow_SetParams
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Хочется хранить признак отключения логирования в Environment.
		-- Однако, если это делать в UserProperties, то параметры будут наследоваться между потоками,
		-- потому что UserProperties восстанавливаются из ECHO при агрегации. Соответственно сам ключ храним
		-- в корне Environment.
		-- Однако, есть проблема с таймаутами, которая заключается в том, что если происходит таймаут
		-- агрегации, то содержимое Environment'а обнуляется. Т.е. нужен резерв, откуда бы можно было
		-- восстановить, поэтому (ФИНТ) еще одну копию все-таки складываем в UserProperties как резерв.

		-- Сохраняем значение признака DisableFlowLogging в переменные среды
		SET Environment.DisableFlowLogging = CASE WHEN DisableFlowLogging = '1' THEN TRUE ELSE FALSE END;

		-- Сохраняем резервное значение признака DisableFlowLogging в переменные среды
		SET Environment.UserProperties.DisableFlowLoggingBACKUP = Environment.DisableFlowLogging;

		-- Заполнение информации среды
		SET Environment.ErrParams.QueueName		= COALESCE(Environment.InputQueue, InputRoot.MQMD.SourceQueue, 'UNKNOWN');
		SET Environment.ErrParams.EventSource	= COALESCE(Environment.Source, EventSourceProp);
		SET Environment.ErrParams.EventReciever	= COALESCE(Environment.Reciever, EventReceiverProp);
		SET Environment.ErrParams.ProcStatus	= COALESCE(Environment.ProcStatus, 'SUCCESS');
		SET Environment.ErrParams.Operation		= 'UNKNOWN';

		SET Environment.UserProperties.Operation = Environment.ErrParams.Operation;
		-- Определим имя текущего менеджера (для логирования)
		SET Environment.UserProperties.QMgr = QueueManagerName;

		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE NSIErrorHandlerSubflow_CreateMessage
CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

		--Параметры сообщения
		--в первую очередь анализируем MQRFH (для нотификаций из МДМ), затем MQMD, иначе ставим по умолчанию
		DECLARE inCCSID    INT GetESBLogCCSID();
		DECLARE inEncoding INT GetESBLogEncoding();

		-- Создаем заголовок MQMD
		CALL CreateMQMDHeaderELMess(OutputRoot, inCCSID, inEncoding);	

		-- Определим имя очереди и имя менеджера назначения (для логирования)
		DECLARE destQMgr CHARACTER COALESCE(InputLocalEnvironment.WrittenDestination.MQ.DestinationData.queueManagerName, 'UNKNOWN');
		DECLARE destQ	 CHARACTER COALESCE(InputLocalEnvironment.WrittenDestination.MQ.DestinationData.queueName, 'UNKNOWN');

		-- Сформируем содержимое usr-заголовок
		DECLARE usrHeader ROW;

		SET usrHeader.EventDate     = getLocalTimeStamp();
		SET usrHeader.EventSource   = CheckStr(COALESCE(Environment.ErrParams.EventSource, EventSourceProp));
		SET usrHeader.EventReciever = CheckStr(COALESCE(Environment.ErrParams.EventReciever, EventReceiverProp));
		SET usrHeader.Operation     = CheckStr(Environment.ErrParams.Operation);
		SET usrHeader.SourceQueue   = CheckStr(Environment.ErrParams.QueueName);
		SET usrHeader.SourceQM      = CheckStr(Environment.UserProperties.QMgr);
		SET usrHeader.TargetQueue   = CheckStr(destQ);
		SET usrHeader.TargetQM	    = CheckStr(destQMgr);
		SET usrHeader.ReplyQueue    = CheckStr2(Environment.UserProperties.ReplyToQ, 'NONE');
		-- если очередь ответов не указана, то и менеджер очередей ответов принудительно проставим как не указанный
		-- т.к. по умолчанию он задается равным текущим
		IF usrHeader.ReplyQueue   = 'NONE' THEN
			SET usrHeader.ReplyQM = 'NONE';
		ELSE
			SET usrHeader.ReplyQM = CheckStr(Environment.UserProperties.ReplyToQMgr);
		END IF;
		SET usrHeader.ProcStatus  = 'ERROR';
		SET usrHeader.ErrorText   = CreateExceptionString(OutputLocalEnvironment, InputExceptionList);
		SET usrHeader.RqUID 	  = COALESCE(Environment.ErrParams.RqUID, Environment.UserProperties.RqUID, 'UNKNOWN');

		-- Создаем заголовок MQRFH2.usr
		CALL CreateMQRFH2usrHeaderELMess(OutputRoot, usrHeader);	
		
		-- Добавляем тело сообщения
		CALL CreateBlobELMess(InputRoot, OutputRoot, inCCSID, inEncoding);

		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;

------------------------------------------
--
-- Заглушка для обработки возможных исключений
-- при формировании и попытке отправки сообщение для логирования
--
------------------------------------------
CREATE COMPUTE MODULE NSIErrorHandlerSubflow_Stub
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE NSIErrorHandlerSubflow_SetDisableFlowLogging
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- Хочется хранить признак отключения логирования в Environment.
		-- Однако, если это делать в UserProperties, то параметры будут наследоваться между потоками,
		-- потому что UserProperties восстанавливаются из ECHO при агрегации. Соответственно сам ключ храним
		-- в корне Environment.
		-- Однако, есть проблема с таймаутами, которая заключается в том, что если происходит таймаут
		-- агрегации, то содержимое Environment'а обнуляется. Т.е. нужен резерв, откуда бы можно было
		-- восстановить, поэтому (ФИНТ) еще одну копию все-таки складываем в UserProperties как резерв.

		-- Сохраняем значение признака DisableFlowLogging в переменные среды
		SET Environment.DisableFlowLogging = CASE WHEN DisableFlowLogging = '1' THEN TRUE ELSE FALSE END;

		-- Сохраняем резервное значение признака DisableFlowLogging в переменные среды
		SET Environment.UserProperties.DisableFlowLoggingBACKUP = Environment.DisableFlowLogging;

		RETURN TRUE;
	END;
END MODULE;
