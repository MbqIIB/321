BROKER SCHEMA ru.croc.sbkz.adapters.bss.esql

PATH ru.croc.sbkz.utils;

-- Маршрутизация потока в соответствии с операцией
CREATE COMPUTE MODULE RequestForESB_DetectOperation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE Operation CHARACTER FIELDNAME(InputRoot.XMLNSC.*[<]);
		DECLARE labelName CHARACTER;
		
		CASE Operation
		WHEN 'CURRENCYRATES_RQ' THEN
			SET labelName = 'CURRENCYRATES_RQ';
		WHEN 'STATEMENT_RQ' THEN
			SET labelName = 'STATEMENT_RQ';
		WHEN 'PAYDOC' THEN
			SET labelName = 'PAYDOC';
		WHEN 'PAYDOCCUR' THEN
			SET labelName = 'PAYDOCCUR';
		WHEN 'STATUS' THEN
			SET labelName = 'STATUS';
		WHEN 'CANCEL' THEN
			SET labelName = 'CANCEL';
		WHEN 'EXCDOC' THEN
			SET labelName = 'EXCDOC';
		WHEN 'CONTRACT_LIST_RQ' THEN
			SET labelName = 'CONTRACT_LIST_RQ';
		ELSE
			-- Неизвестный тип сообщения
			THROW USER EXCEPTION VALUES ('Unknown message format', Operation);
		END CASE;
		
		SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = labelName;

		RETURN TRUE;
	END;
END MODULE;


-- Заполнение параметров маршрутизации в MQRFH2 заголовке
CREATE COMPUTE MODULE RequestForESB_FillMqRfh2usr
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyEntireMessage();
		-- Создаем заголовок и вставляем переменные для маршрутизации
	 	IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
	 	END IF;
	 	-- Маршрутизация через OperationId в ПМИЛ
	 	SET OutputRoot.MQRFH2.usr.OperationId	= FIELDNAME(OutputRoot.XMLNSC.*[<]);
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


/**
 * Запрос курсов валют
 **/ 
CREATE COMPUTE MODULE RequestForESB_ConvertBSS2MDO_CurrRate
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot,OutputRoot);
		CALL FillMDOStandardElementsRq(InputRoot, OutputRoot, 'KZGetCurrencyRateRq');
		SET OutputRoot.XMLNSC.KZGetCurrencyRateRq.RateDT = InputRoot.XMLNSC.*:CURRENCYRATES_RQ.RATEDATE;
		RETURN TRUE;
	END;
END MODULE;

/**
 * Платежное поручение 
 **/ 
CREATE COMPUTE MODULE RequestForESB_ConvertBSS2MDO_PayDoc
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot,OutputRoot);
		CALL FillMDOStandardElementsRq(InputRoot, OutputRoot, 'KZLegalPayDocRq');
		
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.*:PAYDOC;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.KZLegalPayDocRq;
		
		CALL CopyPayDocToMDO(inRef,outRef);		
		
		RETURN TRUE;
	END;
END MODULE;

/**
 * Запрос статуса платежного документа
 **/
CREATE COMPUTE MODULE RequestForESB_ConvertBSS2MDO_Status
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN

			CALL CopyMessageHeaders(InputRoot,OutputRoot);
			CALL FillMDOStandardElementsRq(InputRoot, OutputRoot, 'KZLegalGetPayDocStatusRq');
			DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.KZLegalGetPayDocStatusRq;
			SET outRef.Doc.PayDocInfo.DocRef 		= InputRoot.XMLNSC.STATUS.DocumentRef.DOCREF;
			SET outRef.Doc.DocType 					= InputRoot.XMLNSC.STATUS.DocumentRef.DOCTYPE;
		
		RETURN FALSE;
	END;

END MODULE;

/**
 *  Платежное поручение в валюте.
 **/
CREATE COMPUTE MODULE RequestForESB_ConvertBSS2MDO_PayDocCur
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot,OutputRoot);
		CALL FillMDOStandardElementsRq(InputRoot, OutputRoot, 'KZLegalPayDocRq');
		
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.*:PAYDOCCUR;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.KZLegalPayDocRq;
		
		CALL CopyPayDocToMDO(inRef,outRef);	
		RETURN TRUE;
	END;
END MODULE;

/**
 * Запрос выписки
 **/
CREATE COMPUTE MODULE RequestForESB_ConvertBSS2MDO_Statement
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot,OutputRoot);
		CALL FillMDOStandardElementsRq(InputRoot, OutputRoot, 'KZLegalGetAccountStatementRq');
		
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.*:STATEMENT_RQ;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.KZLegalGetAccountStatementRq;
		
		SET outRef.AcctReq.AcctId 					= inRef.ACCOUNTS.ACCOUNT;
		SET outRef.AcctReq.BankInfo.banks:BankId 	= inRef.ACCOUNTS.BIC;
		SET outRef.DateStart						= inRef.DATEFROM;
		SET outRef.DateEnd							= inRef.DATETO;
		SET outRef.IsExtStatement					= 'Y';
		SET outRef.IsTurnovers						= 'Y';
		
		RETURN TRUE;
	END;
END MODULE;

/**
 * Запрос на отзыв платежного документа
 **/
CREATE COMPUTE MODULE RequestForESB_ConvertBSS2MDO_Cancel
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot,OutputRoot);
		CALL FillMDOStandardElementsRq(InputRoot, OutputRoot, 'KZLegalCanPayDocRq');
		
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.*:CANCEL;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.KZLegalCanPayDocRq;
		
		SET outRef.TransType						= inRef.*:DocumentRef.*:DOCTYPE;
		SET outRef.PayDocInfo.DocRef				= inRef.*:DocumentRef.*:DOCREF;
		SET outRef.PayDocInfo.CancelDocRef			= inRef.*:DocumentRef.*:CANCELDOCREF;
		
		RETURN TRUE;
	END;
END MODULE;

/**
 * Запрос на конвертацию
 **/
CREATE COMPUTE MODULE RequestForESB_ConvertBSS2MDO_CurrOper
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot,OutputRoot);
		CALL FillMDOStandardElementsRq(InputRoot, OutputRoot, 'KZLegalCurrOperRq');
		
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.*:EXCDOC;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.KZLegalCurrOperRq;
		
		SET outRef.TransType 						= inRef.TYPE;
		DECLARE payer REFERENCE TO outRef;
		CREATE LASTCHILD OF outRef AS payer NAME 'PayerInfo';
		SET payer.AcctInfo.AcctId 					= inRef.DocumentData.*:Payer.*:Account;
		SET payer.AcctInfo.AcctCur 					= inRef.DocumentData.*:Payer.*:CURRCODE;
		SET payer.OrgInfo.orgs:Name					= inRef.DocumentData.*:Payer.*:NAME;
		
		DECLARE orgId REFERENCE TO outRef;
		CREATE LASTCHILD OF payer.OrgInfo AS orgId NAME 'OrgIdExt';
		SET orgId.Key 								= 'RNN';
		SET orgId.Value 							= inRef.DocumentData.*:Payer.*:RNN;
		
		CREATE LASTCHILD OF payer.OrgInfo AS orgId NAME 'OrgIdExt';
		SET orgId.Key 								= 'BIC';
		SET orgId.Value 							= inRef.DocumentData.*:PAYERBIC;
		
		CREATE LASTCHILD OF payer.OrgInfo NAME 'OrgAttr';
		DECLARE person REFERENCE TO outRef;
		CREATE LASTCHILD OF payer.OrgInfo.OrgAttr AS person NAME 'KeyPerson';
		SET person.PositionKey						= 'CHIEF';
		SET person.PersonInfo.inds:FullName			= inRef.DocumentData.*:Payer.*:CHIEF;
				
		CREATE LASTCHILD OF payer.OrgInfo.OrgAttr AS person NAME 'KeyPerson';
		SET person.PositionKey						= 'ACC';
		SET person.PersonInfo.inds:FullName			= inRef.DocumentData.*:Payer.*:MAINBK;
		SET payer.OrgInfo.OrgAttr.Resident			= inRef.DocumentData.*:Payer.*:IRS;
		SET payer.OrgInfo.OrgAttr.EcSector			= inRef.DocumentData.*:Payer.*:SECO;
		SET payer.ChkPay							= inRef.DocumentData.*:Payer.*:CHKPAY;
		SET payer.AcctComId.AcctId					= inRef.DocumentData.*:Payer.*:AccountCom;
		SET payer.AcctComId.AcctCur					= inRef.DocumentData.*:Payer.*:CurrCom;
		
		DECLARE receiver REFERENCE TO outRef;
		CREATE LASTCHILD OF outRef AS receiver NAME 'ReceiverInfo';
		SET receiver.AcctInfo.AcctId 					= inRef.DocumentData.*:Receiver.*:Account;
		SET receiver.AcctInfo.AcctCur 					= inRef.DocumentData.*:Receiver.*:CURRCODE;
		SET receiver.OrgInfo.orgs:Name					= inRef.DocumentData.*:Receiver.*:NAME;
		SET receiver.OrgInfo.orgs:Name					= inRef.DocumentData.*:Receiver.*:NAME;
		SET receiver.OrgInfo.orgs:Name					= inRef.DocumentData.*:Receiver.*:NAME;
		SET receiver.OrgInfo.orgs:CompositeContactInfo.ifxca:ContactInfoType									= 'LegalAddress';
		SET receiver.OrgInfo.orgs:CompositeContactInfo.ifxca:ContactInfo.ifxca:PostAddr.commons:Addr1			= inRef.DocumentData.*:Receiver.*:ADDRESS;
		SET receiver.OrgInfo.orgs:CompositeContactInfo.ifxca:ContactInfo.ifxca:PostAddr.commons:Country			= inRef.DocumentData.*:Receiver.*:COUNTRY;
		SET receiver.OrgInfo.orgs:KPPInfo.ifxca:TaxId	= inRef.DocumentData.*:Receiver.*:KPP;
		
		CREATE LASTCHILD OF receiver.OrgInfo AS orgId NAME 'OrgIdExt';
		SET orgId.Key 								= 'RNN';
		SET orgId.Value 							= inRef.DocumentData.*:Receiver.*:RNN;
		CREATE LASTCHILD OF receiver.OrgInfo AS orgId NAME 'OrgIdExt';
		SET orgId.Key 								= 'BIC';
		SET orgId.Value 							= inRef.DocumentData.*:RECEIVERBIC;
		DECLARE orgAttr REFERENCE TO outRef;
		CREATE LASTCHILD OF payer.OrgInfo AS orgAttr NAME 'OrgAttr';
		SET orgAttr.Resident						= inRef.DocumentData.*:Receiver.*:IRS;
		SET orgAttr.EcSector						= inRef.DocumentData.*:Receiver.*:SECO;
		SET orgAttr.Country							= inRef.DocumentData.*:Receiver.*:COUNTRY;
		
		DECLARE bankInfo REFERENCE TO outRef;
		CREATE LASTCHILD OF payer AS bankInfo NAME 'BankInfo';
		SET bankInfo.banks:BankId					= inRef.DocumentData.*:BANKRECEIVER.*:Receiverbic;
		SET bankInfo.banks:CorAcctId				= inRef.DocumentData.*:BANKRECEIVER.*:CorAccount;
		SET bankInfo.banks:Name						= inRef.DocumentData.*:BANKRECEIVER.*:NAME;
		SET bankInfo.banks:PostAddr.commons:Addr1	= inRef.DocumentData.*:BANKRECEIVER.*:ADDRESS;
		SET bankInfo.banks:PostAddr.commons:Country	= inRef.DocumentData.*:BANKRECEIVER.*:COUNTRY;
		
		DECLARE payDoc REFERENCE TO outRef;
		CREATE LASTCHILD OF outRef AS payDoc NAME 'PayDocInfo';
		CREATE LASTCHILD OF payDoc AS bankInfo NAME 'CorrBankInfo';
		SET bankInfo.banks:BankId					= inRef.DocumentData.*:CORRBANK.*:Receiverbic;
		SET bankInfo.banks:CorAcctId				= inRef.DocumentData.*:CORRBANK.*:CorAccount;
		SET bankInfo.banks:Name						= inRef.DocumentData.*:CORRBANK.*:NAME;
		SET bankInfo.banks:PostAddr.commons:Addr1	= inRef.DocumentData.*:CORRBANK.*:ADDRESS;
		SET bankInfo.banks:PostAddr.commons:Country	= inRef.DocumentData.*:CORRBANK.*:COUNTRY;
		
		SET payDoc.PurposeCode						= inRef.DocumentData.*:Details.*:KNP;
		SET payDoc.OperKind							= inRef.DocumentData.*:Details.*:VO;
		SET payDoc.DocNum							= inRef.DocumentData.*:Details.*:NUM;
		SET payDoc.DocDate							= inRef.DocumentData.*:Details.*:DATE;
		SET payDoc.ContractNum						= inRef.DocumentData.*:Details.*:NumCont;
		SET payDoc.ContractDate						= inRef.DocumentData.*:Details.*:DateCont;		
		SET payDoc.ContractUN						= inRef.DocumentData.*:Details.*:UNK;
		SET payDoc.Invoice							= inRef.DocumentData.*:Details.*:Invoice;
		SET payDoc.ContractUNDate					= inRef.DocumentData.*:Details.*:DateUnk;
		SET payDoc.SendMethod						= inRef.DocumentData.*:Details.*:SEND;		
		SET payDoc.SpecialService					= inRef.DocumentData.*:Details.*:PSO;
		SET payDoc.IncomeCode						= inRef.DocumentData.*:Details.*:BCLASS;
		SET payDoc.Urgent							= inRef.DocumentData.*:Details.*:URGENT;
		SET payDoc.IsLoanPay						= inRef.DocumentData.*:Details.*:LON;		
		SET payDoc.OperTypeCode						= inRef.DocumentData.*:Details.*:CodeTypeOper;
		SET payDoc.Assign							= inRef.DocumentData.*:Details.*:ASSIGN;
		SET payDoc.Note								= inRef.DocumentData.*:Notification;
		
		SET payDoc.DocRef							= inRef.DocumentData.OPERREF;
		SET payDoc.RefDate							= inRef.DocumentData.DATE;
		SET payDoc.CurrCode							= inRef.DocumentData.CURRCODE;
		SET payDoc.Amount							= inRef.DocumentData.AMOUNT;
		SET payDoc.AccAgrNum						= inRef.DocumentData.ACCONT;
		SET payDoc.AccAgrDate						= inRef.DocumentData.ACCDATE;
		SET payDoc.CredAgrNum						= inRef.DocumentData.CREDITARG;
		SET payDoc.AmountCur						= inRef.DocumentData.AMOUNTCUR;
		SET payDoc.CurrContractNum 					= inRef.DocumentData.CONTRACTNUMBER;
		RETURN TRUE;
	END;
END MODULE;

/*
u07357 09.05.2015
*/ 
CREATE COMPUTE MODULE RequestForESB_ConvertBSS2MDO_CONTRACT_LIST_RQ
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN 
		CALL CopyMessageHeaders(InputRoot,OutputRoot);
		CALL FillMDOStandardElementsRq(InputRoot, OutputRoot, 'KZGetContractListRq');
		 
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.*:CONTRACT_LIST_RQ;
		DECLARE outRef REFERENCE TO OutputRoot.XMLNSC.KZGetContractListRq;
		DECLARE conts REFERENCE TO outRef;

		FOR contrac AS inRef.*:BIN[] DO
			CREATE LASTCHILD OF outRef AS conts NAME 'Contract';
			SET conts.BIN 			= FIELDVALUE(contrac);
		END FOR;
		
		SET Environment.UserProperties.BIN				= conts.BIN;
		
		RETURN TRUE;
	END;
END MODULE;


