BROKER SCHEMA ru.croc.sbkz.adapters.rsrouter.esql

PATH ru.croc.sbrf.bp.common.esql;

CREATE COMPUTE MODULE ResponseFromQPRAGMA_PrepareReply
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders();
				 
		IF NOT EXISTS(OutputRoot.MQMD[]) THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN('MQMD') NAME 'MQMD';
		END IF;
		SET OutputRoot.MQMD				= InputRoot.ComIbmAggregateReplyBody.ECHO.MQMD;
		
		IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN('MQRFH2') NAME 'MQRFH2';
		END IF;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';

		DECLARE Operation CHARACTER FIELDNAME(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<]);
		DECLARE qpragmaorig REFERENCE TO InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<];
				
		DECLARE labelName CHARACTER;
		
		
		-- Восстанавливаем идентификаторы ответного сообщения 
		SET OutputRoot.MQMD.CorrelId	= CAST(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD.MsgId AS BLOB);
		SET OutputRoot.MQMD.MsgType		= MQMT_REPLY;
					
		CALL SetCommonMQReplyHeaders(OutputRoot);
		SET OutputLocalEnvironment = InputLocalEnvironment;	
		--Адресат ответного сообщения
		CALL SetMQReplyDestination(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source, OutputLocalEnvironment);
		
		/*CREATE FIRSTCHILD OF OutputRoot.XMLNSC 
                  PARSE ( 
                        InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Body
                        CCSID 1208
                        OPTIONS FolderBitStream + ValidateNone);*/  
        
        SET OutputRoot.XMLNSC = InputRoot.ComIbmAggregateReplyBody.REQUEST.XMLNSC;                
                        
		CASE Operation
		WHEN 'KZPrivateMoneyTransferRq' THEN
			SET labelName = 'KZPrivateMoneyTransferRs';				 			
		ELSE
			-- Неизвестный тип сообщения 	 
			THROW USER EXCEPTION VALUES ('Unknown format XML in RequestForRouterRSQPRAGMA(SBOL_RS)', Operation);
		END CASE;		
		 
		SET Environment.UserProperties.Source.MQMD 			= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD;
		SET Environment.UserProperties.Source.MQRFH2 		= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQRFH2;
		SET Environment.UserProperties.Source.Properties	= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Properties;
		SET Environment.UserProperties.Source.Body 			= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Body;
		 	
	 	SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = labelName;		
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ResponseFromQPRAGMA_Convert2MDO_ResponseForSBOLRSFromQP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();		
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';		
		
		DECLARE inRef  REFERENCE TO InputRoot.XMLNSC.*[<];
		DECLARE outRef REFERENCE TO OutputRoot; 
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRef NAME 'QPragma_Block';
		
		SET outRef.Status.StatusCode = COALESCE(inRef.Status.*:StatusCode,InputRoot.XMLNSC.*[<].Status.*:StatusCode);
		SET outRef.Status.StatusDesc = COALESCE(inRef.Status.*:StatusDesc,InputRoot.XMLNSC.*[<].Status.*:StatusDesc);
		
		IF EXISTS(inRef.Id[]) THEN		
			SET outRef.OperationName = inRef.Id;
			SET outRef.CurAmt        = inRef.Penalty;
			SET outRef.Amount        = inRef.Amount;	
		END IF;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;
