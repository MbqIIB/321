BROKER SCHEMA ru.croc.sbkz.adapters.rsrouter.esql

PATH ru.croc.sbrf.bp.common.esql;

CREATE COMPUTE MODULE ResponseForRouterRSWAY_PrepareReply
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		 
		IF NOT EXISTS(OutputRoot.MQMD[]) THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN('MQMD') NAME 'MQMD';
		END IF;
		SET OutputRoot.MQMD				= InputRoot.ComIbmAggregateReplyBody.ECHO.MQMD;
		
		IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN('MQRFH2') NAME 'MQRFH2';
		END IF;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		DECLARE inRef REFERENCE TO InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<];
		
		DECLARE inRoot REFERENCE TO InputRoot.ComIbmAggregateReplyBody.REQUEST.XMLNSC.*[<];
		
		DECLARE Operation CHARACTER FIELDNAME(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<]);
		
		DECLARE labelName CHARACTER;
						
		/*IF personNum = 1 AND docPriority IS NOT NULL THEN*/
		
		IF inRoot.*[<].*[<].Status.RespCode = '0' THEN 
		
			SET OutputRoot.XMLNSC	=  inRef;		
			
			CREATE LASTCHILD OF OutputRoot.XMLNSC NAME 'AuthCode' VALUE THE(SELECT ITEM attr.Value FROM inRoot.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode');
			
			
			CASE Operation
			WHEN 'KZWAYAuthRqAccCreditRq' THEN
				SET labelName = 'KZWAYAuthRqAccCreditRs';
			WHEN 'KZWAYAuthRqNewDepRq' THEN
				SET labelName = 'KZWAYAuthRqNewDepRs'; 						 			
			ELSE
				-- Неизвестный тип сообщения 	 
				THROW USER EXCEPTION VALUES ('Unknown format XML in RequestForRouterRSWAY(SBOL_RS)', Operation);
			END CASE;
		
		ELSE
			
			IF NOT EXISTS(inRoot.*[<].*[<].Status[]) THEN
			
				IF inRoot.Status.StatusCode <> '-105' OR FIELDVALUE(inRoot.(XMLNSC.Attribute)"resp_code") <> '-105' THEN
					
					DECLARE outRoot REFERENCE TO OutputRoot;
					
					CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'UFXMsg_Error';
					
					SET outRoot.Status.StatusCode		= COALESCE(inRoot.Status.StatusCode,inRoot.(XMLNSC.Attribute)"resp_code");
					SET outRoot.Status.StatusDesc		= COALESCE(inRoot.Status.StatusDesc,inRoot.(XMLNSC.Attribute)"resp_text");	
					SET outRoot.Status.StatusRRN		= THE(SELECT ITEM attr.Value FROM inRoot.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'RRN');
					SET outRoot.Status.StatusAuthCode	= THE(SELECT ITEM attr.Value FROM inRoot.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode');
							
						-- Восстанавливаем идентификаторы ответного сообщения 
					SET OutputRoot.MQMD.CorrelId	= CAST(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD.MsgId AS BLOB);
					SET OutputRoot.MQMD.MsgType		= MQMT_REPLY;
					
					CALL SetCommonMQReplyHeaders(OutputRoot);
					SET OutputLocalEnvironment = InputLocalEnvironment;	
					--Адресат ответного сообщения
					CALL SetMQReplyDestination(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source, OutputLocalEnvironment);
					
					PROPAGATE TO TERMINAL 'out1';
					
					RETURN FALSE;
				
				ELSE
					
					DECLARE outRoot REFERENCE TO OutputRoot;
					
					CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'UFXMsg_Error';
					
					SET outRoot.Status.StatusCode	= COALESCE(inRoot.Status.StatusCode,inRoot.(XMLNSC.Attribute)"resp_code");--inRoot.Status.StatusCode;
					SET outRoot.Status.StatusDesc	= COALESCE(inRoot.Status.StatusDesc,inRoot.(XMLNSC.Attribute)"resp_text");--inRoot.Status.StatusCode;	
					
					SET outRoot.Status.StatusRRN		= THE(SELECT ITEM attr.Value FROM inRoot.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'RRN');
					SET outRoot.Status.StatusAuthCode	= THE(SELECT ITEM attr.Value FROM inRoot.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode');
							
						-- Восстанавливаем идентификаторы ответного сообщения 
					SET OutputRoot.MQMD.CorrelId	= CAST(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD.MsgId AS BLOB);
					SET OutputRoot.MQMD.MsgType		= MQMT_REPLY;
					
					CALL SetCommonMQReplyHeaders(OutputRoot);
					SET OutputLocalEnvironment = InputLocalEnvironment;	
					--Адресат ответного сообщения
					CALL SetMQReplyDestination(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source, OutputLocalEnvironment);
					
					PROPAGATE TO TERMINAL 'out1';
					
					SET OutputRoot.XMLNSC	=  inRef;
					
					CASE Operation
					WHEN 'KZWAYAuthRqAccCreditRq' THEN
						SET labelName = 'KZWAYAuthRevRqAccCreditRq';
					WHEN 'KZWAYAuthRqNewDepRq' THEN
						SET labelName = 'KZWAYAuthRevRqNewDepRq'; 						 			
					ELSE
						-- Неизвестный тип сообщения 	 
						THROW USER EXCEPTION VALUES ('Unknown format XML in RequestForRouterRSWAY(SBOL_RS)', Operation);
					END CASE;
					--SET labelName = 'KZWAYAuthRevRqAccCreditRq';
					
				END IF;
			ELSE
					DECLARE outRoot REFERENCE TO OutputRoot;
					
					CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'UFXMsg_Error';
					
					SET outRoot.Status.StatusCode	= inRoot.*[<].*[<].Status.RespCode;
					SET outRoot.Status.StatusDesc	= inRoot.*[<].*[<].Status.RespText;	
					
					SET outRoot.Status.StatusRRN		= THE(SELECT ITEM attr.Value FROM inRoot.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'RRN');
					SET outRoot.Status.StatusAuthCode	= THE(SELECT ITEM attr.Value FROM inRoot.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode');
							
						-- Восстанавливаем идентификаторы ответного сообщения 
					SET OutputRoot.MQMD.CorrelId	= CAST(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD.MsgId AS BLOB);
					SET OutputRoot.MQMD.MsgType		= MQMT_REPLY;
					
					CALL SetCommonMQReplyHeaders(OutputRoot);
					SET OutputLocalEnvironment = InputLocalEnvironment;	
					--Адресат ответного сообщения
					CALL SetMQReplyDestination(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source, OutputLocalEnvironment);
					
					PROPAGATE TO TERMINAL 'out1';
					
					RETURN FALSE;	
			END IF;				
			
		END IF;
		 
		SET Environment.UserProperties.Source.MQMD 			= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD;
		SET Environment.UserProperties.Source.MQRFH2 		= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQRFH2;
		SET Environment.UserProperties.Source.Properties	= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Properties;
		SET Environment.UserProperties.Source.Body 			= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Body;
		 	
	 	SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = labelName;	
		
		RETURN TRUE;
	END;
	 
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSWAY_ConvertUFX2MDO_TransferMoneyQPragma
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC;
		DECLARE outRoot REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZPrivateMoneyTransferRq';
		
		--CALL SetCommonMDOElementsFromUFX(inRoot, outRoot);
		
		SET outRoot.RqUID	=	inRoot.RqUID;
		SET outRoot.RqTm	=	inRoot.RqTm;
		SET outRoot.SPName  =   inRoot.SPName;
		
		SET outRoot.(XMLNSC.NamespaceDecl)xmlns:inds = inds;
		SET outRoot.TransactionType = 'SOA_Ufx_AccCredit_AuthReq';--inRoot.MsgData.Doc.TransType.TransCode.MsgCode;
		
		DECLARE attr REFERENCE TO outRoot;
		CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
		SET attr.AttrId 		= 'VERS';
		SET attr.AttrValue 		= '2.0';
		/*CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
		SET attr.AttrId 		= 'TAPP';
		SET attr.AttrValue		= inRoot.Target.(XMLNSC.Attribute)app;
		CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
		SET attr.AttrId 		= 'TROLE';
		SET attr.AttrValue 		= inRoot.Target.(XMLNSC.Attribute)role;*/
		/*FOR parm AS inRoot.MsgData.Doc.DocRefSet.Parm[] DO
			IF parm.ParmCode IN ('RRN', 'SRN', 'STAN', 'CPID') THEN*/
				CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
				SET attr.AttrId			= 'RRN';
				SET attr.AttrValue 		= inRoot.RegNumber;
				
				CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
				SET attr.AttrId			= 'SRN';
				SET attr.AttrValue 		= 'SBOLRS_' || inRoot.RegNumber;
				
				CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
				SET attr.AttrId			= 'STAN';
				SET attr.AttrValue 		= inRoot.AuthCode;
				
			/*END IF;
		END FOR;*/
		
		DECLARE xInfo REFERENCE TO outRoot;
		CREATE LASTCHILD OF outRoot AS xInfo NAME 'XferInfo';
		DECLARE acct REFERENCE TO outRoot;
		CREATE LASTCHILD OF xInfo AS acct NAME 'AcctFrom';
		SET acct.AcctId = inRoot.DepAcctIdFrom.AcctId;
		
		DECLARE extId REFERENCE TO outRoot;
		CREATE LASTCHILD OF acct AS extId NAME 'ExtAcctId';
		SET extId.Key 					= 'RBSN';
		SET extId.Value 				= inRoot.MsgData.Doc.Originator.RBSNumber;		
		CREATE LASTCHILD OF acct AS extId NAME 'ExtAcctId';
		SET extId.Key 					= 'MID';
		--SET extId.Value 				= inRoot.MsgData.Doc.Originator.MemberId;		
		IF inRoot.Template = 'W4D' THEN
			SET extId.Value 				= 'W4D';
		ELSE
			SET extId.Value 				= '';
		END IF;	
		
		SET acct.ClientInfo.PersonInfo.inds:PersonName.inds:LastName		= inRoot.MsgData.Doc.Originator.Client.ClientInfo.LastName;
		SET acct.ClientInfo.PersonInfo.PersonIdExt.Key 						= 'TAXID';
		SET acct.ClientInfo.PersonInfo.PersonIdExt.Value 					= inRoot.MsgData.Doc.Originator.Client.ClientInfo.TaxpayerIdentifier;		
		
		CREATE LASTCHILD OF xInfo AS acct NAME 'AcctTo';		
		SET acct.AcctId 													= inRoot.ContractNumber;
		SET acct.ClientInfo.PersonInfo.inds:PersonName.inds:LastName		= inRoot.MsgData.Doc.Destination.Client.ClientInfo.LastName;
		SET acct.ClientInfo.PersonInfo.PersonIdExt.Key 						= 'TAXID';
		SET acct.ClientInfo.PersonInfo.PersonIdExt.Value 					= inRoot.MsgData.Doc.Destination.Client.ClientInfo.TaxpayerIdentifier;		
		CREATE LASTCHILD OF acct AS extId NAME 'ExtAcctId';
		SET extId.Key 					= 'RBSN';
		SET extId.Value 				= inRoot.MsgData.Doc.Destination.RBSNumber;		
		CREATE LASTCHILD OF acct AS extId NAME 'ExtAcctId';
		SET extId.Key 					= 'MID';
				
		--SET extId.Value 				= 'W4C';--inRoot.MsgData.Doc.Destination.MemberId;
		IF inRoot.Template = 'W4D' THEN
			SET extId.Value 				= 'W4D';
		ELSE
			SET extId.Value 				= 'W4C';
		END IF;	
		
		SET xInfo.TransPurpose			= inRoot.Purpose;
		SET xInfo.TransDt				= inRoot.MsgData.Doc.Transaction.PhaseDate;
		SET xInfo.Amount				= inRoot.Amount;
		SET xInfo.AmtCur				= inRoot.Currency;		
		
		SET xInfo.Status = COALESCE(inRoot.Status,'');				
			
		SET xInfo.Id = COALESCE(inRoot.Id,''); 
		SET xInfo.DocumentType = COALESCE(inRoot.DocumentType,'');
		SET xInfo.CreateMode   = COALESCE(inRoot.CreateMode,'');
		SET xInfo.BriefAnswer  = COALESCE(inRoot.BriefAnswer,'');		
		
		DECLARE amt REFERENCE TO outRoot;
		CREATE LASTCHILD OF xInfo AS amt NAME 'TransAddAmt';
		SET amt.AmtType					= inRoot.MsgData.Doc.Transaction.Extra.Type;
		SET amt.Amount					= inRoot.MsgData.Doc.Transaction.Extra.Amount;
		SET amt.AmtCurr					= inRoot.MsgData.Doc.Transaction.Extra.Currency;
		SET amt.AddInfo					= inRoot.MsgData.Doc.Transaction.Extra.Details;
		
		DECLARE bInfo REFERENCE TO outRoot;
		CREATE LASTCHILD OF xInfo AS bInfo NAME 'BillingInfo';
		SET bInfo.TransDt				= inRoot.MsgData.Doc.Billing.PhaseDate;
		SET bInfo.Amount				= inRoot.MsgData.Doc.Billing.Amount;
		SET bInfo.AmtCurr				= inRoot.MsgData.Doc.Billing.Currency;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSWAY_FillMqRfh2usr
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyWholeMessage(InputRoot, OutputRoot);
		
		-- Определяем идентификатор системы, в который надо отправить запрос
		DECLARE systemId, adapterType CHARACTER;
		
		-- Создаем заголовок и вставляем переменные для маршрутизации
	 	IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
	 	END IF;
	 	-- Маршрутизация через OperationId в ПМИЛ
	 	SET OutputRoot.MQRFH2.usr.OperationId	= FIELDNAME(OutputRoot.XMLNSC.*[<]);
		
		RETURN TRUE;
	END;

END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSWAY_PrepareReplyFinish
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders();
		 
		DECLARE outRef REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		SET OutputRoot.XMLNSC			= InputRoot.ComIbmAggregateReplyBody.REQUEST.XMLNSC;
		
		IF NOT EXISTS(OutputRoot.MQMD[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQMD') NAME 'MQMD';
	 	END IF;
	 				
		IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
		END IF;
		
		-- Восстанавливаем идентификаторы ответного сообщения 
		SET OutputRoot.MQMD.CorrelId	= CAST(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD.MsgId AS BLOB);
		SET OutputRoot.MQMD.MsgType		= MQMT_REPLY;
		
		CALL SetCommonMQReplyHeaders(OutputRoot);
		SET OutputLocalEnvironment = InputLocalEnvironment;	
		--Адресат ответного сообщения
		CALL SetMQReplyDestination(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source, OutputLocalEnvironment);
		
		IF FIELDNAME(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<]) = 'KZWAYAuthFinRqNewDepRq' THEN 
			
			SET OutputRoot.XMLNSC.*[<].Agreemt.Account 		= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<].NewAccount;
			SET OutputRoot.XMLNSC.*[<].Agreemt.SystemId 		= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<].SystemId;
			SET OutputRoot.XMLNSC.*[<].Agreemt.RbBrchId 	= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<].RbBrchId;
			
		END IF;
		
		RETURN TRUE;
	END;
	 
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSWAY_FillMqRfh2usr_NOAGGR
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyWholeMessage(InputRoot, OutputRoot);
		
		-- Определяем идентификатор системы, в который надо отправить запрос
		DECLARE systemId, adapterType CHARACTER;
		
		-- Создаем заголовок и вставляем переменные для маршрутизации
	 	IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
	 	END IF;
	 	-- Маршрутизация через OperationId в ПМИЛ
	 	SET OutputRoot.MQRFH2.usr.OperationId	= FIELDNAME(OutputRoot.XMLNSC.*[<]);
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSWAY_ConvertMDO2UFX_WAYAuthRevRqAccCreditRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders();
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		
		DECLARE outRoot REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZWAYAuthRevRqAccCreditRq';
		
		SET outRoot = inRoot;
		
		RETURN TRUE;
	END;
	 
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSWAY_ConvertUFX2MDO_CreateNewDepQPragma
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC;
		DECLARE outRoot REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZNewDepAddFillRq';
		
		SET outRoot = inRoot;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSWAY_ConvertMDO2UFX_WAYAuthRevRqNewDepRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		
		DECLARE outRoot REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZWAYAuthRevRqNewDepRq';
		
		SET outRoot = inRoot;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
END MODULE;
