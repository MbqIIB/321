BROKER SCHEMA ru.croc.sbkz.adapters.rsrouter.esql

PATH ru.croc.sbrf.bp.common.esql;

CREATE COMPUTE MODULE RequestForRouterRSWAY_DetectOperation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE Operation CHARACTER FIELDNAME(InputRoot.XMLNSC.*[<]);
		DECLARE labelName CHARACTER;		
		
		CASE Operation
		WHEN 'KZWayToQPragmaTDCRq' THEN
			SET labelName = 'KZWAYAuthRqAccCreditRq';			
		WHEN 'KZWayToQPragmaNewDepRq' THEN
			SET labelName = 'KZWAYAuthRqNewDepRq';
		WHEN 'KZQPragmaPrepRq' THEN
			SET labelName = 'KZQPragmaPrepRq';							 			
		ELSE
			-- Неизвестный тип сообщения 	 
			THROW USER EXCEPTION VALUES ('Unknown format XML in RequestForRouterRS(SBOL_RS)', Operation);
		END CASE;
		 
		SET Environment.UserProperties.Source.MQMD 			= InputRoot.MQMD;
		SET Environment.UserProperties.Source.MQRFH2 		= InputRoot.MQRFH2;
		SET Environment.UserProperties.Source.Properties	= InputRoot.Properties;
		SET Environment.UserProperties.Source.Body 			= CAST(ASBITSTREAM(InputRoot.XMLNSC CCSID 1208) AS CHARACTER CCSID 1208);
		
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = labelName;
		
		RETURN TRUE;
	END;
END MODULE;

/*
 * Интерфейс TDC перевод денежных c текущего счета\депозита на свою карту (карт-счет) между счетами одного клиента u06068 20.12.2014
 */
CREATE COMPUTE MODULE RequestForRouterRSWAY_ConvertMDO2UFX_AuthRqAccCreditRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.KZWayToQPragmaTDCRq;
		
		DECLARE outRoot REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZWAYAuthRqAccCreditRq';
		
		SET outRoot = inRoot;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;

/*
 * Маршрутизация
 */
CREATE COMPUTE MODULE RequestForRouterRSWAY_FillMqRfh
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		  
		CALL CopyWholeMessage(InputRoot, OutputRoot);
		
		-- Определяем идентификатор системы, в который надо отправить запрос
		DECLARE systemId, adapterType CHARACTER;
		
		-- Создаем заголовок и вставляем переменные для маршрутизации
	 	IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
	 	END IF;
	 	-- Маршрутизация через OperationId в ПМИЛ
	 	SET OutputRoot.MQRFH2.usr.OperationId	= FIELDNAME(OutputRoot.XMLNSC.*[<]);
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE RequestForRouterRSWAY_ConvertMDO2UFX_AuthRqNewDepRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.KZWayToQPragmaNewDepRq;
		
		DECLARE outRoot REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZWAYAuthRqNewDepRq';
		
		SET outRoot = inRoot;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


/* u06068 22.09.2015 Запрос в QPragma тип Prep по депозитному переводу */
CREATE COMPUTE MODULE RequestForRouterRSWAY_ConvertMDO2MDO_QPragmaPrepRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		  
		CALL CopyMessageHeaders(InputRoot, OutputRoot);
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		DECLARE outRoot REFERENCE TO OutputRoot;
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZPrivateMoneyTransferRq';
		
		--CALL SetCommonMDOElementsFromUFX(inRoot, outRoot);
		
		SET outRoot.RqUID	=	inRoot.RqUID;
		SET outRoot.RqTm	=	inRoot.RqTm;
		SET outRoot.SPName  =   inRoot.SPName;
		
		SET outRoot.(XMLNSC.NamespaceDecl)xmlns:inds = inds;
		SET outRoot.TransactionType = 'SOA_Ufx_AccCredit_AuthReq';--inRoot.MsgData.Doc.TransType.TransCode.MsgCode;
		
		DECLARE attr REFERENCE TO outRoot;
		CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
		SET attr.AttrId 		= 'VERS';
		SET attr.AttrValue 		= '2.0';
		/*CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
		SET attr.AttrId 		= 'TAPP';
		SET attr.AttrValue		= inRoot.Target.(XMLNSC.Attribute)app;
		CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
		SET attr.AttrId 		= 'TROLE';
		SET attr.AttrValue 		= inRoot.Target.(XMLNSC.Attribute)role;*/
		/*FOR parm AS inRoot.MsgData.Doc.DocRefSet.Parm[] DO
			IF parm.ParmCode IN ('RRN', 'SRN', 'STAN', 'CPID') THEN*/
				CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
				SET attr.AttrId			= 'RRN';
				SET attr.AttrValue 		= COALESCE(inRoot.RegNumber,inRoot.OperUID);
				
				CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
				SET attr.AttrId			= 'SRN';
				--SET attr.AttrValue 		= 'SBOLRS_' || inRoot.RegNumber;
				SET attr.AttrValue		= inRoot.OperUID;
				
				/*CREATE LASTCHILD OF outRoot AS attr NAME 'ServiceAttr';
				SET attr.AttrId			= 'STAN';
				SET attr.AttrValue 		= inRoot.AuthCode;*/
				
			/*END IF;
		END FOR;*/
		
		DECLARE xInfo REFERENCE TO outRoot;
		CREATE LASTCHILD OF outRoot AS xInfo NAME 'XferInfo';
		DECLARE acct REFERENCE TO outRoot;
		CREATE LASTCHILD OF xInfo AS acct NAME 'AcctFrom';
		SET acct.AcctId = inRoot.DepAcctIdFrom.AcctId;
		
		DECLARE extId REFERENCE TO outRoot;
		CREATE LASTCHILD OF acct AS extId NAME 'ExtAcctId';
		SET extId.Key 					= 'RBSN';
		SET extId.Value 				= inRoot.MsgData.Doc.Originator.RBSNumber;		
		CREATE LASTCHILD OF acct AS extId NAME 'ExtAcctId';
		SET extId.Key 					= 'MID';
		--SET extId.Value 				= inRoot.MsgData.Doc.Originator.MemberId;		
		SET extId.Value					= 'W4D';	
		
		SET acct.ClientInfo.PersonInfo.inds:PersonName.inds:LastName		= inRoot.MsgData.Doc.Originator.Client.ClientInfo.LastName;
		SET acct.ClientInfo.PersonInfo.PersonIdExt.Key 						= 'TAXID';
		SET acct.ClientInfo.PersonInfo.PersonIdExt.Value 					= inRoot.MsgData.Doc.Originator.Client.ClientInfo.TaxpayerIdentifier;		
		
		CREATE LASTCHILD OF xInfo AS acct NAME 'AcctTo';		
		SET acct.AcctId 													= inRoot.ContractNumber;
		SET acct.ClientInfo.PersonInfo.inds:PersonName.inds:LastName		= inRoot.MsgData.Doc.Destination.Client.ClientInfo.LastName;
		SET acct.ClientInfo.PersonInfo.PersonIdExt.Key 						= 'TAXID';
		SET acct.ClientInfo.PersonInfo.PersonIdExt.Value 					= inRoot.MsgData.Doc.Destination.Client.ClientInfo.TaxpayerIdentifier;		
		CREATE LASTCHILD OF acct AS extId NAME 'ExtAcctId';
		SET extId.Key 					= 'RBSN';
		SET extId.Value 				= inRoot.MsgData.Doc.Destination.RBSNumber;		
		CREATE LASTCHILD OF acct AS extId NAME 'ExtAcctId';
		SET extId.Key 					= 'MID';
		SET extId.Value 				= 'W4C';--inRoot.MsgData.Doc.Destination.MemberId;
		
		SET xInfo.TransPurpose			= inRoot.Purpose;
		SET xInfo.TransDt				= inRoot.MsgData.Doc.Transaction.PhaseDate;
		SET xInfo.Amount				= inRoot.Amount;
		SET xInfo.AmtCur				= inRoot.Currency;
		
		SET xInfo.Status				= inRoot.Status;
		SET xInfo.Id					= inRoot.Id;
		SET xInfo.DocumentType 			= COALESCE(inRoot.DocumentType,'');
		SET xInfo.CreateMode   			= COALESCE(inRoot.CreateMode,'');
		SET xInfo.BriefAnswer  			= COALESCE(inRoot.BriefAnswer,'');		
		
		DECLARE amt REFERENCE TO outRoot;
		CREATE LASTCHILD OF xInfo AS amt NAME 'TransAddAmt';
		SET amt.AmtType					= inRoot.MsgData.Doc.Transaction.Extra.Type;
		SET amt.Amount					= inRoot.MsgData.Doc.Transaction.Extra.Amount;
		SET amt.AmtCurr					= inRoot.MsgData.Doc.Transaction.Extra.Currency;
		SET amt.AddInfo					= inRoot.MsgData.Doc.Transaction.Extra.Details;
		
		DECLARE bInfo REFERENCE TO outRoot;
		CREATE LASTCHILD OF xInfo AS bInfo NAME 'BillingInfo';
		SET bInfo.TransDt				= inRoot.MsgData.Doc.Billing.PhaseDate;
		SET bInfo.Amount				= inRoot.MsgData.Doc.Billing.Amount;
		SET bInfo.AmtCurr				= inRoot.MsgData.Doc.Billing.Currency;
		
		RETURN TRUE;
	END;

END MODULE;
