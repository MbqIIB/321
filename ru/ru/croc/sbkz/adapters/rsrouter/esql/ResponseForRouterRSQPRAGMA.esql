BROKER SCHEMA ru.croc.sbkz.adapters.rsrouter.esql

PATH ru.croc.sbrf.bp.common.esql;

CREATE COMPUTE MODULE ResponseForRouterRSQPRAGMA_PrepareReply
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN	
		
		CALL CopyMessageHeaders();
				 
		IF NOT EXISTS(OutputRoot.MQMD[]) THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN('MQMD') NAME 'MQMD';
		END IF;
		SET OutputRoot.MQMD				= InputRoot.ComIbmAggregateReplyBody.ECHO.MQMD;
		
		IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN('MQRFH2') NAME 'MQRFH2';
		END IF;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
			DECLARE inRef REFERENCE TO InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<];
			DECLARE inRoot REFERENCE TO InputRoot.ComIbmAggregateReplyBody.REQUEST.XMLNSC.*[<];
			DECLARE Operation CHARACTER FIELDNAME(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<]);
			DECLARE qpragmaorig REFERENCE TO InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<];
			
		/*IF EXISTS(InputRoot.ComIbmAggregateReplyBody[]) THEN
			DECLARE inRef REFERENCE TO InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<];
			DECLARE inRoot REFERENCE TO InputRoot.ComIbmAggregateReplyBody.REQUEST.XMLNSC.*[<];
			DECLARE Operation CHARACTER FIELDNAME(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<]);
		ELSE
			DECLARE inRef REFERENCE TO InputLocalEnvironment.OrigMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<];
			DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
			DECLARE Operation CHARACTER FIELDNAME(InputLocalEnvironment.OrigMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<]);
		END IF;	*/	
		
		DECLARE labelName CHARACTER;
						
		/*IF personNum = 1 AND docPriority IS NOT NULL THEN*/
			
		
		IF inRoot.Status.*:StatusCode = '0' THEN
		
			CREATE FIRSTCHILD OF OutputRoot.XMLNSC 
                  PARSE ( 
                        InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Body
                        CCSID 1208
                        OPTIONS FolderBitStream + ValidateNone);
			
			CASE Operation
			WHEN 'KZPrivateMoneyTransferRq' THEN
				SET labelName = 'KZPrivateMoneyTransferRs';
			WHEN 'KZNewDepAddFillRq' THEN
				SET labelName = 'KZNewDepAddFillRs';
				SET OutputRoot.XMLNSC.*[<].NewAccount = inRoot.AgreemtInfo.DepInfo.AcctId;
				SET OutputRoot.XMLNSC.*[<].SystemId   = inRoot.AgreemtInfo.DepInfo.SystemId;
				SET OutputRoot.XMLNSC.*[<].RbBrchId   = inRoot.AgreemtInfo.DepInfo.RbBrchId;  						 			
			ELSE
				-- Неизвестный тип сообщения 	 
				THROW USER EXCEPTION VALUES ('Unknown format XML in RequestForRouterRSQPRAGMA(SBOL_RS)', Operation);
			END CASE;
		
		ELSE
	
					
					DECLARE outRoot REFERENCE TO OutputRoot;
					
					CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'QPragma_Error';
					
					SET outRoot.Status.StatusCode	= inRoot.Status.*:StatusCode;
					SET outRoot.Status.StatusDesc	= inRoot.Status.*:StatusDesc;
					
					DECLARE RRN CHARACTER;					
					SET RRN = THE(SELECT ITEM attr.AttrValue FROM qpragmaorig.ServiceAttr[] AS attr WHERE attr.AttrId = 'RRN');
					
					DECLARE SRN CHARACTER;
					SET SRN = THE(SELECT ITEM attr.AttrValue FROM qpragmaorig.ServiceAttr[] AS attr WHERE attr.AttrId = 'SRN');
					
					DECLARE STAN CHARACTER;
					SET STAN = THE(SELECT ITEM attr.AttrValue FROM qpragmaorig.ServiceAttr[] AS attr WHERE attr.AttrId = 'STAN');
						
					SET outRoot.Status.StatusReference = RRN || ',' || SRN || ',' || STAN;
							
						-- Восстанавливаем идентификаторы ответного сообщения 
					SET OutputRoot.MQMD.CorrelId	= CAST(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD.MsgId AS BLOB);
					SET OutputRoot.MQMD.MsgType		= MQMT_REPLY;
					
					CALL SetCommonMQReplyHeaders(OutputRoot);
					SET OutputLocalEnvironment = InputLocalEnvironment;	
					--Адресат ответного сообщения
					CALL SetMQReplyDestination(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source, OutputLocalEnvironment);
					
					PROPAGATE TO TERMINAL 'out1';
					
					IF NOT EXISTS(OutputRoot.MQMD[]) THEN
						CREATE LASTCHILD OF OutputRoot DOMAIN('MQMD') NAME 'MQMD';
					END IF;
					SET OutputRoot.MQMD				= InputRoot.ComIbmAggregateReplyBody.ECHO.MQMD;
					
					CREATE FIRSTCHILD OF OutputRoot.XMLNSC 
                  		PARSE ( 
                        InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Body
                        CCSID 1208
                        OPTIONS FolderBitStream + ValidateNone);
					
					CASE Operation
						WHEN 'KZPrivateMoneyTransferRq' THEN
							SET labelName = 'KZWAYAuthRevRqAccCreditRq';
						WHEN 'KZNewDepAddFillRq' THEN
							SET labelName = 'KZWAYAuthRevRqNewDepRq';
					ELSE
						-- Неизвестный тип сообщения 	 
						THROW USER EXCEPTION VALUES ('Unknown format XML in RequestForRouterRSQPRAGMA(SBOL_RS)', Operation);
					END CASE;						
			
		END IF;
		 
		SET Environment.UserProperties.Source.MQMD 			= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD;
		SET Environment.UserProperties.Source.MQRFH2 		= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQRFH2;
		SET Environment.UserProperties.Source.Properties	= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Properties;
		SET Environment.UserProperties.Source.Body 			= InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Body;
		 	
	 	SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = labelName;	
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSQPRAGMA_ConvertMDO2UFX_KZPrivateMoneyTransferRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders();
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		
		DECLARE outRoot REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZWAYFinRqAccCreditRq';
		
		SET outRoot = inRoot;
		
		RETURN TRUE;
	END;
	
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSQPRAGMA_FillMqRfh2usr
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyWholeMessage(InputRoot, OutputRoot);
		
		-- Определяем идентификатор системы, в который надо отправить запрос
		DECLARE systemId, adapterType CHARACTER;
		
		-- Создаем заголовок и вставляем переменные для маршрутизации
	 	IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
	 	END IF;
	 	-- Маршрутизация через OperationId в ПМИЛ
	 	SET OutputRoot.MQRFH2.usr.OperationId	= FIELDNAME(OutputRoot.XMLNSC.*[<]);
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSQPRAGMA_ConvertUFX2MDO_WAYFinRqAccCreditRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders();
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		
		DECLARE outRoot REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZWAYAuthRevRqAccCreditRq';
		
		SET outRoot = inRoot;
		
		RETURN TRUE;
	END;
	 
	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;
	
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSQPRAGMA_FillMqRfh2usrNOAGGR
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyWholeMessage(InputRoot, OutputRoot);
		
		-- Определяем идентификатор системы, в который надо отправить запрос
		DECLARE systemId, adapterType CHARACTER;
		
		-- Создаем заголовок и вставляем переменные для маршрутизации
	 	IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
	 	END IF;
	 	-- Маршрутизация через OperationId в ПМИЛ
	 	SET OutputRoot.MQRFH2.usr.OperationId	= FIELDNAME(OutputRoot.XMLNSC.*[<]);
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSQPRAGMA_PrepareReplyTimeoutReverse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		DECLARE inRef REFERENCE TO InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<];
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		DECLARE qpragmaorig REFERENCE TO InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<];
		DECLARE Operation CHARACTER FIELDNAME(InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].Body.*[<]);
		 
		DECLARE labelName CHARACTER;
		
		CASE Operation
			WHEN 'KZPrivateMoneyTransferRq' THEN
				SET labelName = 'KZWAYAuthRevRqAccCreditRq';
				--SET labelName = 'KZWAYFinRqAccCreditRq';
			--WHEN 'KZNewDepAddFillRq' THEN
				--SET labelName = 'KZWAYAuthRevRqNewDepRq';					 			
			ELSE
				-- Неизвестный тип сообщения 	 
				THROW USER EXCEPTION VALUES ('Unknown format XML in RequestForRouterRSQPRAGMA(SBOL_RS)', Operation);
		END CASE;
		
		IF NOT EXISTS(OutputRoot.MQMD[]) THEN
			CREATE LASTCHILD OF OutputRoot DOMAIN('MQMD') NAME 'MQMD';
		END IF;
		SET OutputRoot.MQMD				=  InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.MQMD;
		
		CREATE FIRSTCHILD OF OutputRoot.XMLNSC 
                  		PARSE ( 
                        InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Body
                        CCSID 1208
                        OPTIONS FolderBitStream + ValidateNone);
		 
		SET Environment.UserProperties.Source.MQMD 			= InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD;
		SET Environment.UserProperties.Source.MQRFH2 		= InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQRFH2;
		SET Environment.UserProperties.Source.Properties	= InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Properties;
		SET Environment.UserProperties.Source.Body 			= InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.Body;
		 	
	 	SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = labelName;		
		
		PROPAGATE TO TERMINAL 'out';
		 
			DECLARE outRoot REFERENCE TO OutputRoot;
			
			-- Восстанавливаем идентификаторы ответного сообщения 
			SET OutputRoot.MQMD.CorrelId	= CAST(InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source.MQMD.MsgId AS BLOB);
			SET OutputRoot.MQMD.MsgType		= MQMT_REPLY;
					
			CALL SetCommonMQReplyHeaders(OutputRoot);
			SET OutputLocalEnvironment = InputLocalEnvironment;	
					--Адресат ответного сообщения
			CALL SetMQReplyDestination(InputLocalEnvironment.OrigTimeoutMess.ComIbmAggregateReplyBody.ECHO.XMLNSC.*[<].UserProperties.Source, OutputLocalEnvironment);
					
			CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'QPragma_Error';
					
			SET outRoot.Status.StatusCode	= inRoot.Status.*:StatusCode;
			SET outRoot.Status.StatusDesc	= inRoot.Status.*:StatusDesc;				
			
					DECLARE RRN CHARACTER;					
					SET RRN = THE(SELECT ITEM attr.AttrValue FROM qpragmaorig.ServiceAttr[] AS attr WHERE attr.AttrId = 'RRN');
					
					DECLARE SRN CHARACTER;
					SET SRN = THE(SELECT ITEM attr.AttrValue FROM qpragmaorig.ServiceAttr[] AS attr WHERE attr.AttrId = 'SRN');
					
					DECLARE STAN CHARACTER;
					SET STAN = THE(SELECT ITEM attr.AttrValue FROM qpragmaorig.ServiceAttr[] AS attr WHERE attr.AttrId = 'STAN');
						
					SET outRoot.Status.StatusReference = RRN || ',' || SRN || ',' || STAN;
			
			PROPAGATE TO TERMINAL 'out1';
		
		
		RETURN FALSE;
	END;	
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSQPRAGMA_ConvertMDO2UFX_KZNewDepAddFillRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		
		DECLARE outRoot REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZWAYAuthFinRqNewDepRq';
		
		SET outRoot = inRoot;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE ResponseForRouterRSQPRAGMA_ConvertUFX2MDO_WAYAuthRevRqNewDepRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders();
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		
		DECLARE outRoot REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS outRoot NAME 'KZWAYAuthRevRqNewDepRq';
		
		SET outRoot = inRoot;
		
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

END MODULE;
