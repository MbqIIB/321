BROKER SCHEMA ru.croc.sbkz.adapters.sbolrs.esql

PATH ru.croc.sbrf.bp.common.esql, ru.croc.sbkz.utils;

/**
 * Восстановление служебной информации для ответа
 **/
CREATE COMPUTE MODULE HTTPResponseForSBOL_AddOrigHeader
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		 
		CALL AddOrigHead(InputRoot, OutputRoot);

		DECLARE Operation  CHARACTER FIELDVALUE(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.OrigMess.UserProperties.Operation);
		DECLARE Operation2 CHARACTER FIELDNAME(InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.OrigMess.Body.*[<]);
		
		SET Environment.UserProperties            = InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.OrigMess.UserProperties;
        SET Environment.UserProperties.Operation  =	Operation;
		
		IF Operation2 = 'KZCardChangeAddSMSRq' THEN
			SET Environment.UserProperties.Operation  =	'CardChangeAddSMSRq'; 
		END IF;
		
		IF Operation NOT IN ('CardBlockRq', 'CardUnblockRq') THEN
		    CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC.*:*[<] NAME 'OrigMess';
			SET OutputRoot.XMLNSC.OrigMess = InputRoot.ComIbmAggregateReplyBody.ECHO.XMLNSC.OrigMess.Body;
		END IF;

		IF Operation IN ('BankAcctInqRq') THEN
			SET Environment.UserProperties.Pragmanew       = InputRoot.ComIbmAggregateReplyBody.REQUEST_PRAGMANEW_SBOL;
			SET Environment.UserProperties.Way		       = InputRoot.ComIbmAggregateReplyBody.REQUEST_WAY4_SBOL;
			SET Environment.UserProperties.PersonGetClient = InputRoot.ComIbmAggregateReplyBody.REQUEST_PRAGMANEW_PERSON_SBOL;			
		END IF;

		IF Operation IN ('LoanInfoRq') THEN
			SET Environment.UserProperties.LoanAcctGetList	= InputRoot.ComIbmAggregateReplyBody.REQUEST_PRAGMANEW_LOANACC;
			SET Environment.UserProperties.PersonGetClient  = InputRoot.ComIbmAggregateReplyBody.REQUEST_PRAGMANEW_PERSON;			
		END IF;

		IF Operation IN ('LoanPaymentRq') THEN
			SET Environment.UserProperties.CreditGetPayment	   = InputRoot.ComIbmAggregateReplyBody.REQUEST_PRAGMANEW_PAYMENT;
			SET Environment.UserProperties.LoanCalcDebtRequest = InputRoot.ComIbmAggregateReplyBody.REQUEST_PRAGMANEW_LOANCALC;			
		END IF;

		IF Operation IN ('AcctInfoRq') THEN
			SET Environment.UserProperties.DepositeAcctGetList	= InputRoot.ComIbmAggregateReplyBody.REQUEST_PRAGMANEW_DEPOSIT;
			SET Environment.UserProperties.PersonGetClient  	= InputRoot.ComIbmAggregateReplyBody.REQUEST_PRAGMANEW_PERSON;		
		END IF;
		
		IF Operation IN ('CardEnrollmentRq') THEN
			SET Environment.UserProperties.WayClientInq		= InputRoot.ComIbmAggregateReplyBody.WAY_CLIENTINQ;
			SET Environment.UserProperties.WayGetPhone  	= InputRoot.ComIbmAggregateReplyBody.WAY_GETPHONE;
			SET Environment.UserProperties.WayUpdateClient  = InputRoot.ComIbmAggregateReplyBody.WAY_UPDATECLIENT;
		END IF;	
		
		SET OutputLocalEnvironment = InputLocalEnvironment;
		--SET OutputLocalEnvironment.Destination.HTTP.RequestIdentifier = CAST(Environment.UserProperties.HTTPRequestIdentifier AS BLOB);
		
		RETURN TRUE;
	END;
END MODULE;


/**
 * Маршрутизирует поток в соответствие с
 * обрабатываемой операцией.
 **/
CREATE COMPUTE MODULE HTTPResponseForSBOL_DetectOperation
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE Operation CHARACTER FIELDVALUE(Environment.UserProperties.Operation);
	    DECLARE OperName CHARACTER FIELDVALUE(InputRoot.XMLNSC.OrigMess.*[<].OperName);
	    --DECLARE Operation CHARACTER FIELDNAME(InputRoot.XMLNSC.OrigMess.*[<]);
		DECLARE Operation2 CHARACTER FIELDNAME(InputRoot.XMLNSC.*[<]);
		DECLARE labelName CHARACTER;
			
		IF Operation = 'DoIFXRs' and Operation2 = 'KZGetPrivateClientAccountListRs' THEN  
		   SET Operation = 'XferAddRs_QP';
		END IF;

		IF Operation = 'DoIFXRs' and Operation2 = 'KZPrivateMoneyTransferRs' THEN  
		   SET Operation = 'XferAddRs_QP';
		END IF;
				
		IF Operation = 'DoIFXRs' and Operation2 = 'UFXMsg' THEN  
		   SET Operation = 'XferAddRs_WAY_SBOL';
		END IF;
		
				
			CASE Operation
			WHEN 'BankAcctInqRq' THEN
				SET labelName = 'BankAcctInqRs';
			WHEN 'DepAcctStmtInqRq' THEN
				SET labelName = 'DepAcctStmtInqRs';

			WHEN 'XferAddRs_QP' THEN
				SET labelName = 'XferAddRs_QP';
			WHEN 'XferAddRs_WAY_SBOL' THEN
				SET labelName = 'XferAddRs_WAY_SBOL';

			WHEN 'XferAddRq' THEN
				
				CASE OperName
				WHEN 'TCC' THEN
					SET labelName = 'XferAddRs_TCC';
				WHEN 'TCD' THEN
					SET labelName = 'XferAddRs_TCD';
				WHEN 'TDC' THEN
					SET labelName = 'XferAddRs_TDC';
				ELSE
					SET labelName = 'XferAddRs';
				END CASE;

			WHEN 'LoanInqRq' THEN
				SET labelName = 'LoanInqRs';
			WHEN 'LoanInfoRq' THEN
				SET labelName = 'LoanInfoRs';
			WHEN 'LoanPaymentRq' THEN
				IF NOT EXISTS(InputRoot.ComIbmAggregateReplyBody.REQUEST[]) THEN
				   SET labelName = 'LoanPaymentRs_TIMEOUT';		
				ELSE
				   SET labelName = 'LoanPaymentRs';				
				END IF;
			WHEN 'CCAcctFullStmtInqRq' THEN				
				SET labelName = 'CCAcctFullStmtInqRs';		
			WHEN 'CardBlockRq' THEN
				SET labelName = 'CardBlockRq';	
			WHEN 'CardUnblockRq' THEN
				SET labelName = 'CardUnblockRq';	
			WHEN 'CardAcctDInqRq' THEN
				SET labelName = 'CardAcctDInqRs';
			WHEN 'CCAcctExtStmtInqRq' THEN
				SET labelName = 'CCAcctExtStmtInqRs';
			WHEN 'AcctInfoRq' THEN
				SET labelName = 'AcctInfoRs';
			WHEN 'BillingPayPrepRq' THEN
				SET labelName = 'BillingPayPrepRs';
			WHEN 'BillingPayExecRq' THEN
				SET labelName = 'BillingPayExecRs';		
			WHEN 'GetPhoneCardsFromWay4Rq' THEN 
				SET labelName = 'GetPhoneCardsFromWay4Rq';	
			WHEN 'CardAddSMSRq'	THEN
				SET labelName = 'CardAddSMSRq';				
			WHEN 'CardChangeSMSRq' THEN
				SET labelName = 'CardChangeSMSRq';
			WHEN 'CardLimListRq' THEN
				SET labelName = 'CardLimListRs';
			WHEN 'CardLimEnableRq' THEN
				SET labelName = 'CardLimEnableRs';
			WHEN 'CardLimDisableRq' THEN
				SET labelName = 'CardLimDisableRs';
			WHEN 'CreditGraphRq' THEN
				SET labelName = 'CreditGraphRs';				
			WHEN 'CardLimEditRq' THEN
				SET labelName = 'CardLimEditRs';	
			WHEN 'CardOffSMSRq' THEN
				SET labelName = 'CardOffSMSRq';	
			WHEN 'CardChangeAddSMSRq' THEN 
				SET labelName = 'CardChangeAddSMSRq';
			WHEN 'GetAutoSubscriptionListRq' THEN
				SET labelName = 'GetAutoSubscriptionListRs';
			WHEN 'GetAutoPaymentListRq' THEN
				SET labelName = 'GetAutoPaymentListRs';	 
			WHEN 'AutoSubscriptionModRq' THEN
				SET labelName = 'AutoSubscriptionModRs';	
			WHEN 'AutoSubscriptionStatusModRq' THEN
				SET labelName = 'AutoSubscriptionStatusModRs';
			WHEN 'GetAutoSubscriptionDetailInfoRq' THEN
				SET labelName = 'GetAutoSubscriptionDetailInfoRs';
			WHEN 'GetAutoPaymentDetailInfoRq' THEN
				SET labelName = 'GetAutoPaymentDetailInfoRs';
			WHEN 'CardEnrollmentRq' THEN
				SET labelName = 'CardEnrollmentRs';
			WHEN 'DepChkAddRq' THEN
				SET labelName = 'DepChkAddRs';
			WHEN 'NewDepAddFillRq' THEN
				SET labelName = 'NewDepAddFillRs';
			WHEN 'CardListPhoneRq' THEN
				SET labelName = 'CardListPhoneRs';							
			ELSE
				-- Неизвестный тип сообщения
				THROW USER EXCEPTION VALUES ('Unknown format XML in HTTPResponseForSBOLRS', Operation);
			END CASE;
		
		SET OutputLocalEnvironment = InputLocalEnvironment;
		SET OutputLocalEnvironment.Destination.RouterList.DestinationData[1].labelName = labelName;
		
		RETURN TRUE;
	END;
END MODULE;

/*
 * Формирования сообщения из QPragma Получение информации по продуктам KZGetPrivateClientAccountListRs -> BankAcctInqRs 
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_BankAcctRS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*:DoIFXRq.*:BankAcctInqRq;
		DECLARE inRoot   REFERENCE TO InputRoot.XMLNSC.*[<];		
		
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef REFERENCE TO OutputRoot;
						
		DECLARE pragmanew_response  REFERENCE TO Environment.UserProperties.Pragmanew;
		DECLARE way_response	    REFERENCE TO Environment.UserProperties.Way;
		DECLARE pragmanew_personget REFERENCE TO Environment.UserProperties.PersonGetClient;
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS outRoot NAMESPACE erib NAME 'BankAcctInqRs';
		
		SET outRoot.erib:RqUID	=	COALESCE(origMess.*:RqUID,Environment.UserProperties.RqUID);
		SET outRoot.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET outRoot.erib:OperUID =	COALESCE(origMess.*:OperUID,InputLocalEnvironment.OrigTimeoutMess.*[<].ECHO.*[<].*[<].*[<].*:DoIFXRq.*:BankAcctInqRq.*:OperUID);
		
		DECLARE getClient REFERENCE TO pragmanew_personget.XMLNSC.*[<].PersonInfo;		
		 
		/*IF NOT EXISTS(Environment.UserProperties.Pragmanew[]) THEN
			/*SET outRoot.erib:Status.erib:StatusCode	= '-105';
			SET outRoot.erib:Status.erib:StatusDesc	= 'Не удалось получить ответ от МАБПК в течение установленного временного интервала.';*/
		END IF;*/
			
		/*IF NOT EXISTS(Environment.UserProperties.PersonGetClient[]) THEN
			/*SET outRoot.erib:Status.erib:StatusCode	= '-105';
			SET outRoot.erib:Status.erib:StatusDesc	= 'Не удалось получить ответ от МАБПК в течение установленного временного интервала.';*/	
		END IF;*/
			
		/*IF NOT EXISTS(Environment.UserProperties.Way[]) THEN
			/*IF Environment.UserProperties.Way.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code" = '-400' THEN
				SET outRoot.erib:Status.erib:StatusCode	= '-400';
				SET outRoot.erib:Status.erib:StatusDesc	= 'WAY4 не доступна';*/		
		END IF;	*/			
		--ELSE
			DECLARE pragmaNewRespValid BOOLEAN FALSE;
			DECLARE wayRespValid BOOLEAN FALSE;
			
			/*IF COALESCE(Environment.UserProperties.Pragmanew.XMLNSC.*[<].Status.*:StatusCode, '') IN ('', '0') THEN
				SET pragmaNewRespValid = TRUE;
			END IF;
			IF COALESCE(Environment.UserProperties.Way.XMLNSC.*[<].resp_code, '') IN ('', '0') THEN
				SET wayRespValid = TRUE;
			END IF;*/

		    /*DECLARE pragmanewStatus REFERENCE TO pragmanew_response.XMLNSC.*[<].Status;
			IF pragmanewStatus.*:StatusCode <> '0' THEN
			   SET varStatusCode1	= pragmanewStatus.*:StatusCode;
			   SET varStatusDesc1	= pragmanewStatus.*:StatusDesc;
			END IF;

		    DECLARE wayStatus  REFERENCE TO way_response.XMLNSC.*[<].*[<].*[<].*[<];
			IF wayStatus.RespCode <> '0' THEN
			   SET varStatusCode2	= wayStatus.RespCode;
			   IF varStatusDesc1 <> '' THEN
			      SET varStatusDesc2	= varStatusDesc1 || ' | ' || wayStatus.RespText;
			   END IF;
			ELSE
			   SET varStatusDesc2	= varStatusDesc1;
			END IF;

		    DECLARE persongetStatus  REFERENCE TO pragmanew_personget.XMLNSC.*[<].Status;
			IF persongetStatus.*:StatusCode <> '0' THEN
			   SET varStatusCode3	= persongetStatus.*:StatusCode;
			   IF varStatusDesc2 <> '' THEN
			      SET varStatusCode3	= '333';
			      SET varStatusDesc3	= varStatusDesc2 || ' | ' || persongetStatus.*:StatusDesc;
			   END IF;
			END IF;*/

			-- u06068 24/07/2014 - В случае ошибки от QPragma нужно по приоритету поставить ее первой и выдать ошибку транзакту без ответа от старой Прагмы
			--IF pragmaRespValid=FALSE AND pragmaNewRespValid=FALSE THEN
			/*IF pragmaNewRespValid=FALSE THEN

				SET outRoot.erib:Status.erib:StatusCode	= DefineStatusCodeGFL(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
				SET outRoot.erib:Status.erib:StatusDesc	= DefineStatus(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);--COALESCE(pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc, '');

				--SET outRoot.erib:Status.erib:StatusCode	= pragmanew_response.XMLNSC.*[<].Status.*:StatusCode;
				--SET outRoot.erib:Status.erib:StatusDesc	= DefineStatus(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);--COALESCE(pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc, '');
				--SET outRoot.erib:Status.erib:StatusCode	= varStatusCode3; 
				--SET outRoot.erib:Status.erib:StatusDesc	= varStatusDesc3; -- Зарубин хочет видеть в SBOL-e все три ошибки

				SET outRoot.erib:Status.erib:ServerStatusDesc = 'Pragma_NEW_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusCode||'_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc;
			ELSEIF wayRespValid=FALSE THEN 
				SET outRoot.erib:Status.erib:StatusCode	= DefineStatusCodeGFL(way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
				SET outRoot.erib:Status.erib:StatusDesc	= DefineStatus(way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
				SET outRoot.erib:Status.erib:ServerStatusDesc = 'WAY_'||way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code"||'_'||way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text";
			ELSE*/
			
			IF EXISTS(inRoot.Status[]) THEN
				
				IF inRoot.Status.*:StatusCode = '-105' THEN
					SET outRoot.erib:Status.erib:StatusCode	= '-105';
					SET outRoot.erib:Status.erib:StatusDesc	= 'Не удалось получить ответ от МАБПК в течение установленного временного интервала.';
					
					RETURN TRUE;					
				END IF;	
				
			END IF;	
			
			IF EXISTS(Environment.UserProperties.Pragmanew[]) THEN
				IF Environment.UserProperties.Pragmanew.XMLNSC.*[<].Status.*:StatusCode NOT IN ('0','') THEN
					SET outRoot.erib:Status.erib:StatusCode	= DefineStatusCodeGFL(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
					SET outRoot.erib:Status.erib:StatusDesc	= DefineStatus(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
					SET outRoot.erib:Status.erib:ServerStatusDesc = 'PRAGMANEW_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusCode||'_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc;										
				END IF;
			END IF;				
			IF EXISTS(Environment.UserProperties.PersonGetClient[]) THEN
				IF Environment.UserProperties.PersonGetClient.XMLNSC.*[<].Status.*:StatusCode NOT IN ('0','') THEN
					SET outRoot.erib:Status.erib:StatusCode	= DefineStatusCodeGFL(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
					SET outRoot.erib:Status.erib:StatusDesc	= DefineStatus(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
					IF EXISTS(Environment.UserProperties.Pragmanew[]) AND Environment.UserProperties.Pragmanew.XMLNSC.*[<].Status.*:StatusCode NOT IN ('0','') THEN
						SET outRoot.erib:Status.erib:ServerStatusDesc = outRoot.erib:Status.erib:ServerStatusDesc || 'PRAGMANEW_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusCode||'_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc;	 										
					ELSE
						SET outRoot.erib:Status.erib:ServerStatusDesc = 'PRAGMANEW_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusCode||'_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc;	
					END IF;	
				END IF;
			END IF;				
			IF EXISTS(Environment.UserProperties.Way[]) THEN
				IF COALESCE(Environment.UserProperties.Way.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",Environment.UserProperties.Way.XMLNSC.*[<].MsgData.*[<].Status.RespCode) NOT IN ('0','') THEN
					SET outRoot.erib:Status.erib:StatusCode	= DefineStatusCodeGFL(COALESCE(way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",way_response.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
					SET outRoot.erib:Status.erib:StatusDesc	= DefineStatus(COALESCE(way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",way_response.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
					IF EXISTS(Environment.UserProperties.Pragmanew[]) AND Environment.UserProperties.Pragmanew.XMLNSC.*[<].Status.*:StatusCode NOT IN ('0','') OR EXISTS(Environment.UserProperties.PersonGetClient[]) AND Environment.UserProperties.Pragmanew.XMLNSC.*[<].Status.*:StatusCode NOT IN ('0','') THEN
						SET outRoot.erib:Status.erib:ServerStatusDesc = outRoot.erib:Status.erib:ServerStatusDesc||'WAY_'||way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code"||'_'||way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text";						 			
					ELSE
						SET outRoot.erib:Status.erib:ServerStatusDesc = 'WAY_'||COALESCE(way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",way_response.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(way_response.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",way_response.XMLNSC.*[<].MsgData.*[<].Status.RespText);	
					END IF;	
				END IF;
			
			END IF;
			
			IF NOT EXISTS(outRoot.erib:Status.erib:StatusCode[]) THEN 
				SET outRoot.erib:Status.erib:StatusCode	= '0';
				SET outRoot.erib:Status.erib:StatusDesc	= '';
				SET outRoot.erib:Status.erib:ServerStatusDesc = '';	
			END IF;	
			
				
				
				FOR acctType AS origMess.*:AcctType[] DO
					
					CASE FIELDVALUE(acctType) 
						WHEN 'Deposit' THEN
							-- <DepAcctRec> --
							DECLARE depositAcct REFERENCE TO outRoot;
							FOR acctList AS pragmanew_response.XMLNSC.*[<].AcctList.AcctInfo[] DO 
								
								IF acctList.AcctType = 'ABS_DEPOSIT' THEN									
																			
										CREATE LASTCHILD OF outRoot AS depositAcct NAMESPACE erib NAME 'DepAcctRec';
										
										SET depositAcct.erib:BankInfo.erib:BranchId	=	'9999';
										SET depositAcct.erib:BankInfo.erib:AgencyId	=	'9999';
										SET depositAcct.erib:BankInfo.erib:RegionId	=	'038';
										SET depositAcct.erib:BankInfo.erib:RbBrchId	=	'009999';
										SET depositAcct.erib:DepAcctId.erib:SystemId	=	'Qpragma';	
										
										SET depositAcct.erib:DepAcctId.erib:AcctId	=	acctList.AcctId;
										SET depositAcct.erib:DepAcctId.erib:AcctCur	=	acctList.AcctCur;
										SET depositAcct.erib:DepAcctId.erib:AcctName	=	acctList.AcctExtAttr.DepAttr.DepType;
																
										IF acctList.AcctType = 'ABS_DEPOSIT' THEN						
											SET depositAcct.erib:DepAcctId.erib:AcctCode = 'Deposit';						
										ELSE
											SET depositAcct.erib:DepAcctId.erib:AcctCode = acctList.AcctExtAttr.CurrAttr.Contract;						
										END IF;
										
										SET depositAcct.erib:DepAcctId.erib:OpenDate	=	acctList.StartDate;
										
										IF acctList.AcctType = 'ABS_DEPOSIT' THEN	 
											SET depositAcct.erib:DepAcctId.erib:Status	=	ChangeStatus(acctList.AcctStatus.StatusCode);--GetStatusOfCurrency(acctList.AcctStatus.StatusCode, acctList.AcctExtAttr.CurAttr.Blocked);	
										END IF;
										--SET depositAcct.erib:DepAccInfo.erib:InterestOnDeposit.erib:AcctId = acctList.AcctId;
										--SET depositAcct.erib:DepAccInfo.erib:InterestOnDeposit.erib:CardNum = '';						
										
										IF acctList.AcctType = 'ABS_DEPOSIT' THEN
											SET depositAcct.erib:DepAccInfo.erib:Rate	=	acctList.AcctExtAttr.DepAttr.DepRate;	
										ELSE
											SET depositAcct.erib:DepAccInfo.erib:Rate    =	'0';
										END IF;							 
										IF acctList.AcctType = 'ABS_DEPOSIT' THEN
											SET depositAcct.erib:DepAccInfo.erib:EffRate	=	acctList.AcctExtAttr.DepAttr.EffRate;	
										ELSE
											SET depositAcct.erib:DepAccInfo.erib:EffRate    =	'0';
										END IF;						
										SET depositAcct.erib:DepAccInfo.erib:EndDate			=	acctList.EndDate;						
										IF acctList.AcctType = 'ABS_DEPOSIT' THEN
											--SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed		=	'false';
											IF acctList.AcctStatus.CanWithdrawal = 'YES' THEN							
												CASE acctList.AcctStatus.StatusCode
												WHEN 'OPEN' THEN
													SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed	=	'true';	
												WHEN 'CLOSE' THEN
													SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';
												WHEN 'BLOCKED' THEN
													SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';										
												ELSE
													-- Неизвестный тип сообщения
													SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';
												END CASE;											
											ELSE												
												CASE acctList.AcctStatus.StatusCode
												WHEN 'OPEN' THEN
													SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';	
												WHEN 'CLOSE' THEN
													SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';
												WHEN 'BLOCKED' THEN
													SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';										
												ELSE
													-- Неизвестный тип сообщения
													SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';
												END CASE;												
											END IF;												
										ELSE
											SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed    =	'true';
										END IF;  	 
										IF acctList.AcctType = 'ABS_ACCOUNT' THEN
											SET depositAcct.erib:DepAccInfo.erib:IsDebitAllowed		=	'true';	
										ELSE
											SET depositAcct.erib:DepAccInfo.erib:IsDebitAllowed	    =	changeValue(acctList.AcctExtAttr.DepAttr.CanAdd);--CASE acctList.AcctExtAttr.DepAttr.CanAdd WHEN 'YES' THEN 'true'; WHEN 'NO' THEN 'false'; END CASE;
										END IF; 
										IF acctList.AcctType = 'ABS_DEPOSIT' THEN
											SET depositAcct.erib:DepAccInfo.erib:IsCreditCrossAgencyAllowed		=	'true';
										END IF; 
										IF acctList.AcctType = 'ABS_DEPOSIT' THEN
											SET depositAcct.erib:DepAccInfo.erib:IsDebitCrossAgencyAllowed		=	'true';
										END IF;
										
										DECLARE custRec REFERENCE TO depositAcct;
										
										CREATE LASTCHILD OF depositAcct.erib:DepAccInfo AS custRec NAMESPACE erib NAME 'CustRec';
										
										FOR personId AS getClient.PersonIdExt[] DO
											
											IF personId.Key = 'WAY' THEN
												SET custRec.erib:CustId			=	personId.Value;
											END IF;
											
										END FOR;
										
										IF FIELDVALUE(getClient.*:BirthDt) <> '' THEN
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:Birthday		= getClient.*:BirthDt;
										ELSE 
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:Birthday		= '01.01.1900';			
										END IF;
										
										IF FIELDVALUE(getClient.*:BirthPlace) <> '' THEN
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace		= getClient.*:BirthPlace;
										ELSE 
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace		= 'Нет данных';			
										END IF;
										
										IF origMess.CustInfo.PersonInfo.IdentityCard.IdType = '400' THEN
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:TaxId = origMess.CustInfo.PersonInfo.IdentityCard.IdNum;
										END IF;
										
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:TaxId = FIELDVALUE(origMess.*:CustInfo.*:PersonInfo.*:IdentityCard.*:IdNum);
										
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:Citizenship						= getClient.*:Citizenship;
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName			= getClient.*:PersonName.*:LastName;
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName		= getClient.*:PersonName.*:FirstName;
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName		= getClient.*:PersonName.*:MiddleName;
										
										IF FIELDVALUE(getClient.*:IdentityCards.*:IdentityCard.*:IdType) <> '' THEN
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdType		= getClient.*:IdentityCards.*:IdentityCard.*:IdType;
										ELSE 
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdType		= 'Нет данных';
										END IF;
				
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdNum			= getClient.*:IdentityCards.*:IdentityCard.*:IdNum;
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedBy		= getClient.*:IdentityCards.*:IdentityCard.*:IssuedBy;
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedCode		= getClient.*:IdentityCards.*:IdentityCard.*:IssuedCode;
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssueDt		= getClient.*:IdentityCards.*:IdentityCard.*:IssueDt;
										SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:ExpDt			= COALESCE(getClient.*:IdentityCards.*:IdentityCard.*:ValidTo,null);		
										
										DECLARE acctBal REFERENCE TO depositAcct;							
										
										DECLARE initamt DECIMAL 0.0;
										DECLARE totint DECIMAL 0.0;
										DECLARE vavail DECIMAL 0.0;
																--Deposit
												CREATE LASTCHILD OF depositAcct AS acctBal NAMESPACE erib NAME 'AcctBal';
									
												SET acctBal.erib:BalType		=	'Avail';
											
												IF acctList.AcctType = 'ABS_DEPOSIT' THEN
													--SET acctBal.erib:CurAmt		=	acctList.AcctBalInfo.BalanceRec.Amount;
												--ELSE
													SET initamt = initamt + CAST(THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='INITAMT') as DECIMAL);
													SET totint = totint + CAST(THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='TOTINT') as DECIMAL);
													SET vavail = initamt + totint;
													SET acctBal.erib:CurAmt		=	vavail;
												--	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='INITAMT');
												--	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='TOTINT');
												END IF;
												
												-----------------
												
												CREATE LASTCHILD OF depositAcct AS acctBal NAMESPACE erib NAME 'AcctBal';
											
												SET acctBal.erib:BalType		=	'AvailCash';
												
												IF acctList.AcctType = 'ABS_DEPOSIT' THEN
													SET initamt = 0.0;
													SET totint = 0.0;
													SET vavail = 0.0;
													SET initamt = initamt + CAST(THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='INITAMT') as DECIMAL);
													SET totint = totint + CAST(THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='TOTINT') as DECIMAL);
													SET vavail = initamt + totint;
													SET acctBal.erib:CurAmt		=	vavail;
													--SET acctBal.erib:CurAmt		=	'0';	
												END IF;					
				
												
											
												CREATE LASTCHILD OF depositAcct AS acctBal NAMESPACE erib NAME 'AcctBal';
												
												SET acctBal.erib:BalType 	= 	'MinAvail';	
												
												IF acctList.AcctType = 'ABS_DEPOSIT' THEN
													SET acctBal.erib:CurAmt		=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='INITAMT');
												END IF;				
												
												-------
												
												CREATE LASTCHILD OF depositAcct AS acctBal NAMESPACE erib NAME 'AcctBal';
												
												SET acctBal.erib:BalType		=	'ClearBalance';
												
												IF acctList.AcctType = 'ABS_DEPOSIT' THEN
													SET acctBal.erib:CurAmt		=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='INITAMT');
												END IF;				
										
										-- </DepAcctRec> --
										
									ELSEIF acctList.AcctType = 'ABS_ACCOUNT' THEN
										
										IF acctList.AcctExtAttr.CurrAttr.Contract <> 'ОМС' THEN
										
											CREATE LASTCHILD OF outRoot AS depositAcct NAMESPACE erib NAME 'DepAcctRec';
											
											SET depositAcct.erib:BankInfo.erib:BranchId	=	'9999';
											SET depositAcct.erib:BankInfo.erib:AgencyId	=	'9999';
											SET depositAcct.erib:BankInfo.erib:RegionId	=	'038';
											SET depositAcct.erib:BankInfo.erib:RbBrchId	=	'009999';
											SET depositAcct.erib:DepAcctId.erib:SystemId	=	'Qpragma';
											
											SET depositAcct.erib:DepAcctId.erib:AcctId	=	acctList.AcctId;
											SET depositAcct.erib:DepAcctId.erib:AcctCur	=	acctList.AcctCur;
											SET depositAcct.erib:DepAcctId.erib:AcctName	=	acctList.AcctName;
																	
											IF acctList.AcctType = 'ABS_DEPOSIT' THEN						
												SET depositAcct.erib:DepAcctId.erib:AcctCode = 'Deposit';						
											ELSE
												SET depositAcct.erib:DepAcctId.erib:AcctCode = acctList.AcctExtAttr.CurrAttr.Contract;						
											END IF;
											
											SET depositAcct.erib:DepAcctId.erib:OpenDate	=	acctList.StartDate;
											
											IF acctList.AcctType = 'ABS_DEPOSIT' THEN	 
												SET depositAcct.erib:DepAcctId.erib:Status	=	ChangeStatus(acctList.AcctStatus.StatusCode);--GetStatusOfCurrency(acctList.AcctStatus.StatusCode, acctList.AcctExtAttr.CurAttr.Blocked);	
											ELSE
												SET depositAcct.erib:DepAcctId.erib:Status	=	GetStatusOfCurrency(acctList.AcctStatus.StatusCode, acctList.AcctExtAttr.CurrAttr.Blocked);	
											END IF;
											--SET depositAcct.erib:DepAccInfo.erib:InterestOnDeposit.erib:AcctId = acctList.AcctId;
											--SET depositAcct.erib:DepAccInfo.erib:InterestOnDeposit.erib:CardNum = '';						
											
											IF acctList.AcctType = 'ABS_DEPOSIT' THEN
												SET depositAcct.erib:DepAccInfo.erib:Rate	=	acctList.AcctExtAttr.DepAttr.DepRate;	
											ELSE
												SET depositAcct.erib:DepAccInfo.erib:Rate    =	'0';
											END IF;							 
											IF acctList.AcctType = 'ABS_DEPOSIT' THEN
												SET depositAcct.erib:DepAccInfo.erib:EffRate	=	acctList.AcctExtAttr.DepAttr.EffRate;	
											ELSE
												SET depositAcct.erib:DepAccInfo.erib:EffRate    =	'0';
											END IF;						
											SET depositAcct.erib:DepAccInfo.erib:EndDate			=	acctList.EndDate;						
											IF acctList.AcctType = 'ABS_DEPOSIT' THEN
												SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed		=	'false';	
											ELSE
												SET depositAcct.erib:DepAccInfo.erib:IsCreditAllowed    =	'true';
											END IF;  	 
											IF acctList.AcctType = 'ABS_ACCOUNT' THEN
												SET depositAcct.erib:DepAccInfo.erib:IsDebitAllowed		=	'true';	
											ELSE
												SET depositAcct.erib:DepAccInfo.erib:IsDebitAllowed	    =	changeValue(acctList.AcctExtAttr.DepAttr.CanAdd);--CASE acctList.AcctExtAttr.DepAttr.CanAdd WHEN 'YES' THEN 'true'; WHEN 'NO' THEN 'false'; END CASE;
											END IF; 
											IF acctList.AcctType = 'ABS_DEPOSIT' THEN
												SET depositAcct.erib:DepAccInfo.erib:IsCreditCrossAgencyAllowed		=	'true';
											END IF; 
											IF acctList.AcctType = 'ABS_DEPOSIT' THEN
												SET depositAcct.erib:DepAccInfo.erib:IsDebitCrossAgencyAllowed		=	'true';
											END IF;
											
											DECLARE custRec REFERENCE TO depositAcct;
											
											CREATE LASTCHILD OF depositAcct.erib:DepAccInfo AS custRec NAMESPACE erib NAME 'CustRec';
											
											FOR personId AS getClient.PersonIdExt[] DO
												
												IF personId.Key = 'WAY' THEN
													SET custRec.erib:CustId			=	personId.Value;
												END IF;
												
											END FOR;
											
											IF FIELDVALUE(getClient.*:BirthDt) <> '' THEN
												SET custRec.erib:CustInfo.erib:PersonInfo.erib:Birthday		= getClient.*:BirthDt;
											ELSE 
												SET custRec.erib:CustInfo.erib:PersonInfo.erib:Birthday		= '01.01.1900';			
											END IF;
											
											IF FIELDVALUE(getClient.*:BirthPlace) <> '' THEN
												SET custRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace		= getClient.*:BirthPlace;
											ELSE 
												SET custRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace		= 'Нет данных';			
											END IF;
											
											IF origMess.CustInfo.PersonInfo.IdentityCard.IdType = '400' THEN
												SET custRec.erib:CustInfo.erib:PersonInfo.erib:TaxId = origMess.CustInfo.PersonInfo.IdentityCard.IdNum;
											END IF;
											
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:TaxId = FIELDVALUE(origMess.*:CustInfo.*:PersonInfo.*:IdentityCard.*:IdNum);
											
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:Citizenship				= getClient.*:Citizenship;
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName		= getClient.*:PersonName.*:LastName;
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName	= getClient.*:PersonName.*:FirstName;
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName	= getClient.*:PersonName.*:MiddleName;
											
											IF FIELDVALUE(getClient.*:IdentityCards.*:IdentityCard.*:IdType) <> '' THEN
												SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdType		= getClient.*:IdentityCards.*:IdentityCard.*:IdType;
											ELSE 
												SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdType		= 'Нет данных';
											END IF;
					
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdNum			= getClient.*:IdentityCards.*:IdentityCard.*:IdNum;
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedBy		= getClient.*:IdentityCards.*:IdentityCard.*:IssuedBy;
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedCode		= getClient.*:IdentityCards.*:IdentityCard.*:IssuedCode;
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssueDt		= getClient.*:IdentityCards.*:IdentityCard.*:IssueDt;
											SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:ExpDt			= COALESCE(getClient.*:IdentityCards.*:IdentityCard.*:ValidTo,null);		
											
											DECLARE acctBal REFERENCE TO depositAcct;							
												
																	
													CREATE LASTCHILD OF depositAcct AS acctBal NAMESPACE erib NAME 'AcctBal';
										
													SET acctBal.erib:BalType		=	'Avail';
												
													IF acctList.AcctType = 'ABS_ACCOUNT' THEN
														SET acctBal.erib:CurAmt		=	acctList.AcctBalInfo.BalanceRec.Amount;
													ELSE
														SET acctBal.erib:CurAmt		=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='AVAILINT');
													END IF;
													
													-----------------
													
													CREATE LASTCHILD OF depositAcct AS acctBal NAMESPACE erib NAME 'AcctBal';
												
													SET acctBal.erib:BalType		=	'AvailCash';
													
													IF acctList.AcctType = 'ABS_ACCOUNT' THEN
														SET acctBal.erib:CurAmt		=	acctList.AcctBalInfo.BalanceRec.Amount;
													ELSE 	
														SET acctBal.erib:CurAmt		=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='AVAILINT');
													END IF;					
					
													
												
													CREATE LASTCHILD OF depositAcct AS acctBal NAMESPACE erib NAME 'AcctBal';
													
													SET acctBal.erib:BalType 	= 	'MinAvail';	
													
													IF acctList.AcctType = 'ABS_ACCOUNT' THEN
														SET acctBal.erib:CurAmt		=	'0';
													ELSE 
														SET acctBal.erib:CurAmt		=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='INITAMT');
													END IF;				
													
													-------
													
													CREATE LASTCHILD OF depositAcct AS acctBal NAMESPACE erib NAME 'AcctBal';
													
													SET acctBal.erib:BalType		=	'ClearBalance';
													
													IF acctList.AcctType = 'ABS_ACCOUNT' THEN
														SET acctBal.erib:CurAmt		=	acctList.AcctBalInfo.BalanceRec.Amount;
													ELSE 
														SET acctBal.erib:CurAmt		=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='INITAMT');
													END IF;				
										END IF;
										-- </DepAcctRec> --
									END IF;
							
							END FOR;
					WHEN 'Credit' THEN	
							DECLARE loanAcct REFERENCE TO outRoot;
							
							FOR acctList AS pragmanew_response.XMLNSC.*[<].AcctList.AcctInfo[] DO
								
								IF acctList.AcctType = 'ABS_CREDIT' THEN						
									
									CREATE LASTCHILD OF outRoot AS loanAcct NAMESPACE erib NAME 'LoanAcctRec';
									
									SET loanAcct.erib:LoanAcctId.erib:SystemId		=	'QPragma';
									SET loanAcct.erib:LoanAcctId.erib:AcctId		=	acctList.AcctId;
									SET loanAcct.erib:LoanAcctId.erib:AgreemtNum	=	acctList.AcctExtAttr.LoanAttr.DocNum;
									SET loanAcct.erib:LoanAcctId.erib:ProdType		=	'Credit';	
									SET loanAcct.erib:LoanAcctId.erib:LoanType		=	acctList.AcctExtAttr.LoanAttr.ProductName;
									SET loanAcct.erib:LoanAcctId.erib:AcctCur		=	acctList.AcctCur;
									SET loanAcct.erib:LoanAcctId.erib:OrigAmt		=	acctList.AcctExtAttr.LoanAttr.LoanAmount;
									
									SET loanAcct.erib:BankInfo.erib:AgencyId		=	'9999';
									SET loanAcct.erib:BankInfo.erib:RegionId		=	'038';
									SET loanAcct.erib:BankInfo.erib:RbBrchId		=	'00999';
									
									/*SET loanAcct.erib:BankInfoOpen.erib:BranchId	=	'9999';
									SET loanAcct.erib:BankInfoOpen.erib:AgencyId	=	'038';
									SET loanAcct.erib:BankInfoOpen.erib:RegionId	=	'00999';*/
									
									--SET loanAcct.erib:BankAcctInfo.erib:Ann		=	'';
									SET loanAcct.erib:BankAcctInfo.erib:StartDt		=	acctList.StartDate;
									SET loanAcct.erib:BankAcctInfo.erib:ExpDt		=	COALESCE(acctList.EndDate,null);
									
									SET loanAcct.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonRole					= '1';
									
									IF origMess.*:CustInfo.*:PersonInfo.*:PersonName.*:LastName = '' THEN	
										SET loanAcct.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName 	= 'Нет данных';
									ELSE 
										SET loanAcct.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName 	= FIELDVALUE(origMess.*:CustInfo.*:PersonInfo.*:PersonName.*:LastName);
									END IF;
									
									IF origMess.*:CustInfo.*:PersonInfo.*:PersonName.*:FirstName = '' THEN		
										SET loanAcct.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName 	= 'Нет данных';
									ELSE
										SET loanAcct.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName = FIELDVALUE(origMess.*:CustInfo.*:PersonInfo.*:PersonName.*:FirstName);
									END IF;
									
									IF origMess.*:CustInfo.*:PersonInfo.*:PersonName.*:MiddleName = '' THEN			
										SET loanAcct.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName	= 'Нет данных';										
									ELSE
										SET loanAcct.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName	= FIELDVALUE(origMess.*:CustInfo.*:PersonInfo.*:PersonName.*:MiddleName);	
									END IF;	
								END IF;
								
							END FOR;
						WHEN 'Card' THEN
							DECLARE cardAcctRec REFERENCE TO outRoot;
							
							FOR way4 AS way_response.*[<].*[<].MsgData.Information.DataRs.ContractRs[] DO
						
								IF way4.Contract.Product.AddInfo.Parm.Value <> 'Account' THEN
								
								CREATE LASTCHILD OF outRoot AS cardAcctRec NAMESPACE erib NAME 'CardAcctRec'; 
								
								SET cardAcctRec.erib:BankInfo.erib:BranchId		=	'9999';
								SET cardAcctRec.erib:BankInfo.erib:AgencyId		=	'9999';
								SET cardAcctRec.erib:BankInfo.erib:RegionId		=	'038';
								SET cardAcctRec.erib:BankInfo.erib:RbBrchId		=	'009999';
								
								--SET cardAcctRec.erib:BankAcctStatus.erib:BankAcctStatusCode	=	StatusGet(way4.Info.Status.StatusClass,way4.Info.Status.StatusCode);
								
								IF way4.Info.Status.StatusClass = 'Valid' AND way4.Info.Status.ProductionStatus = 'Ready' THEN								
									SET cardAcctRec.erib:BankAcctStatus.erib:BankAcctStatusCode	= 'Active';								
								ELSE									
									IF way4.Info.Status.StatusClass = 'Decline' AND way4.Info.Status.StatusCode <> '105' THEN
										SET cardAcctRec.erib:BankAcctStatus.erib:BankAcctStatusCode	= 'Blocked';
									ELSEIF way4.Info.Status.StatusClass = 'Invalid' AND way4.Info.Status.StatusCode <> '105' THEN
										SET cardAcctRec.erib:BankAcctStatus.erib:BankAcctStatusCode	= 'Stoped';			
									ELSEIF way4.Info.Status.StatusClass = 'Decline ' AND way4.Info.Status.StatusCode = '105' THEN
										SET cardAcctRec.erib:BankAcctStatus.erib:BankAcctStatusCode	= 'TempBlocked';
									ELSE
										SET cardAcctRec.erib:BankAcctStatus.erib:BankAcctStatusCode	= 'Stoped';	
									END IF;	
								END IF;								
								
								SET cardAcctRec.erib:BankAcctStatus.erib:StatusDesc			=	way4.Info.Status.StatusDetails;
								
								SET cardAcctRec.erib:CardAcctId.erib:SystemId					=	'BP_WAY';
								SET cardAcctRec.erib:CardAcctId.erib:CardNum					=   way4.Contract.ContractIDT.ContractNumber;
								SET cardAcctRec.erib:CardAcctId.erib:AcctId						=	way4.Contract.MainContract.ContractIDT.ContractNumber;
								
								DECLARE temp_type CHARACTER;
								
								SET temp_type = SUBSTRING(way4.Contract.ContractIDT.ContractNumber FROM 1 FOR 1);
								
								IF temp_type = '5' THEN
									SET cardAcctRec.erib:CardAcctId.erib:CardLevel					=   'MS ';
								ELSEIF temp_type = '4' THEN
									SET cardAcctRec.erib:CardAcctId.erib:CardLevel					=   'VC';
								END IF;	
								/*IF acctList.AcctType = 'ABS_DEPOSIT' THEN
									SET cardAcctRec.erib:CardAcctId.erib:AcctCode					=	'Deposit';	
								ELSE	
									SET cardAcctRec.erib:CardAcctId.erib:AcctCode					=	acctList.AcctExtAttr.CurrAttr.Contract;
								END IF;*/
								--SET cardAcctRec.erib:CardAcctId.erib:AcctSubCode					=	'Нет данных';
								
								
								DECLARE vAT01         INTEGER;
								DECLARE vAT02         INTEGER;
								DECLARE vAT03         CHARACTER;
								
							    SET vAT01		= POSITION('IS_CREDIT=' IN way4.Contract.MainContract.AddContractInfo.ExtraRs);
							    SET vAT01		= vAT01 + 10;
							    SET vAT03		= SUBSTRING(way4.Contract.MainContract.AddContractInfo.ExtraRs FROM vAT01 FOR 2);
									 
								SET cardAcctRec.erib:CardAcctId.erib:CardType					= 	ChangeType(vAT03);		
								SET cardAcctRec.erib:CardAcctInfo.erib:EndDtForWay = way4.Contract.ProductionParms.CardExpiry;				
								/*
								IF NOT EXISTS(way4.Contract.ProductionParms.CardExpiry[]) THEN
									SET cardAcctRec.erib:CardAcctInfo.erib:EndDtForWay = DateExpiryFunc(way4.Contract.DateExpiry);
								ELSE
									SET cardAcctRec.erib:CardAcctInfo.erib:EndDtForWay = way4.Contract.ProductionParms.CardExpiry;
	 							END IF;
								*/
								--SET cardAcctRec.erib:CardAcctId.erib:CardLevel				=	'Нет данных';
								--SET cardAcctRec.erib:CardAcctId.erib:CardBonusSign			=	'Нет данных';
								/*IF way4.Contract.Product.ProductName <> '' THEN*/
									IF temp_type = '5' THEN
										--SET cardAcctRec.erib:CardAcctId.erib:CardName					=   SUBSTRING(way4.Contract.Product.ProductName FROM 0 FOR 51);
										SET cardAcctRec.erib:CardAcctId.erib:CardName					=   'MASTERCARD BUSINESS';--'MASTERCARD MASS';--SUBSTRING(way4.Contract.Product.ProductName FROM 0 FOR 51);
									ELSEIF temp_type = '4' THEN
										SET cardAcctRec.erib:CardAcctId.erib:CardName					=   'VISA BUSINESS';--'VISA CLASSIC';--SUBSTRING(way4.Contract.Product.ProductName FROM 0 FOR 51);
									ELSEIF temp_type = '6' THEN
										SET cardAcctRec.erib:CardAcctId.erib:CardName					=   'PRO100';
									END IF;	
								/*ELSE
									SET cardAcctRec.erib:CardAcctId.erib:CardName					=	'Card';
								END IF;*/
									
								SET cardAcctRec.erib:CardAcctId.erib:AcctCur					=	way4.Contract.Currency;
								
								IF EXISTS(way4.Contract.ProductionParms.CardExpiry[]) THEN
									SET cardAcctRec.erib:CardAcctId.erib:EndDt						=	GetDate(way4.Contract.ProductionParms.CardExpiry);
								ElSE
									SET cardAcctRec.erib:CardAcctId.erib:EndDt						=	way4.Contract.DateExpiry;
								END IF;		
								--SET cardAcctRec.erib:CardAcctId.erib:PmtDt					=	'Нет данных';
								SET cardAcctRec.erib:CardAcctId.erib:IssDt						=   way4.Contract.DateOpen;
								SET cardAcctRec.erib:CardAcctId.erib:CardHolder					=	way4.Contract.PlasticInfo.FirstName || ' ' || way4.Contract.PlasticInfo.LastName;
												
								
								
								
								--SET cardAcctRec.erib:CardAcctInfo.erib:MainCard				=	'';
								--SET cardAcctRec.erib:CardAcctInfo.erib:AdditionalCard			=	'';
								--SET cardAcctRec.erib:CardAcctInfo.erib:EndDtForWay			=	'YYMM';	
								
								DECLARE acctBal REFERENCE TO outRoot;
								
									FOR balance AS way4.Info.Balances.Balance[] DO
										
										CASE balance.Type 
										WHEN 'AVAILABLE' THEN									
											
											CREATE LASTCHILD OF cardAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
											
											SET acctBal.erib:BalType						=	'Avail';
											SET acctBal.erib:CurAmt							=	balance.Amount;
										
										WHEN 'CR_LIMIT' THEN
											
											CREATE LASTCHILD OF cardAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
											
											SET acctBal.erib:BalType						=	'CR_LIMIT';
											SET acctBal.erib:CurAmt							=	balance.Amount;
											
										END CASE;
									END FOR;
									
								END IF;
								
							END FOR;
					WHEN 'IMA' THEN
							DECLARE bankAcctRec REFERENCE TO outRoot;	
							FOR acctList AS pragmanew_response.XMLNSC.*[<].AcctList.AcctInfo[] DO
								 IF acctList.AcctType = 'ABS_ACCOUNT' THEN
								 	IF acctList.AcctExtAttr.CurrAttr.Contract = 'ОМС' THEN

										-- <BankAcctRec> --
										CREATE LASTCHILD OF outRoot AS bankAcctRec NAMESPACE erib NAME 'BankAcctRec'; 
										DECLARE imsAcct REFERENCE TO bankAcctRec;
										
										
										SET bankAcctRec.erib:BankInfo.erib:BranchId	=	'9999';
										SET bankAcctRec.erib:BankInfo.erib:AgencyId	=	'9999';
										SET bankAcctRec.erib:BankInfo.erib:RegionId	=	'038';	
										SET bankAcctRec.erib:BankInfo.erib:RbBrchId	=	'009999';
										
										SET bankAcctRec.erib:BankAcctId.erib:SystemId		=	'Qpragma';
										SET bankAcctRec.erib:BankAcctId.erib:AcctId		=	acctList.AcctId; 
										SET bankAcctRec.erib:BankAcctId.erib:AcctCur	=   acctList.AcctCur;--GetTypeOfCurrencyIMA(acctList.AcctCur);--'AUR';--GetTypeOfCurrency(acctList.AcctCur); 
										SET bankAcctRec.erib:BankAcctId.erib:AcctName 	=   GetNameOfCurrency(acctList.AcctCur);
										SET bankAcctRec.erib:BankAcctId.erib:StartDate 	=	acctList.StartDate;
										
										CREATE LASTCHILD OF bankAcctRec AS imsAcct NAMESPACE erib NAME 'ImsAcctInfo'; 
										
										IF acctList.EndDate <> '' THEN
											SET imsAcct.erib:EndDate		=	acctList.EndDate;
										END IF;	 
										SET imsAcct.erib:Status		=	GetStatusOfCurrency(acctList.AcctStatus.StatusCode, acctList.AcctExtAttr.CurrAttr.Blocked);
										--SET imsAcct.erib:AgreementNumber		=	'Нет данных';
										
										DECLARE cRec REFERENCE TO imsAcct;
									
										CREATE LASTCHILD OF imsAcct AS cRec NAMESPACE erib NAME 'CustRec';
										
										FOR personId AS getClient.PersonIdExt[] DO
											
											IF personId.Key = 'WAY' THEN
												SET cRec.erib:CustId			=	personId.Value;
											END IF;
											
										END FOR;
										
										IF FIELDVALUE(getClient.*:BirthDt) <> '' THEN
											SET cRec.erib:CustInfo.erib:PersonInfo.erib:Birthday		= getClient.*:BirthDt;
										ELSE 
											SET cRec.erib:CustInfo.erib:PersonInfo.erib:Birthday		= '01.01.1900';			
										END IF;
									
										IF FIELDVALUE(getClient.*:BirthPlace) <> '' THEN
											SET cRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace		= getClient.*:BirthPlace;
										ELSE 
											SET cRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace		= 'Нет данных';			
										END IF;
									
										IF origMess.CustInfo.PersonInfo.IdentityCard.IdType = '400' THEN
											SET cRec.erib:CustInfo.erib:PersonInfo.erib:TaxId = origMess.CustInfo.PersonInfo.IdentityCard.IdNum;
										END IF;												
										
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:TaxId = FIELDVALUE(origMess.*:CustInfo.*:PersonInfo.*:IdentityCard.*:IdNum);
										
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:Citizenship				= getClient.*:Citizenship;
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName		= getClient.*:PersonName.*:LastName;
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName		= getClient.*:PersonName.*:FirstName;
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName		= getClient.*:PersonName.*:MiddleName;
									
										IF FIELDVALUE(getClient.*:IdentityCards.*:IdentityCard.*:IdType) <> '' THEN
											SET cRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdType		= getClient.*:IdentityCards.*:IdentityCard.*:IdType;
										ELSE 
											SET cRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdType		= 'Нет данных';
										END IF;
			
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdNum			= getClient.*:IdentityCards.*:IdentityCard.*:IdNum;
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedBy		= getClient.*:IdentityCards.*:IdentityCard.*:IssuedBy;
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedCode	= getClient.*:IdentityCards.*:IdentityCard.*:IssuedCode;
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssueDt		= getClient.*:IdentityCards.*:IdentityCard.*:IssueDt;
										SET cRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:ExpDt			= COALESCE(getClient.*:IdentityCards.*:IdentityCard.*:ValidTo,null);
										
										DECLARE acctBal REFERENCE TO bankAcctRec;							
															
										CREATE LASTCHILD OF bankAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
								
										SET acctBal.erib:BalType		=	'Avail';
										
										IF acctList.AcctType = 'ABS_ACCOUNT' THEN
											SET acctBal.erib:CurAmt		=	acctList.AcctBalInfo.BalanceRec.Amount;
										ELSE 
											SET acctBal.erib:CurAmt		=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='AVAILINT');
										END IF;
										
										CREATE LASTCHILD OF bankAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
										
										SET acctBal.erib:BalType		=	'AvailCash';
										
										IF acctList.AcctType = 'ABS_ACCOUNT' THEN
											SET acctBal.erib:CurAmt		=	acctList.AcctBalInfo.BalanceRec.Amount;
										ELSE 
											SET acctBal.erib:CurAmt		=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='AVAILINT');
										END IF; 
								 	END IF;
							-- </BankAcctRec> --
								 END IF;	
							END FOR;	 
					END CASE;			
				END FOR; 	 
				
				
							
				
			
			--END IF;
			
		--END IF;

		RETURN TRUE;
	END;
END MODULE;

/*
 * Получения выписки по вкладу/счету KZGetTransactionsInfoRs -> DepAcctStmtInqRs
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_DepAcctRS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;	
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<].TransData;
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.*[<];	
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		DECLARE oRef REFERENCE TO OutputRoot;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF oRef AS outRoot NAMESPACE erib NAME 'DepAcctExtRs';		
		
		SET outRoot.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		--SET outRoot.SPName	=	Environment.UserProperties.SPName;
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE bankInfo REFERENCE TO outRoot;
		
		DECLARE depAcct REFERENCE TO outRoot;
		
		CREATE LASTCHILD OF outRoot AS bankInfo NAMESPACE erib NAME 'BankInfo';			
		
		SET bankInfo.erib:BranchId			=	'9999';
		SET bankInfo.erib:BranchName		=	inRoot.AcctTrans.AcctInfo.BankInfo.*:BranchName; 
		SET bankInfo.erib:BankBIC			=	'SABRKZKA';
		SET bankInfo.erib:BankOKPO			=	'28104567';
		SET bankInfo.erib:BankBIN			=	inRoot.AcctTrans.AcctInfo.BankInfo.*:BankId;
		SET bankInfo.erib:RbBrchId			=	'009999';
		
		CREATE LASTCHILD OF outRoot AS depAcct NAMESPACE erib NAME 'DepAcct';
		
		SET depAcct.erib:DepAcctId.erib:SystemId	=	'QPragma';
		SET depAcct.erib:DepAcctId.erib:AcctId	=	inRoot.AcctTrans.AcctInfo.AcctId;
		
		SET depAcct.erib:DepAcctStmtGen.erib:DateFrom			  =	inRoot.StartDate;
		SET depAcct.erib:DepAcctStmtGen.erib:DateTo			  =	inRoot.EndDate;
		SET depAcct.erib:DepAcctStmtGen.erib:BalanceFrom  	  =	THE(SELECT ITEM attr.Amount FROM inRoot.AcctTrans.AcctInfo.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='STBAL');
		SET depAcct.erib:DepAcctStmtGen.erib:BalanceFromCur     =	inRoot.AcctTrans.AcctInfo.AcctCur;--THE(SELECT ITEM attr.BalanceRec.Amount FROM inRoot.AcctTrans.AcctInfo.AcctBalInfo[] AS attr WHERE attr.BalanceRec.BalType='STBAL');
		
		
		
		
		/* u06068 02.07.2015  новые добавления по полям по требованию Зарубина. */
		
		SET depAcct.erib:DepAcctStmtGen.erib:BalanceFromNC     =	THE(SELECT ITEM attr.Amount FROM inRoot.AcctTrans.AcctInfo.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='STBALNC');	
		
		/* u06068 изменения за 02.07.2015 */
		IF inRoot.AcctTrans.AcctInfo.AcctCur IN ('XAU','XAG','XPT','XPD') THEN
			SET depAcct.erib:DepAcctStmtGen.erib:MetalBalanceFrom	= inRoot.StartDateRate;
		END IF;
		/* u06068 конец изменения за 02.07.2015 */
		
		SET depAcct.erib:DepAcctStmtGen.erib:BalanceTo		  =	inRoot.AcctTrans.AcctInfo.AcctBalInfo.BalanceRec[2].Amount;--THE(SELECT ITEM attr.BalanceRec.BalType FROM inRoot.AcctTrans.AcctInfo.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='ENDBAL');
		SET depAcct.erib:DepAcctStmtGen.erib:BalanceToCur	  =	inRoot.AcctTrans.AcctInfo.AcctCur;--inRoot.AcctTrans.AcctInfo.AcctBalInfo.BalanceRec[2].Amount;--THE(SELECT ITEM attr.BalanceRec.Amount FROM inRoot.AcctTrans.AcctInfo.AcctBalInfo[] AS attr WHERE attr.BalanceRec.BalType='ENDBAL');
		
		/* u06068 изменения за 02.07.2015 */
		SET depAcct.erib:DepAcctStmtGen.erib:BalanceToNC     =	THE(SELECT ITEM attr.Amount FROM inRoot.AcctTrans.AcctInfo.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType='ENDBALNC');
		IF inRoot.AcctTrans.AcctInfo.AcctCur IN ('XAU','XAG','XPT','XPD') THEN
			SET depAcct.erib:DepAcctStmtGen.erib:MetalBalanceTo	= inRoot.EndDateRate;
		END IF;
		/* u06068 конец изменения за 02.07.2015 */
		
		DECLARE depAcctStmt REFERENCE TO outRoot;
		
		FOR transaction AS inRoot.AcctTrans.TransactionInfo[] DO
			
			DECLARE transCode CHARACTER SUBSTRING(transaction.TransCode FROM 0 FOR 5);
			
			/* u06068 изменения за 02.07.2015 */
			--IF transCode <> 'Курс' OR inRoot.AcctTrans.AcctInfo.AcctCur IN ('XAU','XAG','XPT','XPD') THEN
			/* u06068 конец изменения за 02.07.2015 */
			
			IF transCode <> 'Курс' THEN
			
			CREATE LASTCHILD OF depAcct AS depAcctStmt NAMESPACE erib NAME 'DepAcctStmtRec';
			
			SET depAcctStmt.erib:EffDate		  = SUBSTRING(transaction.OperationDate FROM 0 FOR 20);
			SET depAcctStmt.erib:DocumentNumber	  = transaction.DocNum;	
			
				IF transaction.Type = 'D' THEN
					SET depAcctStmt.erib:Name			  = 'Списание';	
				ELSE
					SET depAcctStmt.erib:Name			  =	'Зачисление';
				END IF; 
			
			SET depAcctStmt.erib:Aspect	 		  = transaction.Type;
			
				IF transaction.Type = 'D' THEN
					SET depAcctStmt.erib:IsDebit		  = 'false';	
				ELSE
					SET depAcctStmt.erib:IsDebit		  =	'true';
				END IF;
			
			DECLARE code CHARACTER;
			DECLARE IIN CHARACTER;
				FOR trpayer AS transaction.PayerInfo[] DO
					SET code = THE(SELECT ITEM attr.*:OrgIdExt.*:Value FROM trpayer.*:OrgInfo[] AS attr WHERE attr.*:OrgIdExt.*:Key='CODE');
					SET IIN = THE(SELECT ITEM attr.*:OrgIdExt.*:Value FROM trpayer.*:OrgInfo[] AS attr WHERE attr.*:OrgIdExt.*:Key='IIN');
				END FOR;
				
			SET depAcctStmt.erib:Amount	 		  = transaction.Amt; 
			SET depAcctStmt.erib:AmountCur 		  = inRoot.AcctTrans.AcctInfo.AcctCur;--THE(SELECT ITEM attr.BalanceRec.Amount FROM inRoot.AcctTrans.AcctInfo.AcctBalInfo[] AS attr WHERE attr.BalanceRec.BalType='STBAL');
			
				/* u06068 изменения за 02.07.2015 */
				IF inRoot.AcctTrans.AcctInfo.AcctCur IN ('XAU','XAG','XPT','XPD') THEN
					SET depAcctStmt.erib:AmountEQNC	  = transaction.AmtNC;
				END IF;
				/* u06068 конец изменения за 02.07.2015 */
			
			SET depAcctStmt.erib:EKNP 				= COALESCE(code, ' ') || ',' || COALESCE(code, ' ') || ',' || COALESCE(FIELDVALUE(transaction.DescCode), ' ') || ',' || COALESCE(FIELDVALUE(transaction.CBC), ' ');
			--SET depAcctStmt.erib:EKNP 				= FIELDVALUE(transaction.DescCode) || ',' || FIELDVALUE(transaction.CBC);
			SET depAcctStmt.erib:Correspondent	  = transaction.PayerInfo.AcctInfo.AcctId;
			SET depAcctStmt.erib:Balance	 		  = '0';
			SET depAcctStmt.erib:BalanceCur 		  = inRoot.AcctTrans.AcctInfo.AcctCur;--inRoot.AcctTrans.AcctInfo.AcctBalInfo.BalanceRec[2].Amount;--THE(SELECT ITEM attr.BalanceRec.Amount FROM inRoot.AcctTrans.AcctInfo.AcctBalInfo[] AS attr WHERE attr.BalanceRec.BalType='ENDBAL');
			SET depAcctStmt.erib:Recipient 		  = transaction.PayeeInfo.OrgInfo.*:Name;

				IF transaction.Type = 'C' THEN
				SET depAcctStmt.erib:RecipientAccount	  = transaction.PayeeInfo.AcctInfo.AcctId;
				ELSEIF transaction.Type = 'D' THEN
					SET depAcctStmt.erib:RecipientAccount	  = transaction.PayerInfo.AcctInfo.AcctId;
				END IF;	

				IF transaction.Type = 'C' THEN
				SET depAcctStmt.erib:RecipientIIN 	=  IIN;
				ELSE
					--SET depAcctStmt.erib:RecipientIIN 	=  THE(SELECT ITEM attr.OrgIdExt.Value FROM trpayer.OrgInfo[] AS attr WHERE attr.OrgIdExt.Key='IIN');
					SET depAcctStmt.erib:RecipientIIN 	=  IIN;
				END IF;
			
				IF transaction.Type = 'C' THEN	
				SET depAcctStmt.erib:RecipientBIC		  = transaction.PayerInfo.BankInfo.*:BankId;
				ELSEIF transaction.Type = 'D' THEN
					SET depAcctStmt.erib:RecipientBIC		  = transaction.PayeeInfo.BankInfo.*:BankId;
				END IF;
			
				IF transaction.Description <> '' THEN
					SET depAcctStmt.erib:Destination		  = transaction.Description;	
				ELSE
					SET depAcctStmt.erib:Destination		  =	'нет данных';
				END IF;
		
			END IF;
		
		END FOR;
		
		SET depAcct.erib:Status.erib:StatusCode				=	DefineStatusCode(inRef.Status.*:StatusCode);
		IF depAcct.erib:Status.erib:StatusCode <> '0' THEN
			SET depAcct.erib:Status.erib:StatusDesc				=	DefineStatus(inRef.Status.*:StatusCode);
		END IF;
		SET depAcct.erib:Status.erib:ServerStatusDesc			=	'Pragma_NEW_'||inRef.Status.*:StatusCode||'_'||inRef.Status.*:Severity;
				
		RETURN TRUE;
	END;
END MODULE;

/**
 * Удаляет заголовки MQ
 **/
CREATE COMPUTE MODULE HTTPResponseForSBOL_ClearMqHeaders
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		 
		CALL CopyWholeMessage(InputRoot, OutputRoot);

		SET OutputRoot.MQMD = NULL;
		SET OutputRoot.MQRFH2 = NULL;

	    SET OutputLocalEnvironment.Destination.SOAP.Reply.ReplyIdentifier = CAST(Environment.UserProperties.ReplyIdentifier AS BLOB);

		RETURN TRUE;
	END;
END MODULE;


/*
 *	Проведение платежа KZPrivateMoneyTransferRs -> XferAddRs
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_XferAcctRS
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];		
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		DECLARE mainRoot REFERENCE TO OutputRoot;
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'XferAddRs';
						
		SET outRoot.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		--SET outRoot.SPName	=	Environment.UserProperties.SPName;
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		SET outRoot.erib:OperRRN =  Environment.UserProperties.OperRRN;
		--DECLARE svcAcctId REFERENCE TO outRoot;
		
		--CREATE LASTCHILD OF outRoot AS svcAcctId NAMESPACE erib NAME 'SvcAcctId';
				
		--SET svcAcctId.erib:SvcAcctNum				=	'';		
		--SET svcAcctId.erib:BankInfo.erib:RbBrchId	=	'009999';
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF inRoot.Status.*:StatusCode = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode			=	DefineStatusCode(inRoot.Status.*:StatusCode);			
		ELSE
			SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode			=	output_code;
		END IF;
		
		--SET outRoot.erib:Status.erib:StatusCode				=	DefineStatusCode(inRoot.Status.*:StatusCode);
		SET outRoot.erib:Status.erib:StatusDesc					=	DefineStatus(inRoot.Status.*:StatusCode);
		SET outRoot.erib:Status.erib:ServerStatusDesc			=	'PRAGMANEW_'||inRoot.Status.*:StatusCode||'_'||COALESCE(inRoot.Status.*:StatusDesc,'0');
		
		SET outRoot.erib:DstCurAmt									=	inRoot.Amount;
		
		IF inRoot.Status.*:StatusCode = '0' THEN
		--SET outRoot.erib:DstCurAmt								=   Environment.UserProperties.Amount;		
			IF EXISTS(Environment.UserProperties.WithdrawalType[]) AND LOWER(Environment.UserProperties.WithdrawalType) = 'true' THEN
				IF EXISTS(Environment.UserProperties.ApprovalType[]) AND LOWER(Environment.UserProperties.ApprovalType) = 'true' THEN
					SET outRoot.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:OperationName  = inRoot.Id;
					
					IF inRoot.Penalty = '' THEN
						SET	outRoot.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:CurAmt 	       = '0.0';
					ELSE
						SET outRoot.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:CurAmt 	       = COALESCE(FIELDVALUE(inRoot.Penalty),'0.0');
					END IF;
					
					SET outRoot.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:Turnover	   = 'CHARGE';	
				END IF;
			END IF;		
		END IF;
	
	
		RETURN TRUE;
	END;
END MODULE;



CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_GetPrivateClientPayScheduleRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		-- CALL CopyMessageHeaders();
		-- CALL CopyEntireMessage();
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_StoreHTMLasBLOB
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		SET Environment.UserProperties.html = CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID 1208);
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_ConvertMDO2UFX5
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE inRoot   REFERENCE TO InputRoot.XMLNSC.OrigMess.*:DoIFXRq.*:LoanPaymentRq;		
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*:DoIFXRq.*:LoanPaymentRq;	
		
		DECLARE outRoot  REFERENCE TO OutputRoot;	
		DECLARE mainRoot REFERENCE TO OutputRoot;
        DECLARE LoanRec  REFERENCE TO outRoot;    	 		
		DECLARE oRef    REFERENCE TO OutputRoot;

        DECLARE inRootT  REFERENCE TO InputRoot.XMLNSC.DoIFXRs;		

		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		DECLARE inCreditGetPayment     REFERENCE TO Environment.UserProperties.CreditGetPayment.XMLNSC.KZGetPrivateClientPayScheduleRs;
		DECLARE inLoanCalcDebtRequest  REFERENCE TO Environment.UserProperties.LoanCalcDebtRequest.XMLNSC.KZGetCalcLoanDeptRs;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';	
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		IF inRootT.Status.*:StatusCode <> '0' THEN 
			SET outRoot.erib:RqUID	=	inRootT.*:RqUID;
			SET outRoot.erib:RqTm	=	CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss');
			SET outRoot.erib:OperUID =	COALESCE(inRootT.*:OperUID, ' ');
	
			SET outRoot.erib:Status.erib:StatusCode				=	    DefineStatusCodeInt(inRootT.Status.*:StatusCode);
			IF  outRoot.erib:Status.erib:StatusCode <> 0 THEN 
				SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(inRootT.Status.*:StatusCode);
				IF outRoot.erib:Status.erib:StatusDesc = '' THEN 
				   SET outRoot.erib:Status.erib:StatusDesc			=	inRootT.Status.*:StatusDesc;
				END IF;
				SET outRoot.erib:Status.erib:ServerStatusDesc			=	'Pragma_NEW_'||inRootT.Status.*:StatusCode||'_'||inRootT.Status.*:StatusDesc||';';
			END IF; 
		ELSE 
			CREATE LASTCHILD OF oRef AS outRoot NAMESPACE erib NAME 'LoanPaymentRs';
			
			SET outRoot.erib:RqUID	=	origMess.*:RqUID;
			SET outRoot.erib:RqTm	=	CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss');
			SET outRoot.erib:OperUID =	COALESCE(origMess.*:OperUID, ' ');
			
			IF inCreditGetPayment.Status.*:StatusCode = '0' AND inLoanCalcDebtRequest.Status.*:StatusCode = '0' THEN
				SET outRoot.erib:SystemId						=	'Qpragma';
				SET outRoot.erib:AcctId							=	origMess.*:LoanAcctId.*:AcctId;

		        DECLARE varFineAmount   DECIMAL 0.0; 	
		        DECLARE varRemainAmount DECIMAL 0.0; 	

				FOR inDebt AS inLoanCalcDebtRequest.DebtInfo.DebtRec[] DO
					IF inDebt.BalType = 'B5' OR inDebt.BalType = 'B6' THEN  
					   SET varFineAmount = varFineAmount + CAST(inDebt.Amount AS DECIMAL);
					END IF;  
		
				    IF inDebt.BalType IN ('B1', 'B2', 'B3', 'B4', 'B5') THEN
					   SET varRemainAmount = varRemainAmount + CAST(inDebt.Amount AS DECIMAL);
					END IF;  
				END FOR;	

				SET outRoot.erib:DoneAmount						=	'0.00';
				SET outRoot.erib:RemainAmount					=	varRemainAmount;
				SET outRoot.erib:FineAmount						=	varFineAmount;
				SET outRoot.erib:MaxSize						=	CARDINALITY(inCreditGetPayment.ScheduleInfo.ScheduleRec[]);
		
				DECLARE LonNum INTEGER 0;
				DECLARE RepaymentMethod CHARACTER;
		
			    SET RepaymentMethod = inCreditGetPayment.AcctInfo.AcctExtAttr.LoanAttr.RepaymentMethod;
		
				DECLARE LoanPaymentRec REFERENCE TO outRoot;
				--27/10/2015 u07357 доработка по коду валюты
				DECLARE curkod CHARACTER 'KZT';
				IF inCreditGetPayment.AcctInfo.AcctExtAttr.LoanAttr.LoanCur = 'Доллар США' THEN
					SET curkod = 'USD';
				ELSEIF inCreditGetPayment.AcctInfo.AcctExtAttr.LoanAttr.LoanCur = 'Тенге' THEN
					SET curkod = 'KZT';
				ELSEIF inCreditGetPayment.AcctInfo.AcctExtAttr.LoanAttr.LoanCur = 'Евро' THEN
					SET curkod = 'EUR';	
				ELSEIF inCreditGetPayment.AcctInfo.AcctExtAttr.LoanAttr.LoanCur = 'Российский рубль' THEN
					SET curkod = 'RUB';						
				END IF;
				FOR inRef AS inCreditGetPayment.ScheduleInfo.ScheduleRec[] DO
					CREATE LASTCHILD OF outRoot AS LoanPaymentRec NAMESPACE erib NAME 'LoanPaymentRec';
					
				    SET LonNum = LonNum + 1;
		
					SET LoanPaymentRec.erib:LoanPaymentNumber    	=	LonNum;
					SET LoanPaymentRec.erib:LoanPaymentStatus    	=	3;
					SET LoanPaymentRec.erib:LoanPaymentDate 	    =	inRef.Date;
					
		     		DECLARE AcctBalOnDate REFERENCE TO LoanPaymentRec;
					FOR inPay AS inRef.PayInfo.PayRec[] DO
		
						IF inPay.PayType = 'CV' OR inPay.PayType = 'CVP' THEN 
							CREATE LASTCHILD OF LoanPaymentRec AS AcctBalOnDate NAMESPACE erib NAME 'AcctBalOnDate';
				
							IF inPay.PayType = 'CV' THEN 
							   -- SET AcctBalOnDate.erib:BalType 	    	=	15;
							   SET AcctBalOnDate.erib:BalType 	    	=	4;
							   SET AcctBalOnDate.erib:BalName 	    	=	'Платеж по ОД';
							   SET AcctBalOnDate.erib:CurAmt 	    	=	inPay.Amount;
							   SET AcctBalOnDate.erib:AcctCur 	    	=	curkod;--'KZT';
							   SET AcctBalOnDate.erib:Priority 	    	=	2;
							END IF; 
			
							IF inPay.PayType = 'CVP' THEN 
							   SET AcctBalOnDate.erib:BalType 	    	=	5;
							   SET AcctBalOnDate.erib:BalName 	    	=	'Платеж по %%';
							   SET AcctBalOnDate.erib:CurAmt 	    	=	inPay.Amount;
							   SET AcctBalOnDate.erib:AcctCur 	    	=	curkod;--'KZT';
							   SET AcctBalOnDate.erib:Priority 	    	=	1;
							END IF; 
			
							SET AcctBalOnDate.erib:AcctCount 	    	=	origMess.*:LoanAcctId.*:AcctId;
		
							IF RepaymentMethod = 'Аннуитетная' THEN 
							   SET AcctBalOnDate.erib:EffDt	 	    	=	inRef.Date; ---inRoot.ScheduleInfo.AgrDate;
							END IF; 
						END IF; 
		
					END FOR;	
		
				END FOR;	
			ELSE   														
				
				DECLARE status_code CHARACTER;
				DECLARE output_code CHARACTER;
				
				IF inLoanCalcDebtRequest.Status.*:StatusCode = '0' THEN		
					SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCode(inLoanCalcDebtRequest.Status.*:StatusCode);
				ELSE
					SET status_code = inLoanCalcDebtRequest.Status.*:StatusCode || ' ' || inLoanCalcDebtRequest.Status.*:StatusDesc;  
					CALL CRC8(status_code,output_code);
					SET outRoot.erib:Status.erib:StatusCode					=	output_code;
				END IF;
				
				--SET outRoot.erib:Status.erib:StatusCode				=	    DefineStatusCodeInt(inLoanCalcDebtRequest.Status.*:StatusCode);
				IF  outRoot.erib:Status.erib:StatusCode <> 0 THEN 
					SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(inLoanCalcDebtRequest.Status.*:StatusCode);
					IF outRoot.erib:Status.erib:StatusDesc = '' THEN 
					   SET outRoot.erib:Status.erib:StatusDesc			=	inLoanCalcDebtRequest.Status.*:StatusDesc;
					END IF;
					SET outRoot.erib:Status.erib:ServerStatusDesc			=	'Pragma_NEW_'||inLoanCalcDebtRequest.Status.*:StatusCode||'_'||inLoanCalcDebtRequest.Status.*:StatusDesc||';';
				END IF;
				 
			END IF;
			
			SET outRoot.erib:Status.erib:StatusCode				=	    DefineStatusCodeInt(inLoanCalcDebtRequest.Status.*:StatusCode);
				IF  outRoot.erib:Status.erib:StatusCode <> 0 THEN 
					SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(inLoanCalcDebtRequest.Status.*:StatusCode);
					IF outRoot.erib:Status.erib:StatusDesc = '' THEN 
					   SET outRoot.erib:Status.erib:StatusDesc			=	inLoanCalcDebtRequest.Status.*:StatusDesc;
					END IF;
					SET outRoot.erib:Status.erib:ServerStatusDesc			=	'Pragma_NEW_'||inLoanCalcDebtRequest.Status.*:StatusCode||'_'||inLoanCalcDebtRequest.Status.*:StatusDesc||';';
				END IF;
			  				
		END IF;
		 
		 
		  
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_LoanInfoRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE inRoot   REFERENCE TO InputRoot.XMLNSC.OrigMess.*:DoIFXRq.*:LoanInfoRq;		
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*:DoIFXRq.*:LoanInfoRq;	

		DECLARE outRoot  REFERENCE TO OutputRoot;	
		DECLARE mainRoot REFERENCE TO OutputRoot;
        DECLARE LoanRec  REFERENCE TO outRoot;    	 		

        DECLARE inRootT  REFERENCE TO InputRoot.XMLNSC.DoIFXRs;		

		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		DECLARE inLoanAcctGetList  REFERENCE TO Environment.UserProperties.LoanAcctGetList.XMLNSC.KZGetPrivateClientAccountListRs;
		DECLARE inPersonGetClient  REFERENCE TO Environment.UserProperties.PersonGetClient.XMLNSC.KZGetPersonInfoByIDRs;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFxRs';
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		IF inRootT.Status.*:StatusCode <> '0' THEN 
			SET outRoot.erib:RqUID	=	inRootT.*:RqUID;
			SET outRoot.erib:RqTm	=	CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss');
			SET outRoot.erib:OperUID =	COALESCE(inRootT.*:OperUID, ' ');
	
			SET LoanRec.Status.StatusCode				=	COALESCE(inRootT.Status.*:StatusCode, '0');
			IF LoanRec.Status.StatusCode <> 0 THEN 
		        SET LoanRec.Status.StatusDesc				=	COALESCE(DefineStatus(inRootT.Status.*:StatusCode), ' ');
				IF LoanRec.Status.StatusDesc = '' OR LoanRec.Status.StatusDesc = ' ' THEN 
				   SET LoanRec.Status.StatusDesc			=	COALESCE(inRootT.Status.*:StatusDesc, ' ');
				END IF;
			    SET LoanRec.Status.ServerStatusDesc			=	'Pragma_NEW_'||inRootT.Status.*:StatusDesc||'_'||inRootT.Status.*:StatusDesc||';';
			END IF;			
		ELSE 
			CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'LoanInfoRs';

			SET outRoot.erib:RqUID	=	origMess.*:RqUID;
			SET outRoot.erib:RqTm	=	CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss');
			SET outRoot.erib:OperUID =	COALESCE(origMess.*:OperUID, ' ');
	
			IF inLoanAcctGetList.Status.*:StatusCode = '0' AND inPersonGetClient.Status.*:StatusCode = '0' THEN

		       CREATE LASTCHILD OF outRoot AS LoanRec NAMESPACE erib NAME 'LoanRec';	

			   FOR AcctInfo AS inLoanAcctGetList.AcctList.AcctInfo[] DO 
	
				   IF AcctInfo.AcctId = origMess.*:LoanAcctId.*:AcctId THEN        
					 
					    DECLARE LoanInfo REFERENCE TO LoanRec;
						CREATE LASTCHILD OF LoanRec AS LoanInfo NAMESPACE erib NAME 'LoanInfo';
						
			            ----------------------------------------------------------------- 
						SET LoanInfo.erib:LoanAcctId.erib:SystemId			     =	'QPragma';
						SET LoanInfo.erib:LoanAcctId.erib:AcctId	 			 =	AcctInfo.AcctId;
			            ----------------------------------------------------------------- 
						SET LoanInfo.erib:AgreemtNum		= 	AcctInfo.AcctExtAttr.LoanAttr.DocNum;  ---AcctInfo.AcctName;

						SET LoanInfo.erib:ProdType	 	    =	'Credit';
						SET LoanInfo.erib:LoanType	 	    =	AcctInfo.AcctExtAttr.LoanAttr.ProductName;
						SET LoanInfo.erib:AcctCur	 	    =	AcctInfo.AcctCur;
						SET LoanInfo.erib:CurAmt	 		=	AcctInfo.AcctExtAttr.LoanAttr.LoanAmount;
						SET LoanInfo.erib:CreditingRate		=	AcctInfo.AcctExtAttr.LoanAttr.LoanRate;
						SET LoanInfo.erib:CreditingEffRate	=	AcctInfo.AcctExtAttr.LoanAttr.EffRate;
				
						IF AcctInfo.AcctStatus.StatusCode = 'OPEN' THEN 		            
							SET LoanInfo.erib:LoanStatus	    =	'1';			            
						ELSE 
							IF AcctInfo.AcctStatus.StatusCode = 'CLOSE' THEN 		            
							   SET LoanInfo.erib:LoanStatus	    =	'2';			            
						    END IF; 		            
						END IF; 		            
			            ----------------------------------------------------------------- 
			     			
					    DECLARE CustRec REFERENCE TO LoanInfo;
						CREATE LASTCHILD OF LoanInfo AS CustRec NAMESPACE erib NAME 'CustRec';
				
						FOR PersonIdExt AS inPersonGetClient.PersonInfo.PersonIdExt[] DO 
				   		   IF PersonIdExt.Key = 'UNK' THEN
							  SET CustRec.erib:CustInfo.erib:CustId = PersonIdExt.Value;
						   END IF;
						END FOR;
				
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:Birthday	     =	inPersonGetClient.PersonInfo.*:BirthDt;
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace	     =	inPersonGetClient.PersonInfo.*:BirthPlace;
			
						FOR PersonIdExt AS inPersonGetClient.PersonInfo.PersonIdExt[] DO 
				   		    IF PersonIdExt.Key = 'IIN' THEN
							   SET CustRec.erib:CustInfo.erib:PersonInfo.erib:TaxId	         =	PersonIdExt.Value;
							END IF;
						END FOR;
			
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:Citizenship	     =	inPersonGetClient.PersonInfo.*:Citizenship;
						--SET CustRec.erib:CustInfo.erib:PersonInfo.erib:AdditionalInfo	 =	' ';
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonRole	     =	'1';
	
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName	         =	inPersonGetClient.PersonInfo.*:PersonName.*:LastName;
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName	     =	inPersonGetClient.PersonInfo.*:PersonName.*:FirstName;
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName	     =	inPersonGetClient.PersonInfo.*:PersonName.*:MiddleName;
	
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdType	         =	'300';
						--SET CustRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdSeries	     =	' ';
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdNum	         =	inPersonGetClient.PersonInfo.*:IdentityCards.*:IdentityCard.*:IdNum;
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedBy	     =	inPersonGetClient.PersonInfo.*:IdentityCards.*:IdentityCard.*:IssuedBy;
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedCode	     =	COALESCE(inPersonGetClient.PersonInfo.*:IdentityCards.*:IdentityCard.*:Code, ' ');
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssueDt	     =	inPersonGetClient.PersonInfo.*:IdentityCards.*:IdentityCard.*:IssueDt;
						SET CustRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:ExpDt	     	 =	inPersonGetClient.PersonInfo.*:IdentityCards.*:IdentityCard.*:ValidTo;
						
						SET LoanRec.erib:BankInfo.erib:AgencyId			  =	'9999';
						SET LoanRec.erib:BankInfo.erib:RegionId  	          =	'38';
						SET LoanRec.erib:BankInfo.erib:RbBrchId           =	'009999';
						
						SET LoanRec.erib:BankAccInfo.erib:IsAnn			      = 'false';
						SET LoanRec.erib:BankAccInfo.erib:StartDt	          = AcctInfo.StartDate;
						SET LoanRec.erib:BankAccInfo.erib:ExpDt	          = AcctInfo.EndDate;
						
						SET LoanRec.erib:Status.erib:StatusCode				=	DefineStatusCode(inLoanAcctGetList.Status.*:StatusCode);
				        SET LoanRec.erib:Status.erib:StatusDesc				=	DefineStatus(inLoanAcctGetList.Status.*:StatusCode);
						IF LoanRec.erib:Status.erib:StatusDesc <> '0' THEN 
						   SET LoanRec.erib:Status.erib:StatusDesc			=	inLoanAcctGetList.Status.*:StatusDesc;
						END IF;
						SET LoanRec.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||inLoanAcctGetList.Status.*:StatusCode||'_'||inLoanAcctGetList.Status.*:StatusDesc ||';'||'PRAGMANEW_'||inPersonGetClient.Status.*:StatusCode||'_'||inPersonGetClient.Status.*:StatusDesc||';';
				   END IF;       
			   END FOR;
			ELSE 
				
				DECLARE status_code CHARACTER;
				DECLARE output_code CHARACTER;
				
				IF inLoanAcctGetList.Status.*:StatusCode = '0' THEN		
					SET LoanRec.erib:Status.erib:StatusCode					=	DefineStatusCode(inLoanAcctGetList.Status.*:StatusCode);
				ELSE
					SET status_code = inLoanAcctGetList.Status.*:StatusCode || ' ' || inLoanAcctGetList.Status.*:StatusDesc;  
					CALL CRC8(status_code,output_code);
					SET LoanRec.erib:Status.erib:StatusCode					=	output_code;
				END IF;
				  														
			    --SET LoanRec.erib:Status.erib:StatusCode				=	DefineStatusCodeInt(inLoanAcctGetList.Status.*:StatusCode);
		        SET LoanRec.erib:Status.erib:StatusDesc				=	DefineStatus(inLoanAcctGetList.Status.*:StatusCode);
				IF LoanRec.erib:Status.erib:StatusDesc <> '0' THEN 
				   SET LoanRec.erib:Status.erib:StatusDesc			=	inLoanAcctGetList.Status.*:StatusDesc;
				END IF;
				SET LoanRec.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||inLoanAcctGetList.Status.*:StatusCode||'_'||inLoanAcctGetList.Status.*:StatusDesc ||';'||'PRAGMANEW_'||inPersonGetClient.Status.*:StatusCode||'_'||inPersonGetClient.Status.*:StatusDesc||';';
			END IF;  				
		END IF;  

		RETURN TRUE;
	END;
END MODULE;




CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_LoanInqRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;

		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.KZGetCalcLoanDeptRs;
		
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef    REFERENCE TO OutputRoot;

		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS outRoot NAMESPACE erib NAME 'LoanInqRs';

		DECLARE varAmount DECIMAL 0.0; 	
		DECLARE varB1 CHARACTER; 	

		SET outRoot.erib:RqUID	=	inRoot.RqUID;
		SET outRoot.erib:RqTm	=	CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss');	
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
			
		IF inRoot.Status.*:StatusCode = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCode(inRoot.Status.*:StatusCode);
		ELSE
			SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
		--SET outRoot.erib:Status.erib:StatusCode				    =	DefineStatusCodeInt(inRoot.Status.*:StatusCode);
		IF  outRoot.erib:Status.erib:StatusCode <> '0' THEN 
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(inRoot.Status.*:StatusCode);
			IF outRoot.erib:Status.erib:StatusDesc = '' THEN 
			   SET outRoot.erib:Status.erib:StatusDesc			=	inRoot.Status.*:StatusDesc;
			END IF;
			SET outRoot.erib:Status.erib:ServerStatusDesc			=	'Pragma_NEW_'||inRoot.Status.*:StatusCode||'_'||inRoot.Status.*:StatusDesc||';';
		ELSE
			DECLARE LoanRec REFERENCE TO outRoot;		
			CREATE LASTCHILD OF outRoot AS LoanRec NAMESPACE erib NAME 'LoanRec';
	
			DECLARE AcctBalFull REFERENCE TO LoanRec.LoanInfo;
			CREATE LASTCHILD OF LoanRec.erib:LoanInfo AS AcctBalFull NAMESPACE erib NAME 'AcctBalFull';
			SET AcctBalFull.erib:BalType    	=	'103'; --inDebt.BalType;
			SET AcctBalFull.erib:BalName	    =	'сумма платежа для закрытия кредита';
	
			FOR inDebt AS inRoot.DebtInfo.DebtRec[] DO
				IF inDebt.BalType = 'B1' THEN  
				  SET varB1 = inDebt.Amount;
				END IF;  
	
				SET varAmount = varAmount + CAST(inDebt.Amount AS DECIMAL);
			END FOR;	
			
			SET AcctBalFull.erib:CurAmt      =	CAST(varAmount AS CHARACTER);			
			SET AcctBalFull.erib:AcctCur	 =	Environment.UserProperties.AcctCur;
			SET AcctBalFull.erib:EffDt	     =	Environment.UserProperties.EffDt;
	
			SET LoanRec.erib:LoanInfo.erib:AcctBalOnDate.erib:BalType   	=	'4';
			SET LoanRec.erib:LoanInfo.erib:AcctBalOnDate.erib:BalName	    =	'Сумма задолженности по основному долгу по сроку';
			SET LoanRec.erib:LoanInfo.erib:AcctBalOnDate.erib:CurAmt	    =	varB1;
			SET LoanRec.erib:LoanInfo.erib:AcctBalOnDate.erib:AcctCur   	=	Environment.UserProperties.AcctCur;
			SET LoanRec.erib:LoanInfo.erib:AcctBalOnDate.erib:EffDt	        =	Environment.UserProperties.EffDt;
		END IF; 

		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardBlockRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.KZWAYCardBlockRq;		
		DECLARE inRootT REFERENCE TO InputRoot.XMLNSC.KZWAYCardBlockRs;		
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef REFERENCE TO OutputRoot;
		
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<].*[<];
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS outRoot NAMESPACE erib NAME 'CardBlockRs';
		
		SET outRoot.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	=	CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss');
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
		--SET outRoot.erib:Status.erib:StatusCode				=	DefineStatusCodeInt(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		SET outRoot.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText)||';';
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardUnblockRq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.KZWAYCardUnblockRq;		
		DECLARE inRootT REFERENCE TO InputRoot.XMLNSC.KZWAYCardUnblockRs;		
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef REFERENCE TO OutputRoot;
		
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<].*[<];

		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS outRoot NAMESPACE erib NAME 'CardUnblockRs';
		
		SET outRoot.erib:RqUID	  =	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  =	CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd''T''HH:mm:ss');
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
		--SET outRoot.erib:Status.erib:StatusCode				=	DefineStatusCodeInt(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		SET outRoot.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText)||';';

		RETURN TRUE;
	END;
END MODULE;

/*
 *  Интерфейс CRFULL(CCAcctFullStmtInqRs) получение полной выписки по карте -- u06068 04.12.2014 
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CCAcctFullStmtInqRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		  
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'CCAcctFullStmtInqRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE cardAcctRec REFERENCE TO oRef;
		
		CREATE LASTCHILD OF oRef AS cardAcctRec NAMESPACE erib NAME 'CardAcctRec';
		
		SET cardAcctRec.erib:FromDate = origMess.FromDate;
		SET cardAcctRec.erib:ToDate   = origMess.ToDate;
		
		DECLARE cardAcctId REFERENCE TO cardAcctRec;
		
		CREATE LASTCHILD OF cardAcctRec AS cardAcctId NAMESPACE erib NAME 'CardAcctId';
		SET cardAcctId.erib:SystemId		=	Environment.UserProperties.SystemId;
		SET cardAcctId.erib:CardAcctIdNum	=	Environment.UserProperties.CardNumber;
		
		DECLARE startBalance REFERENCE TO cardAcctRec;
		
		CREATE LASTCHILD OF cardAcctRec AS startBalance NAMESPACE erib NAME 'StartBalance';		
			IF NOT EXISTS(inRef.DataRs.Stmt.AdditionalStmt.BeginBalance.Balance.Amount[]) THEN
				SET startBalance.erib:CurAmt	 =	'0.00';
			ELSE				
				SET startBalance.erib:CurAmt	 =	inRef.DataRs.Stmt.AdditionalStmt.BeginBalance.Balance.Amount;
			END IF;
			IF NOT EXISTS(inRef.DataRs.Stmt.AdditionalStmt.BeginBalance.Balance.Currency[]) THEN
				SET startBalance.erib:AcctCur	 =	inRef.DataRs.Balances.Balance.Currency;
			ELSE				
				SET startBalance.erib:AcctCur 	 =	inRef.DataRs.Stmt.AdditionalStmt.BeginBalance.Balance.Currency;
			END IF;
		
		DECLARE endBalance REFERENCE TO cardAcctRec;
		
		CREATE LASTCHILD OF cardAcctRec AS endBalance NAMESPACE erib NAME 'EndBalance';
		SET endBalance.erib:CurAmt	 =	'0.00';
		SET endBalance.erib:AcctCur =	COALESCE(inRef.DataRs.Stmt.AdditionalStmt.BeginBalance.Balance.Currency, inRef.DataRs.Balances.Balance.Currency);
		
		DECLARE cAcctStmtRec REFERENCE TO cardAcctRec;
		DECLARE origCurAmt REFERENCE TO cardAcctRec;
		DECLARE operationAmt REFERENCE TO cardAcctRec;
		DECLARE remaindAmt REFERENCE TO cardAcctRec;
		DECLARE feeAmt REFERENCE TO cardAcctRec;
		
		FOR acctStmt AS inRef.DataRs.Stmt.AdditionalStmt.StmtItem[] DO
		
			CREATE LASTCHILD OF cardAcctRec AS cAcctStmtRec NAMESPACE erib NAME 'CCAcctStmtRec';
			
			SET cAcctStmtRec.erib:EffDate   		= REPLACE(SUBSTRING(acctStmt.DocData.LocalDt FROM 0 FOR 20),' ','T');
			SET cAcctStmtRec.erib:DiscDate 		    = acctStmt.DocData.Billing.PhaseDate;
			/*IF (THE(SELECT ITEM attr.Value FROM acctStmt.DocData.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode')) = NULL OR
				(THE(SELECT ITEM attr.Value FROM acctStmt.DocData.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode')) = ''  THEN
				SET cAcctStmtRec.erib:Number = 'without_num';
				ELSE
				SET cAcctStmtRec.erib:Number    		= THE(SELECT ITEM attr.Value FROM acctStmt.DocData.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode');
			END IF;*/
			SET cAcctStmtRec.erib:Number    		= COALESCE(THE(SELECT ITEM attr.Value FROM acctStmt.DocData.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode'),'without_num');
			IF NOT EXISTS(acctStmt.DocData.SourceDtls.SIC[]) THEN
				SET cAcctStmtRec.erib:Code				= '000';
			ELSE				
				SET cAcctStmtRec.erib:Code				= acctStmt.DocData.SourceDtls.SIC;	
			END IF;
			IF NOT EXISTS(acctStmt.DocData.Originator.ContractNumber[])THEN
				SET cAcctStmtRec.erib:CorAccountNumber  = '03806767';
				ELSE
				SET cAcctStmtRec.erib:CorAccountNumber  = acctStmt.DocData.Originator.ContractNumber;
			END IF;
			IF acctStmt.PostingDetails.AccountAmount.Type = 'Blocked' THEN
				IF acctStmt.PostingDetails.AccountAmount.Amount < '0' THEN
					SET cAcctStmtRec.erib:TrnType  = 'True';
				ELSE
					SET cAcctStmtRec.erib:TrnType  = 'False';
				END IF;
			ELSEIF acctStmt.PostingDetails.AccountAmount.Type = 'Full' THEN
				IF acctStmt.PostingDetails.AccountAmount.Amount < '0' THEN
					SET cAcctStmtRec.erib:TrnType  = 'False';
				ELSE
					SET cAcctStmtRec.erib:TrnType  = 'True';
				END IF;	
			END IF;	
			IF acctStmt.DocData.Billing.Extra.Type = 'Fee' and NOT EXISTS(cAcctStmtRec.erib:TrnType[])  THEN
				SET cAcctStmtRec.erib:TrnType  = 'False';
			END IF;
				
			IF NOT EXISTS(acctStmt.DocData.Description[]) THEN
				SET cAcctStmtRec.erib:TrnDest  = 'no_trans_description';
				ELSE
				SET cAcctStmtRec.erib:TrnDest  = acctStmt.DocData.Description;
			END IF;

			IF NOT EXISTS(acctStmt.DocData.Description[]) THEN
				SET cAcctStmtRec.erib:TrnSrc  = 'no_trans_description';
				ELSE
				SET cAcctStmtRec.erib:TrnSrc  = acctStmt.DocData.Description;
			END IF;			
			
			CREATE LASTCHILD OF cAcctStmtRec AS origCurAmt NAMESPACE erib NAME 'OrigCurAmt';
			
			IF acctStmt.PostingDetails.AccountAmount.Amount < '0' THEN
				SET origCurAmt.erib:CurAmt	=	REPLACE(acctStmt.PostingDetails.AccountAmount.Amount, '-','');
			ELSE 
			
				IF NOT EXISTS(acctStmt.PostingDetails.AccountAmount.Amount[]) THEN	
					SET origCurAmt.erib:CurAmt	=	'0.00';
				ELSE
					SET origCurAmt.erib:CurAmt	=	acctStmt.PostingDetails.AccountAmount.Amount;
				END IF;	
			END IF;
				
				IF NOT EXISTS(acctStmt.PostingDetails.AccountAmount.Currency[]) THEN	
					SET origCurAmt.erib:AcctCur	=	'KZT';
				ELSE
					SET origCurAmt.erib:AcctCur	=	acctStmt.PostingDetails.AccountAmount.Currency;
				END IF;	
					
			IF EXISTS(acctStmt.DocData.Transaction.Amount[]) THEN
				CREATE LASTCHILD OF cAcctStmtRec AS operationAmt NAMESPACE erib NAME 'OperationAmt';
				SET operationAmt.erib:CurAmt	=	acctStmt.DocData.Transaction.Amount;
				SET operationAmt.erib:AcctCur	=	acctStmt.DocData.Transaction.Currency;
			ELSE
				CREATE LASTCHILD OF cAcctStmtRec AS operationAmt NAMESPACE erib NAME 'OperationAmt';
				SET operationAmt.erib:CurAmt	=	'0.00';
				SET operationAmt.erib:AcctCur	=	'KZT';
			END IF;		
			
			IF EXISTS(acctStmt.PostingDetails.AccountAmount.Currency[]) THEN 
				CREATE LASTCHILD OF cAcctStmtRec AS remaindAmt NAMESPACE erib NAME 'RemaindAmt';
				SET remaindAmt.erib:CurAmt	=	'0.00';
				SET remaindAmt.erib:AcctCur	=	acctStmt.PostingDetails.AccountAmount.Currency;
			ELSE
				CREATE LASTCHILD OF cAcctStmtRec AS remaindAmt NAMESPACE erib NAME 'RemaindAmt';
				SET remaindAmt.erib:CurAmt	=	'0.00';
				SET remaindAmt.erib:AcctCur	=	'KZT';
			END IF;
			
			DECLARE fee CHARACTER THE(SELECT ITEM attr.Amount FROM acctStmt.DocData.Billing.Extra[] AS attr WHERE attr.Type = 'Fee');
				
			IF fee <> '' THEN
				CREATE LASTCHILD OF cAcctStmtRec AS feeAmt NAMESPACE erib NAME 'FeeAmt';
				--SET feeAmt.erib:CurAmt	=	acctStmt.DocData.Transaction.Amount;
				--SET feeAmt.erib:AcctCur	=	acctStmt.DocData.Transaction.Currency;
				
				SET feeAmt.erib:CurAmt		=	THE(SELECT ITEM attr.Amount FROM acctStmt.DocData.Billing.Extra[] AS attr WHERE attr.Type = 'Fee');
				SET feeAmt.erib:AcctCur		=	THE(SELECT ITEM attr.Currency FROM acctStmt.DocData.Billing.Extra[] AS attr WHERE attr.Type = 'Fee');
			ELSE
				CREATE LASTCHILD OF cAcctStmtRec AS feeAmt NAMESPACE erib NAME 'FeeAmt';
				--SET feeAmt.erib:CurAmt	=	acctStmt.DocData.Transaction.Amount;
				--SET feeAmt.erib:AcctCur	=	acctStmt.DocData.Transaction.Currency;
				
				SET feeAmt.erib:CurAmt		=	'0.00';
				SET feeAmt.erib:AcctCur		=	'KZT';
			END IF; 
		END FOR;	
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET cardAcctRec.erib:Status.erib:StatusCode				=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET cardAcctRec.erib:Status.erib:StatusCode				=	output_code;
		END IF;		
			
		IF cardAcctRec.erib:Status.erib:StatusCode <> '0' THEN
			SET cardAcctRec.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		END IF;	 
		SET cardAcctRec.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);
		
		RETURN TRUE;
	END;
END MODULE;

/*
 *  Интерфейс CRDWI(CardAcctDInqRq) получение детальной информации о карте -- u06068 06.12.2014
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardAcctDInqRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
	
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'CardAcctDInqRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE bankAcctRec REFERENCE TO oRef;
		
			CREATE LASTCHILD OF oRef AS bankAcctRec NAMESPACE erib NAME 'BankAcctRec';
		
		DECLARE bankAcctStatus REFERENCE TO bankAcctRec;
		
			CREATE LASTCHILD OF bankAcctRec AS bankAcctStatus NAMESPACE erib NAME 'BankAcctStatus';
			--THE(SELECT ITEM attr.Value FROM inRef.DataRs.ContractRs.Contract.Product.AddInfo.Parm[] AS attr WHERE attr.ParmCode = 'ContractCategory')
			
			IF inRef.DataRs.ContractRs.Info.Status.StatusClass = 'Valid' AND inRef.DataRs.ContractRs.Info.Status.ProductionStatus = 'Ready' THEN
				SET bankAcctStatus.erib:BankAcctStatusCode = 'Active';
			ELSE
				
				IF inRef.DataRs.ContractRs.Info.Status.StatusCode <> '105' AND inRef.DataRs.ContractRs.Info.Status.ProductionStatus = 'Decline' THEN
					SET bankAcctStatus.erib:BankAcctStatusCode = 'Blocked';
				ELSEIF inRef.DataRs.ContractRs.Info.Status.StatusCode <> '105' AND inRef.DataRs.ContractRs.Info.Status.ProductionStatus = 'Invalid' THEN
					SET bankAcctStatus.erib:BankAcctStatusCode = 'Stoped'; 
				ELSEIF inRef.DataRs.ContractRs.Info.Status.StatusCode = '105' AND inRef.DataRs.ContractRs.Info.Status.ProductionStatus = 'Decline' THEN
					SET bankAcctStatus.erib:BankAcctStatusCode = 'TempBlocked'; 		
				ELSE
					SET bankAcctStatus.erib:BankAcctStatusCode = 'Stoped';
				END IF;	
				
			END IF;			
					
			
			--SET bankAcctStatus.erib:BankAcctStatusCode = StatusGet(inRef.DataRs.ContractRs.Info.Status.StatusClass,inRef.DataRs.ContractRs.Info.Status.StatusCode);
			SET bankAcctStatus.erib:StatusDesc  	   = inRef.DataRs.ContractRs.Info.Status.StatusDetails;
		
		DECLARE cardAcctId REFERENCE TO bankAcctRec;
		
		CREATE LASTCHILD OF bankAcctRec AS cardAcctId NAMESPACE erib NAME 'CardAcctId';
		
		    DECLARE vAT01         INTEGER;
			DECLARE vAT02         INTEGER; 
			DECLARE vAT03         CHARACTER;
								
		    SET vAT01		= POSITION('IS_CREDIT=' IN inRef.DataRs.ContractRs.Contract.AddContractInfo.ExtraRs);
		    SET vAT01		= vAT01 + 10;
		    SET vAT03		= SUBSTRING(inRef.DataRs.ContractRs.Contract.AddContractInfo.ExtraRs FROM vAT01 FOR 2);
		
		SET cardAcctId.erib:CardNum		  = inRef.DataRs.ContractRs.Contract.ContractIDT.ContractNumber;
		SET cardAcctId.erib:CardType	  = ChangeType(vAT03);
		
		DECLARE temp_type CHARACTER;
								
		SET temp_type = SUBSTRING(inRef.DataRs.ContractRs.Contract.ContractIDT.ContractNumber FROM 1 FOR 1);
								
		IF temp_type = '5' THEN
			SET cardAcctId.erib:CardLevel					=   'MS';
		ELSEIF temp_type = '4' THEN
			SET cardAcctId.erib:CardLevel					=   'VC';
		END IF;	
				
		--SET cardAcctId.erib:CardLevel 	  = '';
		--SET cardAcctId.erib:CardBonusSign = '';
		IF temp_type = '5' THEN
			SET cardAcctId.erib:CardName      				=   'MASTERCARD BUSINESS';--'MASTERCARD MASS';--SUBSTRING(inRef.DataRs.ContractRs.Contract.Product.ProductName FROM 0 FOR 51);  
		ELSEIF temp_type = '4' THEN
			SET cardAcctId.erib:CardName					=   'VISA BUSINESS';--'VISA CLASSIC';
		ELSEIF temp_type = '6' THEN
			SET cardAcctId.erib:CardName					=   'PRO100';--'VISA CLASSIC';
		END IF;
		
		SET cardAcctId.erib:AcctCur 	  = inRef.DataRs.ContractRs.Contract.Currency;
		SET cardAcctId.erib:EndDt		  = GetDate(inRef.DataRs.ContractRs.Contract.ProductionParms.CardExpiry);
		--SET cardAcctId.erib:PmtDt		  = '';	
		SET cardAcctId.erib:IssDt		  = inRef.DataRs.ContractRs.Contract.DateOpen;
		SET cardAcctId.erib:CardHolder	  = inRef.DataRs.ContractRs.Contract.PlasticInfo.FirstName || ' ' || inRef.DataRs.ContractRs.Contract.PlasticInfo.LastName;
		--SET cardAcctId.erib:UNICardType   = '';
		--SET cardAcctId.erib:UNIAcctType   = '';
		SET cardAcctId.erib:CardAccount.erib:SystemId 		  = 'BP_WAY'; 
		SET cardAcctId.erib:CardAccount.erib:AcctId   		  = inRef.DataRs.ContractRs.Contract.MainContract.ContractIDT.ContractNumber;
		SET cardAcctId.erib:CardAccount.erib:BankInfo.erib:RbBrchId = '009999';
		
		DECLARE custInfo REFERENCE TO cardAcctId;
 		
 		CREATE LASTCHILD OF cardAcctId AS custInfo NAMESPACE erib NAME 'CustInfo';
 		SET custInfo.erib:CustId	= inRef.DataRs.ContractRs.Contract.ContractIDT.Client.ClientInfo.ClientNumber;
		
		DECLARE personInfo REFERENCE TO custInfo;
		
		CREATE LASTCHILD OF custInfo AS personInfo NAMESPACE erib NAME 'PersonInfo';
		SET personInfo.erib:Birthday		= inRef.DataRs.ContractRs.Contract.ContractIDT.Client.ClientInfo.BirthDate;
		SET personInfo.erib:BirthPlace		= inRef.DataRs.ContractRs.Contract.ContractIDT.Client.ClientInfo.BirthPlace;
		SET personInfo.erib:TaxId			= inRef.DataRs.ContractRs.Contract.ContractIDT.Client.AddInfo.AddInfo01;
		SET personInfo.erib:Citizenship		= inRef.DataRs.ContractRs.Contract.ContractIDT.Client.AddInfo.AddInfo03;
		--SET personInfo.erib:AdditionalInfo	= '';--inRef.DataRs.ContractRs.Contract.ContractIDT.Client.ClientInfo.AddInfo01;
		SET personInfo.erib:PersonName.erib:LastName   = inRef.DataRs.ContractRs.Contract.ContractIDT.Client.ClientInfo.LastName;
		SET personInfo.erib:PersonName.erib:FirstName  = inRef.DataRs.ContractRs.Contract.ContractIDT.Client.ClientInfo.FirstName;
		SET personInfo.erib:PersonName.erib:MiddleName = inRef.DataRs.ContractRs.Contract.ContractIDT.Client.ClientInfo.MiddleName;
		
		--SET personInfo.erib:IdentityCard.erib:IdSeries		=	'';		
		SET personInfo.erib:IdentityCard.erib:IdNum				= inRef.DataRs.ContractRs.Contract.ContractIDT.Client.ClientInfo.RegNumber;
		
		--SET personInfo.erib:ContactInfo.erib:EmailAddr          = ''; 
		--SET personInfo.erib:ContactInfo.erib:MessageDeliveryTyp = '';
		
		SET cardAcctId.erib:BankInfo.erib:BranchId   = '9999';
		SET cardAcctId.erib:BankInfo.erib:AgencyId   = '9999';
		SET cardAcctId.erib:BankInfo.erib:RegionId   = '038';
		SET cardAcctId.erib:BankInfo.erib:RbBrchId   = '009999';
		
		DECLARE cardAcctInfo REFERENCE TO bankAcctRec;
		
		CREATE LASTCHILD OF bankAcctRec AS cardAcctInfo NAMESPACE erib NAME 'CardAcctInfo';
		SET cardAcctInfo.erib:NextReportDate = CAST(CURRENT_TIMESTAMP AS CHARACTER FORMAT 'yyyy-MM-dd');
		SET cardAcctInfo.erib:EndDtForWay	 = inRef.DataRs.ContractRs.Contract.ProductionParms.CardExpiry;
		
		DECLARE acctBal REFERENCE TO bankAcctRec;
		
		--FOR balance AS inRef.DataRs.ContractRs.Info.Balances.Balance[] DO
		-- Avail --	
		CREATE LASTCHILD OF bankAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
						
		SET acctBal.erib:BalType = 'Avail';
		SET acctBal.erib:CurAmt  = THE(SELECT ITEM attr.Amount FROM inRef.DataRs.ContractRs.Info.Balances.Balance[] AS attr WHERE attr.Type = 'AVAILABLE');
		
		-- CR_LIMIT --
		CREATE LASTCHILD OF bankAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
						
		SET acctBal.erib:BalType = 'CR_LIMIT';
		SET acctBal.erib:CurAmt  = THE(SELECT ITEM attr.Amount FROM inRef.DataRs.ContractRs.Info.Balances.Balance[] AS attr WHERE attr.Type = 'CR_LIMIT');
		
		-- AvailPmt --	
		CREATE LASTCHILD OF bankAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
						
		SET acctBal.erib:BalType = 'AvailPmt';
		SET acctBal.erib:CurAmt  = THE(SELECT ITEM attr.Amount FROM inRef.DataRs.ContractRs.Info.Balances.Balance[] AS attr WHERE attr.Type = 'AVAILABLE');
		
		-- AvailCash
		CREATE LASTCHILD OF bankAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
						
		SET acctBal.erib:BalType = 'AvailCash';
		SET acctBal.erib:CurAmt  = THE(SELECT ITEM attr.Amount FROM inRef.DataRs.ContractRs.Info.Balances.Balance[] AS attr WHERE attr.Type = 'AVAILABLE');
		
		-- Debt --
		CREATE LASTCHILD OF bankAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
						
		SET acctBal.erib:BalType = 'Debt';
		SET acctBal.erib:CurAmt  = THE(SELECT ITEM attr.Amount FROM inRef.DataRs.ContractRs.Info.Balances.Balance[] AS attr WHERE attr.Type = 'TOTAL_DUE');
		
		-- MinPmt --
		CREATE LASTCHILD OF bankAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
						
		SET acctBal.erib:BalType = 'MinPmt';
		SET acctBal.erib:CurAmt  = THE(SELECT ITEM attr.Amount FROM inRef.DataRs.ContractRs.Info.Balances.Balance[] AS attr WHERE attr.Type = 'OVD_01');
		
		-- OWN_BALANCE --
		CREATE LASTCHILD OF bankAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
						
		SET acctBal.erib:BalType = 'OWN_BALANCE';
		SET acctBal.erib:CurAmt  = THE(SELECT ITEM attr.Amount FROM inRef.DataRs.ContractRs.Info.Balances.Balance[] AS attr WHERE attr.Type = 'AVAILABLE');
			
		--END FOR;
		
		-- STATUS
			
			
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET bankAcctRec.erib:Status.erib:StatusCode				=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
			--SET bankAcctRec.erib:Status.erib:StatusCode				=	'-110';
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET bankAcctRec.erib:Status.erib:StatusCode				=	output_code;
		END IF;
				
		--SET bankAcctRec.erib:Status.erib:StatusCode				=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF bankAcctRec.erib:Status.erib:StatusCode <> '0' THEN
			SET bankAcctRec.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		END IF;
		
		SET bankAcctRec.erib:Status.erib:ServerStatusDesc			=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);
		
		
		RETURN TRUE;
	END;
END MODULE;

/*
 *  Интерфейс CREXT(CCAcctExtStmtInqRq) получение расширенной выписки по карте	 -- u06068 06.12.2014 
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CCAcctExtStmtInqRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'CCAcctExtStmtInqRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE cardAcctRec REFERENCE TO oRef;
		
		CREATE LASTCHILD OF oRef AS cardAcctRec NAMESPACE erib NAME 'CardAcctRec';
		
		DECLARE cardAcctId REFERENCE TO cardAcctRec;
		
		CREATE LASTCHILD OF cardAcctRec AS cardAcctId NAMESPACE erib NAME 'CardAcctId';
		SET cardAcctId.erib:SystemId	=	Environment.UserProperties.SystemId;
		SET cardAcctId.erib:CardNum		=	Environment.UserProperties.CardNumber;
		
		DECLARE acctBal REFERENCE TO cardAcctRec;
		
		--FOR balance AS inRef.DataRs.Balances.Balance[] DO
			
			-- Avail --
			CREATE LASTCHILD OF cardAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
						
			SET acctBal.erib:BalType = 'Avail';
			SET acctBal.erib:CurAmt  = THE(SELECT ITEM attr.Amount FROM inRef.DataRs.Balances.Balance[] AS attr WHERE attr.Name = 'Available');
			SET acctBal.erib:AcctCur = THE(SELECT ITEM attr.Currency FROM inRef.DataRs.Balances.Balance[] AS attr WHERE attr.Name = 'Available');
			
			-- AvailCash --
			CREATE LASTCHILD OF cardAcctRec AS acctBal NAMESPACE erib NAME 'AcctBal';
						
			SET acctBal.erib:BalType = 'AvailCash';
			SET acctBal.erib:CurAmt  = THE(SELECT ITEM attr.Amount FROM inRef.DataRs.Balances.Balance[] AS attr WHERE attr.Name = 'Available');
			SET acctBal.erib:AcctCur = THE(SELECT ITEM attr.Currency FROM inRef.DataRs.Balances.Balance[] AS attr WHERE attr.Name = 'Available');
			
		--END FOR;
		
		DECLARE acctStmtRec REFERENCE TO cardAcctRec;
		
		FOR acct AS inRef.DataRs.Stmt.AdditionalStmt.StmtItem[] DO
			
			CREATE LASTCHILD OF cardAcctRec AS acctStmtRec NAMESPACE erib NAME 'CCAcctStmtRec';
						
			SET acctStmtRec.erib:EffDate					    = REPLACE(SUBSTRING(acct.DocData.LocalDt FROM 0 FOR 20),' ','T');
			SET acctStmtRec.erib:StmtSummAmt.erib:StmtSummType  = GetStmtType(acct.DocData.TransType.TransCode.FinCategory);
			SET acctStmtRec.erib:StmtSummAmt.erib:CurAmt		= acct.DocData.Transaction.Amount;
			SET acctStmtRec.erib:StmtSummAmt.erib:AcctCur		= acct.DocData.Transaction.Currency;
			
			IF acct.PostingDetails.AccountAmount.Type = 'Blocked' THEN
				IF acct.PostingDetails.AccountAmount.Amount > '0' THEN 
					SET acctStmtRec.erib:IsDebit						= 'False';--CompareDebit(acct.PostingDetails.AccountAmount.Amount);
				ELSE
					SET acctStmtRec.erib:IsDebit						= 'True';	
				END IF;
			ELSEIF acct.PostingDetails.AccountAmount.Type = 'Full' THEN
				IF acct.PostingDetails.AccountAmount.Amount < '0' THEN 
					SET acctStmtRec.erib:IsDebit						= 'False';--CompareDebit(acct.PostingDetails.AccountAmount.Amount);
				ELSE
					SET acctStmtRec.erib:IsDebit						= 'True';	
				END IF;		
			END IF;
			--SET acctStmtRec.erib:TrnSrc							= '';
			SET acctStmtRec.erib:TrnDesc						= acct.DocData.Description;
			
			IF acct.PostingDetails.AccountAmount.Amount < '0' THEN
				SET acctStmtRec.erib:OrigCurAmt.erib:CurAmt			= REPLACE(acct.PostingDetails.AccountAmount.Amount, '-','');
			ELSE
				SET acctStmtRec.erib:OrigCurAmt.erib:CurAmt			= acct.PostingDetails.AccountAmount.Amount;
			END IF;	 	
			SET acctStmtRec.erib:OrigCurAmt.erib:AcctCur		= acct.PostingDetails.AccountAmount.Currency;
			
		END FOR;	
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET cardAcctRec.erib:Status.erib:StatusCode				=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET cardAcctRec.erib:Status.erib:StatusCode				=	output_code;
		END IF;
				
		--SET cardAcctRec.erib:Status.erib:StatusCode				=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF cardAcctRec.erib:Status.erib:StatusCode <> '0' THEN
			SET cardAcctRec.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		SET cardAcctRec.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);
		
		RETURN TRUE;
	END;
END MODULE;

/*
 * 	Интерфейс ACC_DI получения детальной информации по вкладу u06068 07.12.2014
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_AcctInqRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<].*[<];
		
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef REFERENCE TO OutputRoot;
						
		DECLARE pragmanew_response  REFERENCE TO Environment.UserProperties.DepositeAcctGetList;
		DECLARE pragmanew_personget REFERENCE TO Environment.UserProperties.PersonGetClient.XMLNSC.*[<];
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS outRoot NAMESPACE erib NAME 'AcctInfoRs';
		
		SET outRoot.erib:RqUID	=	origMess.*:RqUID;
		SET outRoot.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET outRoot.erib:OperUID =	origMess.*:OperUID;
		
		DECLARE detailAcctInfo REFERENCE TO outRoot;
		
		
		IF pragmanew_response.XMLNSC.*[<].Status.*:StatusCode = '0' AND pragmanew_personget.Status.*:StatusCode = '0' THEN 
		
		FOR acctOrigCount AS origMess.*:DepAcctRec[] DO
			FOR acctList AS pragmanew_response.XMLNSC.*[<].AcctList.AcctInfo[] DO 
				
				IF FIELDVALUE(acctOrigCount.*:DepAcctId.*:AcctId) = acctList.AcctId THEN
				
					CREATE LASTCHILD OF outRoot AS detailAcctInfo NAMESPACE erib NAME 'DetailAcctInfo';
			
					SET detailAcctInfo.erib:DepAcctId.erib:SystemId			=	'QPragma';
					SET detailAcctInfo.erib:DepAcctId.erib:AcctId			=	acctList.AcctId;
					
					SET detailAcctInfo.erib:DepAccInfo.erib:AcctCur			= 	acctList.AcctCur;
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:AcctName		    =   acctList.AcctExtAttr.DepAttr.DepType;
					ELSEIF acctList.AcctType = 'ABS_ACCOUNT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:AcctName		    =   acctList.AcctName;
					END IF;
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:AcctCode		    =   'Deposit';
					ELSEIF acctList.AcctType = 'ABS_ACCOUNT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:AcctCode			=	acctList.AcctExtAttr.CurrAttr.Contract;
					END IF;	
					
						
					--SET detailAcctInfo.erib:DepAcctInfo.AcctSubCode		    =   '';
					
					/*DECLARE one INTEGER;
					DECLARE two INTEGER;
					DECLARE third INTEGER;
					
					SET one = THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType = 'INITAMT');
					SET two = THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType = 'TOTINT') ;
					
					SET third = one + two;
					*/
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:CurAmt			    =   REPLACE(acctList.AcctExtAttr.DepAttr.BalanceCarried,'-','');--THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType = 'INITAMT') ;--THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType = 'TOTINT');
					ELSEIF acctList.AcctType = 'ABS_ACCOUNT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:CurAmt				=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType = 'CURR');	
					END IF;
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:MaxSumWrite			    =   REPLACE(acctList.AcctExtAttr.DepAttr.BalanceCarried,'-','');--REPLACE(acctList.AcctExtAttr.DepAttr.BalanceCarried,'-','');--THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType = 'INITAMT') ;--THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType = 'TOTINT');
					ELSEIF acctList.AcctType = 'ABS_ACCOUNT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:MaxSumWrite				=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType = 'CURR');	
					END IF;		
					--SET detailAcctInfo.erib:DepAcctInfo.MaxSumWrite			=	'';
					--SET detailAcctInfo.erib:DepAcctInfo.IrreducibleAmt	    =	'';
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:ClearBalance		=	THE(SELECT ITEM attr.Amount FROM acctList.AcctBalInfo.BalanceRec[] AS attr WHERE attr.BalType = 'INITAMT');
					END IF;
					--SET detailAcctInfo.erib:DepAcctInfo.erib:MaxBalance			=	'';
					
					--SET detailAcctInfo.erib:DepAcctInfo.erib:InterestOnDeposit.erib:AcctId	=	'';
					--SET detailAcctInfo.erib:DepAcctInfo.erib:InterestOnDeposit.erib:CardNum =   '';
					
					DECLARE date_one CHARACTER;
					DECLARE date_one_month INTEGER;
					DECLARE date_one_days INTEGER;
					DECLARE date_two CHARACTER;
					DECLARE date_two_month INTEGER;
					DECLARE date_two_days INTEGER;
					DECLARE period CHARACTER;
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET date_one = acctList.EndDate;
						SET date_one_month = EXTRACT(MONTH FROM CAST(acctList.EndDate AS DATE FORMAT 'yyyy-MM-dd'));
						SET date_one_days = EXTRACT(DAY FROM CAST(acctList.EndDate AS DATE FORMAT 'yyyy-MM-dd'));
					END IF;
					
					SET date_two =  acctList.StartDate;
					SET date_two_month = EXTRACT(MONTH FROM CAST(acctList.StartDate AS DATE FORMAT 'yyyy-MM-dd'));
					SET date_two_days = EXTRACT(DAY FROM CAST(acctList.StartDate AS DATE FORMAT 'yyyy-MM-dd'));
		 			   
					--CALL intervalD(date_one_year,date_one_month,date_one_days,date_two_year,date_two_month,date_two_days,period);		
					CALL hash_one(date_one,date_two,period);
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:Period				= 	period;--SUBSTRING(acctList.EndDate FROM 9 FOR 2)  SUBSTRING(acctList.StartDate FROM 9 FOR 2);
					END IF;
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:Rate				=	acctList.AcctExtAttr.DepAttr.DepRate;
					END IF;
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:EffRate			=	acctList.AcctExtAttr.DepAttr.EffRate;
					END IF;
					
					SET detailAcctInfo.erib:DepAccInfo.erib:OpenDate			=	acctList.StartDate;
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:EndDate			=	acctList.EndDate;
					END IF;
					
					SET detailAcctInfo.erib:DepAccInfo.erib:Status				=	ChangeStatusRS(acctList.AcctStatus.StatusCode);--ChangeStatusRS(acctList.AcctStatus.StatusCode);
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						--SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';
						
						IF acctList.AcctStatus.CanWithdrawal = 'YES' THEN
							
							CASE acctList.AcctStatus.StatusCode
							WHEN 'OPEN' THEN
								SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	'true';	
							WHEN 'CLOSE' THEN
								SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';
							WHEN 'BLOCKED' THEN
								SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';										
							ELSE
								-- Неизвестный тип сообщения
								SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';
							END CASE;
						
						ELSE
							
							CASE acctList.AcctStatus.StatusCode
							WHEN 'OPEN' THEN
								SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';	
							WHEN 'CLOSE' THEN
								SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';
							WHEN 'BLOCKED' THEN
								SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';										
							ELSE
								-- Неизвестный тип сообщения
								SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	'false';
							END CASE;
							
						END IF;	
						
					ELSEIF acctList.AcctType = 'ABS_ACCOUNT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditAllowed	=	GetTrueFalse(acctList.AcctStatus.StatusCode);
					END IF;
					
					IF acctList.AcctType = 'ABS_DEPOSIT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:IsDebitAllowed		=	recodeTrueFalseForSBOL(acctList.AcctExtAttr.DepAttr.CanAdd);
					ELSEIF acctList.AcctType = 'ABS_ACCOUNT' THEN
						SET detailAcctInfo.erib:DepAccInfo.erib:IsDebitAllowed		=	GetTrueFalse(acctList.AcctStatus.StatusCode);
					END IF;
					--SET detailAcctInfo.erib:DepAcctInfo.erib:IsProlongationAllowed	=   '';
					SET detailAcctInfo.erib:DepAccInfo.erib:IsCreditCrossAgencyAllowed	=   'true';
					SET detailAcctInfo.erib:DepAccInfo.erib:IsDebitCrossAgencyAllowed	=	'true';
					--SET detailAcctInfo.erib:DepAcctInfo.erib:IsPassBook					=	'';
					SET detailAcctInfo.erib:DepAccInfo.erib:BankInfo.erib:BranchId		=	'9999';
					SET detailAcctInfo.erib:DepAccInfo.erib:BankInfo.erib:AgencyId		=	'9999';
					SET detailAcctInfo.erib:DepAccInfo.erib:BankInfo.erib:RegionId		=	'038';
					SET detailAcctInfo.erib:DepAccInfo.erib:BankInfo.erib:RbBrchId		=	'009999';
					
					DECLARE custId CHARACTER;
					SET custId = THE(SELECT ITEM attr.Value FROM pragmanew_personget.PersonInfo.PersonIdExt[] AS attr WHERE attr.Key = 'WAY');

						IF custId <> '' THEN
							SET detailAcctInfo.erib:DepAccInfo.erib:CustRec.erib:CustId	=	custId;
						ELSE
							SET detailAcctInfo.erib:DepAccInfo.erib:CustRec.erib:CustId	=	SUBSTRING(THE(SELECT ITEM attr.Value FROM pragmanew_personget.PersonInfo.Extensions.Extension[] AS attr WHERE attr.Code = 'Прим1') AFTER ':');
						END IF;		
					
					DECLARE custInfo REFERENCE TO detailAcctInfo;
					
					CREATE LASTCHILD OF detailAcctInfo.erib:DepAccInfo.erib:CustRec AS custInfo NAMESPACE erib NAME 'CustInfo';
					
					IF pragmanew_personget.PersonInfo.*:BirthDt <> '' THEN
						SET custInfo.erib:PersonInfo.erib:Birthday	=	pragmanew_personget.PersonInfo.*:BirthDt;
					ELSE
						SET custInfo.erib:PersonInfo.erib:Birthday	=	'1900-01-01';
					END IF;
					
					IF pragmanew_personget.PersonInfo.*:BirthPlace <> '' THEN
						SET custInfo.erib:PersonInfo.erib:BirthPlace	=	pragmanew_personget.PersonInfo.*:BirthPlace;
					ELSE
						SET custInfo.erib:PersonInfo.erib:BirthPlace	=	'Нет данных';
					END IF;					
					
					DECLARE taxId CHARACTER;
					
					SET taxId = THE(SELECT ITEM attr.Value FROM pragmanew_personget.PersonInfo.PersonIdExt[] AS attr WHERE attr.Key = 'IIN');
					
					 
						IF taxId <> '' THEN
							SET custInfo.erib:PersonInfo.erib:TaxId	=	taxId;
						ELSE
							SET custInfo.erib:PersonInfo.erib:TaxId	=	origMess.IdNum;
						END IF;		

					
					SET custInfo.erib:PersonInfo.erib:Citizenship		=	pragmanew_personget.PersonInfo.*:Citizenship;
					--SET custInfo.erib:PersonInfo.erib:AdditionalInfo	=	'';
					
					SET custInfo.erib:PersonInfo.erib:PersonName.erib:LastName		=	pragmanew_personget.PersonInfo.*:PersonName.*:LastName;
					SET custInfo.erib:PersonInfo.erib:PersonName.erib:FirstName		=	pragmanew_personget.PersonInfo.*:PersonName.*:FirstName;
					SET custInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName	=	pragmanew_personget.PersonInfo.*:PersonName.*:MiddleName;
					
				 	IF EXISTS(pragmanew_personget.PersonInfo.*:IdentityCards.*:IdentityCard.*:IssueCode[]) AND pragmanew_personget.PersonInfo.*:IdentityCards.*:IdentityCard.*:IssueCode <> '' THEN
						SET custInfo.erib:PersonInfo.erib:IdentityCard.erib:IdType		=	GetTypeStatusPerson(pragmanew_personget.PersonInfo.*:IdentityCards.*:IdentityCard.*:IssueCode);
					ELSE
						SET custInfo.erib:PersonInfo.erib:IdentityCard.erib:IdType		=	'4';--GetTypeStatusPerson('4');
					END IF;	
					--SET custInfo.erib:PersonInfo.erib:IdentityCard.erib:IdSeries	=	'';
					SET custInfo.erib:PersonInfo.erib:IdentityCard.erib:IdNum		=	pragmanew_personget.PersonInfo.*:IdentityCards.*:IdentityCard.*:IdNum;
					SET custInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedBy	=	pragmanew_personget.PersonInfo.*:IdentityCards.*:IdentityCard.*:IssuedBy;
					SET custInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedCode	=	pragmanew_personget.PersonInfo.*:IdentityCards.*:IdentityCard.*:IssueCode;
					SET custInfo.erib:PersonInfo.erib:IdentityCard.erib:IssueDt		=	pragmanew_personget.PersonInfo.*:IdentityCards.*:IdentityCard.*:IssueDt;
					SET custInfo.erib:PersonInfo.erib:IdentityCard.erib:ExpDt		=	pragmanew_personget.PersonInfo.*:IdentityCards.*:IdentityCard.*:ValidTo;
					
					SET detailAcctInfo.erib:Status.erib:StatusCode				=	DefineStatusCode(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
					IF detailAcctInfo.erib:Status.erib:StatusCode <> '0' THEN
						SET detailAcctInfo.erib:Status.erib:StatusDesc		=	DefineStatus(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode); 
					END IF;
					SET detailAcctInfo.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusCode||'_'||pragmanew_response.XMLNSC.*[<].Status.*:Severity ||';'||'PRAGMANEW_'||pragmanew_personget.Status.*:StatusCode||'_'||pragmanew_personget.Status.*:Severity;
				
				END IF;
			
			END FOR;
		END FOR;	
		
		ELSE
			
			DECLARE status_code CHARACTER;
			DECLARE status_code1 CHARACTER;
			DECLARE output_code CHARACTER;
						
			IF pragmanew_response.XMLNSC.*[<].Status.*:StatusCode <> '0' AND pragmanew_personget.Status.*:StatusCode = '0' THEN   
				
				SET status_code = pragmanew_response.XMLNSC.*[<].Status.*:StatusCode || ' ' || pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc;  
				CALL CRC8(status_code,output_code);
				SET detailAcctInfo.erib:Status.erib:StatusCode				=	output_code;
				
				--SET detailAcctInfo.erib:Status.erib:StatusCode				=	DefineStatusCode(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
				IF detailAcctInfo.erib:Status.erib:StatusCode <> '0' THEN
						SET detailAcctInfo.erib:Status.erib:StatusDesc		=	DefineStatus(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode); 
				END IF;
				SET detailAcctInfo.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusCode||'_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc;
			ELSEIF pragmanew_response.XMLNSC.*[<].Status.*:StatusCode = '0' AND pragmanew_personget.Status.*:StatusCode <> '0' THEN
				
				SET status_code = pragmanew_personget.XMLNSC.*[<].Status.*:StatusCode || ' ' || pragmanew_personget.XMLNSC.*[<].Status.*:StatusDesc;  
				CALL CRC8(status_code,output_code);
				SET detailAcctInfo.erib:Status.erib:StatusCode				=	output_code;
				
				--SET detailAcctInfo.erib:Status.erib:StatusCode				=	DefineStatusCode(pragmanew_personget.Status.*:StatusCode);
				IF detailAcctInfo.erib:Status.erib:StatusCode <> '0' THEN
						SET detailAcctInfo.erib:Status.erib:StatusDesc		=	DefineStatus(pragmanew_personget.Status.*:StatusCode); 
				END IF;
				SET detailAcctInfo.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||pragmanew_personget.Status.*:StatusCode||'_'||pragmanew_personget.Status.*:StatusDesc;
			ELSEIF pragmanew_response.XMLNSC.*[<].Status.*:StatusCode <> '0' AND pragmanew_personget.Status.*:StatusCode <> '0' THEN
				
				SET status_code = pragmanew_personget.XMLNSC.*[<].Status.*:StatusCode || ' ' || pragmanew_personget.XMLNSC.*[<].Status.*:StatusDesc;  
				SET status_code1 = pragmanew_response.XMLNSC.*[<].Status.*:StatusCode || ' ' || pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc; 
				CALL CRC8(status_code1,output_code);
				SET detailAcctInfo.erib:Status.erib:StatusCode				=	output_code;
				
				--SET detailAcctInfo.erib:Status.erib:StatusCode				=	DefineStatusCode(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
				IF detailAcctInfo.erib:Status.erib:StatusCode <> '0' THEN
						SET detailAcctInfo.erib:Status.erib:StatusDesc		=	DefineStatus(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode); 
				END IF;
				SET detailAcctInfo.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusCode||'_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc ||';'||'PRAGMANEW_'||pragmanew_personget.Status.*:StatusCode||'_'||pragmanew_personget.Status.*:StatusDesc;
			ELSEIF pragmanew_response.XMLNSC.*[<].Status.*:StatusCode = '0' AND pragmanew_personget.Status.*:StatusCode = '0' THEN
				SET detailAcctInfo.erib:Status.erib:StatusCode				=	DefineStatusCode(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
				IF detailAcctInfo.erib:Status.erib:StatusCode <> '0' THEN
						SET detailAcctInfo.erib:Status.erib:StatusDesc		=	DefineStatus(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode); 
				END IF;
				SET detailAcctInfo.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusCode||'_'||pragmanew_response.XMLNSC.*[<].Status.*:StatusDesc ||';'||'PRAGMANEW_'||pragmanew_personget.Status.*:StatusCode||'_'||pragmanew_personget.Status.*:StatusDesc;
			
			ELSE
				
				SET status_code = '-105' || ' ' || 'Timeout';  
				CALL CRC8(status_code,output_code);
				SET detailAcctInfo.erib:Status.erib:StatusCode				=	output_code;
				
				--SET detailAcctInfo.erib:Status.erib:StatusCode				=	DefineStatusCode(pragmanew_response.XMLNSC.*[<].Status.*:StatusCode);
				IF detailAcctInfo.erib:Status.erib:StatusCode <> '0' THEN
						SET detailAcctInfo.erib:Status.erib:StatusDesc		=	DefineStatus('-105'); 
				END IF;
				SET detailAcctInfo.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||'-105'||'_'||'Timeout';
						
			END IF;		
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;

/*
 * 	Интерфейс TCC переводы с карты на карту WAY -> XferAddRs u06068 11.12.2014
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_XferAddRs_TCC
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'XferAddRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		
		--SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
		END IF;	
		
		IF oRef.erib:Status.erib:StatusCode <> '0' THEN
			SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		
		/*IF NOT EXISTS(inRef.Status[]) THEN
			SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code"||'_'||InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text";
		ELSE
			SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText;
		END IF;*/
		
		DECLARE RRN CHARACTER;
			SET RRN = THE(SELECT ITEM attr.Value FROM inRef.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'SRN');
			
			DECLARE AuthCode CHARACTER;
			SET AuthCode = THE(SELECT ITEM attr.Value FROM inRef.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode');
			
			IF NOT EXISTS(inRef.Status[]) THEN
				SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText)||'_SRN_'||RRN||'_AuthCode_'||COALESCE(AuthCode,'AuthCode_None');
			ELSE
				SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText||'_SRN_'||COALESCE(RRN,'ABSENT SRN');
			END IF;
		
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_BillingPayPrepRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<];	
		
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'BillingPayPrepRs';
		
		-- Если от QP пришел ответ
		IF FIELDNAME(InputRoot.XMLNSC.*[<]) = 'KZGetClientInfoRs' THEN
			
			SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
			SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
			SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
			
			IF FIELDVALUE(inRef.Status.*:StatusCode) <> '0' THEN
				SET status_code = FIELDVALUE(inRef.Status.*:StatusCode) || ' ' || FIELDVALUE(inRef.Status.*:StatusDesc);  
				CALL CRC8(status_code,output_code);
				SET oRef.erib:Status.erib:StatusCode = output_code;
			ELSE
				SET oRef.erib:Status.erib:StatusCode				    =	'0';--DefineStatusCodeBILLING(FIELDVALUE(inRef.Status.*:StatusCode));	
			END IF;
			
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(FIELDVALUE(inRef.Status.*:StatusDesc)); 
			END IF;
			
			IF NOT EXISTS(inRef.Status[]) THEN
				SET oRef.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||FIELDVALUE(inRef.Status.*:StatusCode)||'_'||FIELDVALUE(inRef.Status.*:StatusDesc);
			ELSE
				SET oRef.erib:Status.erib:ServerStatusDesc		=   'PRAGMANEW_'||FIELDVALUE(inRef.Status.*:StatusCode)||'_'||FIELDVALUE(inRef.Status.*:StatusDesc);
			END IF;
			
			CREATE FIRSTCHILD OF OutputRoot.XMLNSC 
			PARSE ( 
				CAST(
					Environment.UserProperties.Source.Body AS BLOB CCSID 1208
				)
				CCSID 1208
				OPTIONS FolderBitStream + ValidateNone); 
			
			
			SET origMess = OutputRoot.XMLNSC.*:DoIFXRq.*:*[<];
			
			SET oRef.erib:SystemId		=	'ebs';--FIELDVALUE(inRef.(XMLNSC.Attribute)"UID");
			
			DECLARE recipientRec REFERENCE TO oRef;
			
			CREATE LASTCHILD OF oRef AS recipientRec NAMESPACE erib NAME 'RecipientRec';
			
			SET recipientRec.erib:CodeRecipientBS	=	FIELDVALUE(origMess.*:RecipientRec.*:CodeRecipientBS);
			SET recipientRec.erib:Name				=	origMess.*:RecipientRec.*:Name;
			SET recipientRec.erib:NotVisibleBankDetails = 'true';
			SET recipientRec.erib:CodeService		=	origMess.*:RecipientRec.*:CodeRecipientBS;
			SET recipientRec.erib:NameService		=	origMess.*:RecipientRec.*:NameService;
			SET recipientRec.erib:TaxId				=	COALESCE(origMess.*:RecipientRec.*:TaxId,NULL);
			SET recipientRec.erib:BIC				=	COALESCE(origMess.*:RecipientRec.*:BIC,NULL);
			SET recipientRec.erib:AcctId			=	COALESCE(origMess.*:RecipientRec.*:AcctId,NULL);			
			
			DECLARE requisites REFERENCE TO oRef;
			DECLARE requisite  REFERENCE TO requisites;
			
			CREATE LASTCHILD OF recipientRec AS requisites NAMESPACE erib NAME 'Requisites';
			
			FOR items AS origMess.*:RecipientRec.*:Requisites.*:Requisite[] DO
				
				IF FIELDVALUE(items.*:NameBS) IN ('Clazz','Id','way4code') THEN 
					CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
							
					SET requisite.erib:NameVisible	= items.*:NameVisible;
					SET requisite.erib:NameBS		= items.*:NameBS; 
					SET requisite.erib:Type			= items.*:Type;
					SET requisite.erib:IsKey		= 'true';
							--SET requisite.erib:IsEditable	= 'true';
					SET requisite.erib:IsVisible	= 'false';
					SET requisite.erib:DefaultValue	= items.*:DefaultValue;
					SET requisite.erib:EnteredData.erib:DataItem = items.*:EnteredData.*:DataItem;
				ELSE
					CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
							
					SET requisite.erib:NameVisible	= items.*:NameVisible;
					SET requisite.erib:NameBS		= items.*:NameBS; 
					SET requisite.erib:Type			= items.*:Type;
					SET requisite.erib:IsKey		= 'true';
							--SET requisite.erib:IsEditable	= 'true';
					SET requisite.erib:IsVisible	= 'true';
					SET requisite.erib:DefaultValue	= items.*:DefaultValue;
					SET requisite.erib:EnteredData.erib:DataItem = items.*:EnteredData.*:DataItem;
				END IF;		
							
			END FOR;
			
				CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
				SET requisite.erib:NameVisible	= 'Ф.И.О';
				SET requisite.erib:NameBS		= 'FIO'; 
				SET requisite.erib:Type			= 'string';
				SET requisite.erib:IsKey		= 'true';
						--SET requisite.erib:IsEditable	= 'true';
				SET requisite.erib:IsVisible	= 'true';
				SET requisite.erib:DefaultValue	= inRef.FIO;
				SET requisite.erib:EnteredData.erib:DataItem = inRef.FIO;
			
				--SET oRef.erib:MadeOperationId = '1';
				SET oRef.erib:WithCommision	=	'false';
			
			SET OutputRoot.XMLNSC.*:DoIFXRq = NULL;
			
			RETURN TRUE;	
		END IF;
		
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		
		
		DECLARE amount BOOLEAN FALSE; 
		
		--SET oRef.erib:Status.erib:StatusCode				    =	DefineStatusCodeBILLING(FIELDVALUE(inRef.Result.Status.(XMLNSC.Attribute)"Id"));
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF inRef.Result.Status.(XMLNSC.Attribute)"Id" = '-1' THEN
			SET status_code = inRef.Result.Status.(XMLNSC.Attribute)"Id" || ' ' || FIELDVALUE(inRef.Result.Status);  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode = output_code;
		ELSEIF inRef.Result.Status.(XMLNSC.Attribute)"Id" NOT IN ('-1','1','-5') THEN		
			SET oRef.erib:Status.erib:StatusCode = '-105';
		ELSEIF inRef.Result.Status.(XMLNSC.Attribute)"Id" = '1'	THEN
			SET oRef.erib:Status.erib:StatusCode = '0';
		ELSE
			SET oRef.erib:Status.erib:StatusCode				    =	DefineStatusCodeBILLING(FIELDVALUE(inRef.Result.Status.(XMLNSC.Attribute)"Id"));	
		END IF;
		
		IF oRef.erib:Status.erib:StatusCode <> '0' THEN
			SET oRef.erib:Status.erib:StatusDesc				=	DefineStatusBILLING(FIELDVALUE(inRef.Result.Status.(XMLNSC.Attribute)"Id")); 
		END IF;
		
		IF NOT EXISTS(inRef.Result.Status[]) THEN
			SET oRef.erib:Status.erib:ServerStatusDesc		=	'BILLING_'||FIELDVALUE(inRef.Result.Status.(XMLNSC.Attribute)"Id")||'_'||FIELDVALUE(inRef.Result.Status);
		ELSE
			SET oRef.erib:Status.erib:ServerStatusDesc		=   'BILLING_'||FIELDVALUE(inRef.Result.Status.(XMLNSC.Attribute)"Id")||'_'||FIELDVALUE(inRef.Result.Status);
		END IF;
		
		IF FIELDVALUE(inRef.Result.Status.(XMLNSC.Attribute)"Id") = '1' THEN
		
			SET oRef.erib:SystemId		=	'ebs';--FIELDVALUE(inRef.(XMLNSC.Attribute)"UID");
			
			DECLARE recipientRec REFERENCE TO oRef;
			
			CREATE LASTCHILD OF oRef AS recipientRec NAMESPACE erib NAME 'RecipientRec';
			
			SET recipientRec.erib:CodeRecipientBS	=	inRef.Code;
			SET recipientRec.erib:Name				=	origMess.RecipientRec.Name;
			SET recipientRec.erib:NotVisibleBankDetails = 'true';
			SET recipientRec.erib:CodeService		=	origMess.RecipientRec.CodeService;
			SET recipientRec.erib:NameService		=	origMess.RecipientRec.NameService;
			SET recipientRec.erib:TaxId				=	COALESCE(THE(SELECT ITEM FIELDVALUE(attr.value) FROM inRef.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'TaxId'),NULL);
			SET recipientRec.erib:BIC				=	COALESCE(THE(SELECT ITEM FIELDVALUE(attr.value) FROM inRef.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'BIC'),NULL);
			SET recipientRec.erib:AcctId			=	COALESCE(THE(SELECT ITEM FIELDVALUE(attr.value) FROM inRef.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'AcctId'),NULL);
			
			DECLARE requisites REFERENCE TO oRef;
			DECLARE requisite  REFERENCE TO requisites;
			
			DECLARE counter INTEGER 1;
			
			DECLARE counting CHARACTER;
			DECLARE ex BOOLEAN FALSE;
			
			CREATE LASTCHILD OF recipientRec AS requisites NAMESPACE erib NAME 'Requisites';
			
			FOR req AS inRef.Body.objects.object[] DO				
				
				DECLARE operation CHARACTER FIELDVALUE(req.(XMLNSC.Attribute)"name"); 
							
				CALL removeDigits(operation,operation);
				
				CASE operation 
					WHEN 'Target' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= 'Target'; 
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsKey		= 'true';
						--SET requisite.erib:IsEditable	= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value"); 
					WHEN 'Amount' THEN 
						
						SET amount = TRUE;
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= 'Amount';--FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Amount'; 
						SET requisite.erib:Type			= 'money';--FIELDVALUE(req.(XMLNSC.Attribute)"type");
						
						IF EXISTS(origMess.*:IsAutoPayment[]) THEN
							SET requisite.erib:IsSum		= null;
							SET requisite.erib:IsVisible	= 'false';
						ELSE
							SET requisite.erib:IsSum		= 'true';
							SET requisite.erib:IsVisible	= 'true';
						END IF;
						SET requisite.erib:DefaultValue	= inRef.Pay.Amount;--FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = inRef.Pay.Amount;--FIELDVALUE(req.(XMLNSC.Attribute)"value"); 
					WHEN 'Invoice' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Invoice';
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						IF FIELDVALUE(req.(XMLNSC.Attribute)"value") <> '' THEN
							SET requisite.erib:IsVisible	= 'true';
							SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
							SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
						ELSE
							SET requisite.erib:IsVisible	= 'false';	
						END IF;
					
					WHEN 'disp' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");	
					
					WHEN 'Docnum' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
					
					WHEN 'Curnum' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
					
					WHEN 'Fior' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");	
						
					WHEN 'Spec' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
					
					WHEN 'Otdel' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
						
					WHEN 'Month' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
						
					WHEN 'FIO' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");	
					
					WHEN 'Regions' THEN
						
						SET amount = TRUE;
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= 'Список регионов';--FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:NameBS	= FIELDVALUE(req.(XMLNSC.Attribute)"name");
						SET requisite.erib:Type			= 'list';--FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:IsEditable   = 'true';
						SET requisite.erib:DefaultValue	= ' ';
						SET requisite.erib:EnteredData.erib:DataItem = ' ';--FIELDVALUE(req.(XMLNSC.Attribute)"value");
						
						DECLARE menu_item REFERENCE TO requisite;
						DECLARE menus REFERENCE TO requisite;
						
						CREATE LASTCHILD OF requisite AS menu_item NAMESPACE erib NAME 'Menu';
						
						FOR objects AS req.objects.object[] DO
						
							--DECLARE subobject CHARACTER FIELDVALUE(objects.(XMLNSC.Attribute)"name");
							CREATE LASTCHILD OF menu_item AS menus NAMESPACE erib NAME 'MenuItem';
							
							SET menus = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
						
						
						END FOR;		
						
					WHEN 'BalanceAmount' THEN	
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'BalanceAmount';
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
					
					WHEN 'parameters' THEN 	
						FOR objects AS req.objects.object[] DO
							 
							 DECLARE suboperation CHARACTER FIELDVALUE(objects.(XMLNSC.Attribute)"name"); 
							 
							 CASE suboperation
							 WHEN 'AccountAddress' THEN
								 CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Адрес/Мекенжайы';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'AccountAddress';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							 WHEN 'IVC_ADDRESS' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Адрес/Мекенжайы';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'ivcaddress';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'Date' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Дата квитанции/Түбіртек күні';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'Date';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'ExpireDate' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Оплатить до/...дейін төлеу';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'ExpireDate';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'tenantCount' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Количество проживающих/Тұратын адам саны';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'tenantCount';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							
							WHEN '1' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Количество проживающих/Тұратын адам саны';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'tenantCount';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									
							WHEN 'HeatingSquare' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Отапливаемая площадь/Ауданы, m²';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'HeatingSquare';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");		
							WHEN '2' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Отапливаемая площадь/Ауданы, m²';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'HeatingSquare';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'IVC_FIO' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Ф.И.О';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'ivcfio';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'LodgerAmount' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Количество проживающих';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'LodgerAmount';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");															
							 END CASE;
							 
						END FOR;

	
												
				END CASE;
				
				DECLARE serviceID CHARACTER;
				DECLARE prevCount CHARACTER;
				DECLARE lastCount CHARACTER;
				
				SET serviceID = '0';
				SET prevCount = '0';
				SET lastCount = '0';			
							
				FOR objects AS req.objects.object[] DO
					FOR object AS objects.objects.object[] DO									
					
					/*CASE operation
					WHEN 'Target' THEN
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= 'Target'; 
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsKey		= 'true';
						--SET requisite.erib:IsEditable	= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value"); 
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");	
					WHEN 'Amount' THEN
						
						SET amount = TRUE;
						
						/*CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite'; 
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Amount'; 
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsSum		= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");*/
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= 'Amount';--FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Amount'; 
						SET requisite.erib:Type			= 'money';--FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsSum		= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= inRef.Pay.Amount;--FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = inRef.Pay.Amount;--FIELDVALUE(req.(XMLNSC.Attribute)"value");  
					WHEN 'Invoice' THEN
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Invoice';
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
					WHEN 'BalanceAmount' THEN	
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'BalanceAmount';
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
							
					ELSE
						IF origMess.RecipientRec.CodeRecipientBS IN ('ALSECO','IVC','0004','0137','0229','0232','0465','0619','0679','0695','0697','0698') THEN
							*/
							SET counting = CAST(counter AS CHARACTER);							
							
							CASE FIELDVALUE(object.(XMLNSC.Attribute)"name")
							WHEN 'groupName' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= 'Наименование';--FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  		= 'Field_' || counting || '_NameService';
								SET requisite.erib:Type	   		= FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");	
							WHEN 'Id' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_ServiceID';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
								
								SET ex = TRUE;
								
								IF FIELDVALUE(object.(XMLNSC.Attribute)"value") = '13' OR FIELDVALUE(object.(XMLNSC.Attribute)"value") = '23' THEN
									SET serviceID = '3';
								END IF;							
								
							/*WHEN 'Measure' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_Measure';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");*/	
							WHEN 'MinTariffValue' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_minTariff';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'MidTariffValue' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_midTariff';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");		
							WHEN 'MaxTariffValue' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_maxTariff';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");	
							WHEN 'MinTariffThreshold' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_minTariffThresh';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'MidTariffThreshold' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_midTariffThresh';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'PrevCount' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_prevCount';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
								
								SET prevCount = '1';
								
							WHEN 'LastCount' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_lastCount';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
								
								SET lastCount = '1';
								
							WHEN 'PrevCountDate' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_prevDate';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'LastCountDate' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_lastDate';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'PayCounts' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_payCount';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								IF FIELDVALUE(object.(XMLNSC.Attribute)"value") <> '' THEN
									SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
								ELSE
									SET requisite.erib:DefaultValue	= '0.00';
									SET requisite.erib:EnteredData.erib:DataItem = '0.00';	
								END IF;	
							WHEN 'FixSum' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								--SET requisite.erib:NameBS  = 'Field_' || counting || '_paySum';
								SET requisite.erib:NameBS  = 'Field_' || counting || '_countSum';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								/*IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;*/
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							/*WHEN 'tenantCount' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_tenantCount';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'serviceType' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_serviceType';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");*/
							WHEN 'DebtValue' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title");
								SET requisite.erib:NameBS  = 'Field_' || counting || '_delta';
								SET requisite.erib:Type	   = 'money';--FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								IF FIELDVALUE(object.(XMLNSC.Attribute)"value") <> '' THEN
									SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");	
								ELSE
									SET requisite.erib:DefaultValue	= '0.00';
									SET requisite.erib:EnteredData.erib:DataItem = '0.00';	
								END IF;	
							/*WHEN 'DebtInfo' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title");
								SET requisite.erib:NameBS  = 'Field_' || counting || '_DebtInfo';
								SET requisite.erib:Type	   = 'money';--FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								IF FIELDVALUE(object.(XMLNSC.Attribute)"value") <> '' THEN
									SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");	
								ELSE
									SET requisite.erib:DefaultValue	= '0.00';
									SET requisite.erib:EnteredData.erib:DataItem = '0.00';	
								END IF;	*/
							
							
							/*WHEN 'DebtInfo' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title");
								SET requisite.erib:NameBS  = 'Field_' || counting || '_delta';
								SET requisite.erib:Type	   = 'money';
								SET requisite.erib:IsVisible	= 'true';
								IF FIELDVALUE(object.(XMLNSC.Attribute)"value") <> '' THEN
									
									DECLARE field CHARACTER;
									DECLARE dolg CHARACTER;
									
									SET dolg = SUBSTRING(FIELDVALUE(object.(XMLNSC.Attribute)"value") BEFORE ' ');
									
									CALL removeChar(FIELDVALUE(object.(XMLNSC.Attribute)"value"),field);
										
									IF dolg = 'долг' THEN 
										SET requisite.erib:DefaultValue	= '-'||REPLACE(SUBSTRING(FIELDVALUE(object.(XMLNSC.Attribute)"value") AFTER ' '),',','.');
										SET requisite.erib:EnteredData.erib:DataItem = '-'||REPLACE(SUBSTRING(FIELDVALUE(object.(XMLNSC.Attribute)"value") AFTER ' '),',','.');--FIELDVALUE(object.(XMLNSC.Attribute)"value");	
									ELSE
										SET requisite.erib:DefaultValue	= REPLACE(SUBSTRING(FIELDVALUE(object.(XMLNSC.Attribute)"value") AFTER ' '),',','.');
										SET requisite.erib:EnteredData.erib:DataItem = REPLACE(SUBSTRING(FIELDVALUE(object.(XMLNSC.Attribute)"value") AFTER ' '),',','.');
									END IF;
								ELSE
									SET requisite.erib:DefaultValue	= '0.00';
									SET requisite.erib:EnteredData.erib:DataItem = '0.00';	
								END IF;*/
															
							WHEN 'PaySum' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title");
								--SET requisite.erib:NameBS  = 'Field_' || counting || '_countSum';
								SET requisite.erib:NameBS  = 'Field_' || counting || '_paySum';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								IF inRef.Pay.Amount = '0.0' OR NOT EXISTS(inRef.Pay[]) THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:IsVisible	= 'true';
								IF FIELDVALUE(object.(XMLNSC.Attribute)"value") <> '' THEN
									SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
								ELSE
									SET requisite.erib:DefaultValue	= '0.00';
									SET requisite.erib:EnteredData.erib:DataItem = '0.00';
								END IF;																
								
								IF ex = TRUE THEN																
									CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= '0';
									SET requisite.erib:NameBS  = 'Field_' || counting || '_serviceType';
									SET requisite.erib:Type	   = 'number';
									SET requisite.erib:IsVisible	= 'false';
									
									IF serviceID = '3' AND prevCount = '1' AND lastCount = '1' THEN
										SET requisite.erib:DefaultValue	= '3';
										SET requisite.erib:EnteredData.erib:DataItem = '3';
										SET serviceID = null;
										SET prevCount = null;
										SET lastCount = null;
									ELSEIF prevCount = '1' AND lastCount = '1' THEN
										SET requisite.erib:DefaultValue	= '2';
										SET requisite.erib:EnteredData.erib:DataItem = '2';
										SET serviceID = null;
										SET prevCount = null;
										SET lastCount = null;	
									ELSE
										SET requisite.erib:DefaultValue	= '1';
										SET requisite.erib:EnteredData.erib:DataItem = '1';
										SET serviceID = null;
										SET prevCount = null;
										SET lastCount = null; 
									END IF;
									
									CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= '0'; 
									SET requisite.erib:NameBS  = 'Field_' || counting || '_tenantCount';
									SET requisite.erib:Type	   = 'number';
									SET requisite.erib:IsVisible	= 'false';
									
									FOR items AS inRef.Body.objects.object[] DO
										FOR ref AS items.objects.object[] DO
											CASE FIELDVALUE(ref.(XMLNSC.Attribute)"name")
												WHEN '1' THEN	 
													SET requisite.erib:DefaultValue	= FIELDVALUE(ref.(XMLNSC.Attribute)"value");--THE(SELECT FIELDVALUE(attr.*[<].value) FROM items.objects.object[] AS attr WHERE attr.name = '1');
													--SET requisite.erib:DefaultValue = requisite.erib:DefaultValue.Column0;
													SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(ref.(XMLNSC.Attribute)"value");--THE(SELECT FIELDVALUE(attr.value) FROM items.objects.object[] AS attr WHERE attr.name = '1');
												WHEN 'LodgerAmount' THEN
													SET requisite.erib:DefaultValue	= FIELDVALUE(ref.(XMLNSC.Attribute)"value");--THE(SELECT FIELDVALUE(attr.*[<].value) FROM items.objects.object[] AS attr WHERE attr.name = '1');
													--SET requisite.erib:DefaultValue = requisite.erib:DefaultValue.Column0;
													SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(ref.(XMLNSC.Attribute)"value");--THE(SELECT FIELDVALUE(attr.value) FROM items.objects.object[] AS attr WHERE attr.name = '1');
											END CASE;
										END FOR;
									END FOR;
									
									SET ex = FALSE;
									
								END IF;	
																
							END CASE;							
																				 			
						/*END IF;
						
					END CASE;	*/					
					
					END FOR;				
					
					SET counter = counter + 1;
							
				END FOR;		 
						 	
			END FOR;				
			
			
			IF amount = FALSE THEN
								
					CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
					
					SET requisite.erib:NameVisible  = 'Итоговая Сумма';
					SET requisite.erib:NameBS	    = 'Amount';
					SET requisite.erib:Type		    = 'money';
					IF inRef.Pay.Amount = '0.0' OR NOT EXISTS(inRef.Pay[]) THEN
						SET requisite.erib:IsEditable	= 'true';
					ELSE
						SET requisite.erib:IsSum		= 'true';	
					END IF;	
					
					IF EXISTS(origMess.*:IsAutoPayment[]) THEN
						SET requisite.erib:IsVisible    = 'false';
						SET requisite.erib:IsSum		= null;
					ELSE
						SET requisite.erib:IsVisible    = 'true';
					END IF;	
					
					IF inRef.Pay.Amount = '0.0' OR NOT EXISTS(inRef.Pay[]) THEN
						SET requisite.erib:DefaultValue	= '0.0';		 
						SET requisite.erib:EnteredData.erib:DataItem = '0.0';
					ELSE
						SET requisite.erib:DefaultValue	= inRef.Pay.Amount;		 
						SET requisite.erib:EnteredData.erib:DataItem = inRef.Pay.Amount;
					END IF;		
				
				END IF;	
			
			/*IF origMess.RecipientRec.CodeRecipientBS IN ('ALSECO','IVC','KISC0004','KISC0137','KISC0229','KISC0232','KISC0465','KISC0619','KISC0679','KISC0695','KISC0697','KISC0698') THEN
							
				IF amount = FALSE THEN
								
					CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
					
					SET requisite.erib:NameVisible  = 'Сумма';
					SET requisite.erib:NameBS	    = 'Amount';
					SET requisite.erib:Type		    = 'money';
					IF inRef.Pay.Amount = '0.0' THEN
						SET requisite.erib:IsEditable	= 'true';
					ELSE
						SET requisite.erib:IsSum		= 'true';	
					END IF;	
					
					SET requisite.erib:IsVisible    = 'true';
					IF inRef.Pay.Amount = '0.0' THEN
						SET requisite.erib:DefaultValue	= '0.0';		 
						SET requisite.erib:EnteredData.erib:DataItem = '0.0';
					ELSE
						SET requisite.erib:DefaultValue	= inRef.Pay.Amount;		 
						SET requisite.erib:EnteredData.erib:DataItem = inRef.Pay.Amount;
					END IF;		
				
				END IF;	
			ELSE
				
				CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= 'Сумма';--FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Amount'; 
						SET requisite.erib:Type			= 'money';--FIELDVALUE(req.(XMLNSC.Attribute)"type");
						IF inRef.Pay.Amount = '0.0' THEN
							SET requisite.erib:IsEditable	= 'true';
						ELSE
							SET requisite.erib:IsSum		= 'true';	
						END IF;	
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= inRef.Pay.Amount;--FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = inRef.Pay.Amount;--FIELDVALUE(req.(XMLNSC.Attribute)"value"); 
			
			END IF;*/
			
			IF EXISTS(inRef.Target[]) THEN
				
				CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
				
				SET requisite.erib:NameVisible  = 'Clazz';
				SET requisite.erib:NameBS	    = 'Clazz';
				SET requisite.erib:Type		    = 'string';
				SET requisite.erib:IsVisible    = 'false';
				SET requisite.erib:DefaultValue	= FIELDVALUE(inRef.Target.(XMLNSC.Attribute)"clazz");		 
				SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(inRef.Target.(XMLNSC.Attribute)"clazz");
				
				/*CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
				
				SET requisite.erib:NameVisible  = 'Баланс';
				SET requisite.erib:NameBS	    = 'BalanceAmount';
				SET requisite.erib:Type		    = 'money';
				SET requisite.erib:IsVisible    = 'false';
				SET requisite.erib:DefaultValue	= THE(SELECT attr.(XMLNSC.Attribute)"value" FROM inRef.Body.objects.object[] AS attr WHERE attr.(XMLNSC.Attribute)"name" = 'BalanceAmount'); 
				SET requisite.erib:EnteredData.erib:DataItem = THE(SELECT attr.(XMLNSC.Attribute)"value" FROM inRef.Body.objects.object[] AS attr WHERE attr.(XMLNSC.Attribute)"name" = 'BalanceAmount'); 
				*/
				CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
				
				SET requisite.erib:NameVisible  = 'Id';
				SET requisite.erib:NameBS	    = 'Id';
				SET requisite.erib:Type		    = 'string';
				SET requisite.erib:IsVisible    = 'false';
				SET requisite.erib:DefaultValue	= FIELDVALUE(inRef.Target.(XMLNSC.Attribute)"id");		 
				SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(inRef.Target.(XMLNSC.Attribute)"id");
				
				CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
				
				SET requisite.erib:NameVisible  = 'way4code';
				SET requisite.erib:NameBS	    = 'way4code';
				SET requisite.erib:Type		    = 'string';
				SET requisite.erib:IsVisible    = 'false';
				
				DECLARE dfv CHARACTER THE(SELECT ITEM attr.EnteredData.DataItem FROM origMess.RecipientRec.Requisites.Requisite[] AS attr WHERE attr.NameBS = 'way4code');
				IF dfv <> '' THEN
					SET requisite.erib:DefaultValue	= THE(SELECT ITEM attr.EnteredData.DataItem FROM origMess.RecipientRec.Requisites.Requisite[] AS attr WHERE attr.NameBS = 'way4code');		 
					SET requisite.erib:EnteredData.erib:DataItem = THE(SELECT ITEM attr.EnteredData.DataItem FROM origMess.RecipientRec.Requisites.Requisite[] AS attr WHERE attr.NameBS = 'way4code');
				END IF;
				
				IF EXISTS(inRef.PID[]) THEN
					CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
					
					SET requisite.erib:NameVisible  = 'PID';
					SET requisite.erib:NameBS	    = 'PID';
					SET requisite.erib:Type		    = 'string';
					SET requisite.erib:IsVisible    = 'false';
					SET requisite.erib:DefaultValue	= inRef.PID;		 
					SET requisite.erib:EnteredData.erib:DataItem = inRef.PID;
				END IF;
				
			END IF;
			
			/*DECLARE id CHARACTER;
			DECLARE days CHARACTER;
			DECLARE service CHARACTER 'billingPrepare';	*/		
			
			IF inRef.Result.Commission <> '' THEN
				
				/*SET days = EXTRACT(DAY FROM CURRENT_DATE);
						  	
				--CALL hash(days,service,id);	
				CALL putQueue();	 	
				CALL getID(id);
				
				DECLARE year_number CHARACTER;
				DECLARE year_day CHARACTER;
				
				SET year_number = EXTRACT(DAYOFYEAR FROM CURRENT_DATE); 
				SET year_day    = EXTRACT(YEAR FROM CURRENT_DATE);
				
				DECLARE lone_year CHARACTER SUBSTRING(year_day FROM 4 FOR 1);*/			
				
				SET oRef.erib:WithCommision	=	'true';
				
				/*IF LENGTH(year_number) <> '3' THEN
					---SET oRef.erib:MadeOperationId		=	lone_year || '0' || year_number || '85' || id;
					SET oRef.erib:MadeOperationId		=	lone_year || '0' || year_number || '85' || id;
				ELSE
					SET oRef.erib:MadeOperationId		=	 lone_year || year_number || '85' || id;
				END IF;	*/
				SET oRef.erib:MadeOperationId       =   '1';
				SET oRef.erib:Commission			=	FIELDVALUE(inRef.Result.Commission);
				SET oRef.erib:CommissionCur			=	'KZT';--FIELDVALUE(inRef.Result.Commission.(XMLNSC.Attribute)"currency");				
			ELSE
		
				SET oRef.erib:WithCommision	=	'false';
				--SET oRef.erib:MadeOperationId		=	lone_year || '0' || year_number || '85' || id;
			END IF;
		END IF;
		
		 
		RETURN TRUE;
	
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_FillMqRfh2usr
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyWholeMessage(InputRoot, OutputRoot);
		
		-- Определяем идентификатор системы, в который надо отправить запрос
		DECLARE systemId, adapterType CHARACTER;
		
		-- Создаем заголовок и вставляем переменные для маршрутизации
	 	IF NOT EXISTS(OutputRoot.MQRFH2[]) THEN
			CREATE PREVIOUSSIBLING OF OutputRoot.XMLNSC DOMAIN('MQRFH2') NAME 'MQRFH2';
	 	END IF;
	 	-- Маршрутизация через OperationId в ПМИЛ
	 	SET OutputRoot.MQRFH2.usr.OperationId	= FIELDNAME(OutputRoot.XMLNSC.*[<]);
		
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_XferAddRs_TCD
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'XferAddRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
			
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
		--SET oRef.erib:Status.erib:StatusCode				    =	DefineStatusCodeInt(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF oRef.erib:Status.erib:StatusCode <> '0' THEN
			SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		
		IF NOT EXISTS(inRef.Status[]) THEN
			SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);
		ELSE
			SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText;
		END IF;

        /* !!! TEST !!! */
		---SET oRef.erib:Status.erib:StatusCode = '0';
        /* !!! TEST !!! */	

		IF oRef.erib:Status.erib:StatusCode = '0' or oRef.erib:Status.erib:StatusCode = '-105' or oRef.erib:Status.erib:StatusCode = '-400' THEN -- Good / TimeOut
		   SET oRef.erib:SOAPReplyIdentifier =	Environment.UserProperties.ReplyIdentifier;
		   SET oRef.erib:OperUID 			 =	Environment.UserProperties.OperUID;

 		   SET oRef.erib:WAYOperName 				  = Environment.UserProperties.WAYOperName;
		   SET oRef.erib:WAYContractNumber 			  = Environment.UserProperties.WAYContractNumber;
		   SET oRef.erib:WAYDestinationContractNumber = Environment.UserProperties.WAYDestinationContractNumber;
		   SET oRef.erib:WAYAmount 					  = Environment.UserProperties.WAYAmount;
		   SET oRef.erib:WAYCurrency 				  = Environment.UserProperties.WAYCurrency;
		   SET oRef.erib:WAYRRN						  = Environment.UserProperties.WAYRRN;
		   SET oRef.erib:Purpouse					  = Environment.UserProperties.Purpouse;

           ------------------------------------------------------------------------------------------------
           
		   SET oRef.erib:RbTbBrchId 		= Environment.UserProperties.RbTbBrchId;
		   SET oRef.erib:SenderReference 	= Environment.UserProperties.SenderReference;
		   SET oRef.erib:AmountDB 			= Environment.UserProperties.AmountDB;
		   SET oRef.erib:Details 			= Environment.UserProperties.Details;
		   SET oRef.erib:Number 			= Environment.UserProperties.Number;
		   SET oRef.erib:Name 				= Environment.UserProperties.Name;
		   SET oRef.erib:Account 			= Environment.UserProperties.Account;

		   DECLARE AuthCode CHARACTER;
		   SET AuthCode = THE(SELECT ITEM attr.Value FROM inRef.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode');
		   SET oRef.erib:AuthCode    		= AuthCode;

		   IF oRef.erib:Status.erib:StatusCode = '-105' or oRef.erib:Status.erib:StatusCode = '-400' THEN 
    	      SET oRef.erib:WAY4    			=	'Debet';
		   END IF;
		    
		   PROPAGATE TO TERMINAL 'out1' DELETE NONE; -- in REPEAT(QP/WAY) 
		   RETURN FALSE;
		ELSE -- Bad
		   -- Error	
		   RETURN TRUE; -- ответ об ошибке в SBOL 
		END IF;		

	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_GetPhoneCardsFromWay4Rq
 	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.KZGetPhoneCardsFromWay4Rq;		
		DECLARE inRootT REFERENCE TO InputRoot.XMLNSC.KZGetPhoneCardsFromWay4Rq;	
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.UFXMsg;	
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef REFERENCE TO OutputRoot;
		
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<].*[<];
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.DoIFXRs AS outRoot NAMESPACE erib NAME 'GetPhoneCardsFromWay4Rs';
		
		SET outRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;

		SET outRoot.erib:RqUID	  =	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  =	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET outRoot.erib:OperUID =	COALESCE(Environment.UserProperties.OperUID, ' ');
		DECLARE PhoneCardsList REFERENCE TO outRoot;		
		CREATE LASTCHILD OF outRoot AS PhoneCardsList NAMESPACE erib NAME 'PhoneCardsList';
		DECLARE PhoneItem REFERENCE TO outRoot;
		DECLARE cnt INTEGER;
		SET cnt = 0;
		DECLARE ExtRs CHARACTER;
		DECLARE ExtRs2 INTEGER;
		DECLARE ExtRs3 INTEGER;
		DECLARE cnt2 INTEGER;
		DECLARE ExtRs4 CHARACTER;
		DECLARE ExtRs5 CHARACTER;
		DECLARE ExtRs7 INTEGER;
		DECLARE ExtRs8 INTEGER;
		DECLARE ExtRs6 CHARACTER;
		DECLARE res CHARACTER;
		FOR phones AS inRef.MsgData.Information.DataRs.ContractRs[] DO
          IF (phones.Contract.Product.AddInfo.Parm.ParmCode = 'ContractCategory')  AND (phones.Contract.Product.AddInfo.Parm.Value = 'Card')  THEN
          	SET ExtRs = FIELDVALUE(phones.Contract.AddContractInfo.ExtraRs);
          	
         	SET ExtRs2 = POSITION('ADDR_SMS' IN ExtRs); 
				IF ExtRs2 <> 0 THEN
					SET ExtRs4 = SUBSTRING(ExtRs FROM ExtRs2 FOR 9);
					SET ExtRs3 = ExtRs2 + 10;
					SET ExtRs5 = SUBSTRING(ExtRs FROM ExtRs3 FOR 11);
					CALL removeChar(ExtRs5,res);
					IF LENGTH(res)=11  THEN
					SET ExtRs6 = SUBSTRING(ExtRs FROM ExtRs2 FOR 22);
					SET ExtRs = SUBSTRING(ExtRs AFTER ExtRs6);
					CREATE LASTCHILD OF PhoneCardsList AS PhoneItem NAMESPACE erib NAME 'PhoneItem'; 
					SET PhoneItem.erib:Phone = ExtRs5; 
					SET PhoneItem.erib:PhoneIdentity = ExtRs4; 
					SET PhoneItem.erib:CardAcctId.erib:SystemId = 'BP_WAY';
					SET PhoneItem.erib:CardAcctId.erib:CardNum = phones.Contract.ContractIDT.ContractNumber;
					SET PhoneItem.erib:CardAcctId.erib:BankInfo.erib:RbBrchId = '009999';
					ELSE
						SET ExtRs7 = POSITION(';' IN ExtRs FROM ExtRs2);
						SET ExtRs8 = ExtRs7 - ExtRs2;
						SET ExtRs6 = SUBSTRING(ExtRs FROM ExtRs2 FOR ExtRs8);
						SET ExtRs = SUBSTRING(ExtRs AFTER ExtRs6);
					END IF;
				END IF; 
				
         	SET ExtRs2 = POSITION('ADDR_SMS' IN ExtRs); 
				IF ExtRs2 <> 0 THEN
					SET ExtRs4 = SUBSTRING(ExtRs FROM ExtRs2 FOR 9);
					SET ExtRs3 = ExtRs2 + 10;
					SET ExtRs5 = SUBSTRING(ExtRs FROM ExtRs3 FOR 11);
					CALL removeChar(ExtRs5,res);
					IF LENGTH(res)=11  THEN
					SET ExtRs6 = SUBSTRING(ExtRs FROM ExtRs2 FOR 22);
					SET ExtRs = SUBSTRING(ExtRs AFTER ExtRs6);
					CREATE LASTCHILD OF PhoneCardsList AS PhoneItem NAMESPACE erib NAME 'PhoneItem'; 
					SET PhoneItem.erib:Phone = ExtRs5; 
					SET PhoneItem.erib:PhoneIdentity = ExtRs4; 
					SET PhoneItem.erib:CardAcctId.erib:SystemId = 'BP_WAY';
					SET PhoneItem.erib:CardAcctId.erib:CardNum = phones.Contract.ContractIDT.ContractNumber;
					SET PhoneItem.erib:CardAcctId.erib:BankInfo.erib:RbBrchId = '009999';
					ELSE
						SET ExtRs7 = POSITION(';' IN ExtRs FROM ExtRs2);
						SET ExtRs8 = ExtRs7 - ExtRs2;
						SET ExtRs6 = SUBSTRING(ExtRs FROM ExtRs2 FOR ExtRs8);
						SET ExtRs = SUBSTRING(ExtRs AFTER ExtRs6);
					END IF;
				END IF; 
				
         	SET ExtRs2 = POSITION('ADDR_SMS' IN ExtRs); 
				IF ExtRs2 <> 0 THEN
					SET ExtRs4 = SUBSTRING(ExtRs FROM ExtRs2 FOR 9);
					SET ExtRs3 = ExtRs2 + 10;
					SET ExtRs5 = SUBSTRING(ExtRs FROM ExtRs3 FOR 11);
					CALL removeChar(ExtRs5,res);
					IF LENGTH(res)=11  THEN
					SET ExtRs6 = SUBSTRING(ExtRs FROM ExtRs2 FOR 22);
					SET ExtRs = SUBSTRING(ExtRs AFTER ExtRs6);
					CREATE LASTCHILD OF PhoneCardsList AS PhoneItem NAMESPACE erib NAME 'PhoneItem'; 
					SET PhoneItem.erib:Phone = ExtRs5; 
					SET PhoneItem.erib:PhoneIdentity = ExtRs4; 
					SET PhoneItem.erib:CardAcctId.erib:SystemId = 'BP_WAY';
					SET PhoneItem.erib:CardAcctId.erib:CardNum = phones.Contract.ContractIDT.ContractNumber;
					SET PhoneItem.erib:CardAcctId.erib:BankInfo.erib:RbBrchId = '009999';
					ELSE
						SET ExtRs7 = POSITION(';' IN ExtRs FROM ExtRs2);
						SET ExtRs8 = ExtRs7 - ExtRs2;
						SET ExtRs6 = SUBSTRING(ExtRs FROM ExtRs2 FOR ExtRs8);
						SET ExtRs = SUBSTRING(ExtRs AFTER ExtRs6);
					END IF;
				END IF; 
				
         END IF;   

     	END FOR;
		RETURN TRUE;
	END;
END MODULE;

/*
 * Интерфейс TBP_PAY проводки билингового платежа u06068 16.12.2014 WAY -> SBOLRS -> BILLING
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_BillingPayExecRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'BillingPayExecRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	origMess.OperUID;
		SET oRef.erib:OperRRN = origMess.MadeOperationId;
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF FIELDNAME(InputRoot.XMLNSC.*[<]) = 'UFXMsg_Error' THEN
			--SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(InputRoot.XMLNSC.*[<].Status.StatusCode);
			
			IF InputRoot.XMLNSC.*[<].Status.StatusCode NOT IN ('0','77') THEN
				SET status_code = InputRoot.XMLNSC.*[<].Status.StatusCode || ' ' || InputRoot.XMLNSC.*[<].Status.StatusCode;  
				CALL CRC8(status_code,output_code);
				SET oRef.erib:Status.erib:StatusCode = output_code;			
			ELSE
				SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(InputRoot.XMLNSC.*[<].Status.StatusCode);
			END IF;
			
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(InputRoot.XMLNSC.*[<].Status.StatusCode); 
			END IF;			

			SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc;
		ELSEIF FIELDNAME(InputRoot.XMLNSC.*[<]) = 'Billing_Error' THEN
			--SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCodeBILLING(InputRoot.XMLNSC.*[<].Status.StatusCode);
			
			IF InputRoot.XMLNSC.*[<].Status.StatusCode IN  ('-1','-5') THEN
			SET status_code = InputRoot.XMLNSC.*[<].Status.StatusCode || ' ' || InputRoot.XMLNSC.*[<].Status.StatusCode;  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode = output_code;
			ELSEIF InputRoot.XMLNSC.*[<].Status.StatusCode = '1' THEN		
				SET oRef.erib:Status.erib:StatusCode = '0';
			ELSE --IF InputRoot.XMLNSC.*[<].Status.StatusCode = '1'	THEN
				SET oRef.erib:Status.erib:StatusCode = '-105';
			--ELSE
				--SET oRef.erib:Status.erib:StatusCode				    =	DefineStatusCodeBILLING(FIELDVALUE(inRef.Result.Status.(XMLNSC.Attribute)"Id"));	
			END IF;		
			
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatusBILLING(InputRoot.XMLNSC.*[<].Status.StatusCode); 
			END IF;			

			SET oRef.erib:Status.erib:ServerStatusDesc		=	'BILLING_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc;
		ELSE			
			--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].Status.StatusCode));
			
			IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) NOT IN ('0','77') THEN
				SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
				CALL CRC8(status_code,output_code);
				SET oRef.erib:Status.erib:StatusCode = output_code;			
			ELSE
				SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
			END IF;
			
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].Status.StatusCode)); 
			END IF;
			
			IF NOT EXISTS(inRef.Status[]) THEN
				SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].Status.StatusCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].Status.StatusDesc);
			ELSE
				SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText;
			END IF;
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;

/*
 * Интерфейс TDC перевод денежных c текущего счета\депозита на свою карту (карт-счет) между счетами одного клиента u06068 20.12.2014
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_XferAddRs_TDC
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'XferAddRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		SET oRef.erib:OperRRN = Environment.UserProperties.OperRRN;
		
		IF FIELDNAME(InputRoot.XMLNSC.*[<]) = 'UFXMsg_Error' THEN
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
			
			IF InputRoot.XMLNSC.*[<].Status.StatusCode = '0' THEN		
				SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(InputRoot.XMLNSC.*[<].Status.StatusCode);
					
			ELSE
				SET status_code = InputRoot.XMLNSC.*[<].Status.StatusCode || ' ' || InputRoot.XMLNSC.*[<].Status.StatusDesc;  
				CALL CRC8(status_code,output_code);
				SET oRef.erib:Status.erib:StatusCode					=	output_code;
			END IF;	
			
			--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCodeFORALL(InputRoot.XMLNSC.*[<].Status.StatusCode);
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatusFORALL(InputRoot.XMLNSC.*[<].Status.StatusCode); 
			END IF;
			
			IF NOT EXISTS(inRef.Status[]) THEN
				SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc||'_RRN_'||InputRoot.XMLNSC.*[<].Status.StatusRRN||'_AuthCode_'||COALESCE(InputRoot.XMLNSC.*[<].Status.StatusAuthCode,'Non AuthCode');
			ELSE
				SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc||'_RRN_'||InputRoot.XMLNSC.*[<].Status.StatusRRN||'_AuthCode_'||COALESCE(InputRoot.XMLNSC.*[<].Status.StatusAuthCode,'Non AuthCode');
			END IF;
			
			-- дОбавил обработку u07357
			/*IF Environment.UserProperties.WithdrawalType = 'true' THEN
						SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:OperationName  = inRef.OperationName;
						SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:CurAmt         = inRef.CurAmt;
						SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:Turnover		=  'CHARGE';
					END IF;*/
		
		ELSEIF FIELDNAME(InputRoot.XMLNSC.*[<]) = 'QPragma_Error' THEN
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
			
			IF InputRoot.XMLNSC.*[<].Status.StatusCode = '0' THEN		
				SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(InputRoot.XMLNSC.*[<].Status.StatusCode);
					-- дОбавил обработку u07357					
			ELSE
				SET status_code = InputRoot.XMLNSC.*[<].Status.StatusCode || ' ' || InputRoot.XMLNSC.*[<].Status.StatusDesc;  
				CALL CRC8(status_code,output_code);
				SET oRef.erib:Status.erib:StatusCode					=	output_code;
			END IF;
			
			--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCodeFORALL(InputRoot.XMLNSC.*[<].Status.StatusCode);
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatusFORALL(InputRoot.XMLNSC.*[<].Status.StatusCode); 
			END IF;
			
			IF NOT EXISTS(inRef.Status[]) THEN
				SET oRef.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc||'_SenderReference'||'_'||InputRoot.XMLNSC.*[<].Status.StatusReference;
			ELSE
				SET oRef.erib:Status.erib:ServerStatusDesc		=   'PRAGMANEW_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc||'_SenderReference'||'_'||InputRoot.XMLNSC.*[<].Status.StatusReference;
			END IF;
			
			IF InputRoot.XMLNSC.*[<].Status.StatusCode = '0' THEN		
			
				IF Environment.UserProperties.WithdrawalType = 'true' THEN
							SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:OperationName  = inRef.OperationName;
							SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:CurAmt         = inRef.CurAmt;
							SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:Turnover		=  'CHARGE';
				END IF;
		
			END IF;
		
		ELSEIF FIELDNAME(InputRoot.XMLNSC.*[<]) = 'QPragma_Block' THEN
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
			
			IF InputRoot.XMLNSC.*[<].Status.StatusCode = '0' THEN		
				SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(InputRoot.XMLNSC.*[<].Status.StatusCode);			
			ELSE
				SET status_code = InputRoot.XMLNSC.*[<].Status.StatusCode || ' ' || InputRoot.XMLNSC.*[<].Status.StatusDesc;  
				CALL CRC8(status_code,output_code);
				SET oRef.erib:Status.erib:StatusCode					=	output_code;
			END IF;
			
			--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCodeFORALL(InputRoot.XMLNSC.*[<].Status.StatusCode);
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatusFORALL(InputRoot.XMLNSC.*[<].Status.StatusCode); 
			END IF;
			
			IF NOT EXISTS(inRef.Status[]) THEN
				SET oRef.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc;--||'_SenderReference'||'_'||InputRoot.XMLNSC.*[<].Status.StatusReference;
			ELSE
				SET oRef.erib:Status.erib:ServerStatusDesc		=   'PRAGMANEW_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc;
			END IF;
			
			/*IF EXISTS(inRef.OperationName[]) AND EXISTS(inRef.CurAmt[]) THEN
				SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:OperationName  = inRef.OperationName;
				SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:CurAmt         = inRef.CurAmt;
			END IF;*/
			IF InputRoot.XMLNSC.*[<].Status.StatusCode = '0' THEN		
			
				IF Environment.UserProperties.WithdrawalType = 'true' THEN
							SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:OperationName  = inRef.OperationName;
							SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:CurAmt         = inRef.CurAmt;
							SET oRef.erib:SrcLayoutInfo.erib:WriteDownOperation.erib:Turnover		=  'CHARGE';
				END IF;
		
			END IF;
			
			
		ELSE
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
			
			IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
				SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
			ELSE
				SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
				CALL CRC8(status_code,output_code);
				SET oRef.erib:Status.erib:StatusCode					=	output_code;
			END IF;
			
			--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCodeFORALL(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc			=	DefineStatusFORALL(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
			END IF;
			
			DECLARE RRN CHARACTER;
			SET RRN = THE(SELECT ITEM attr.Value FROM inRef.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'RRN');
			
			DECLARE AuthCode CHARACTER;
			SET AuthCode = THE(SELECT ITEM attr.Value FROM inRef.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode');
			
			IF NOT EXISTS(inRef.Status[]) THEN
				SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText)||'_RRN_'||RRN||'_AuthCode_'||COALESCE(AuthCode,'AuthCode_None');
			ELSE
				SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText;
			END IF;		
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;



CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_XferAddRs_QP
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'XferAddRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
			
		IF inRoot.Status.*:StatusCode = '0' THEN		
			SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(inRoot.Status.*:StatusCode);
		ELSE
			SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
        ----------------------------------------------------------------------------------------------------------------
		--SET oRef.erib:Status.erib:StatusCode				    =	DefineStatusCodeInt(inRoot.Status.*:StatusCode);
		IF  oRef.erib:Status.erib:StatusCode <> '0' THEN 
			SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(oRef.erib:Status.erib:StatusCode);
			IF oRef.erib:Status.erib:StatusDesc = '' THEN 
			   SET oRef.erib:Status.erib:StatusDesc			=	inRoot.Status.*:StatusDesc;
			END IF;
			SET oRef.erib:Status.erib:ServerStatusDesc			=	'Pragma_NEW_'||inRoot.Status.*:StatusCode||'_'||inRoot.Status.*:StatusDesc;
		END IF; 
        ----------------------------------------------------------------------------------------------------------------
		
		SET oRef.erib:SOAPReplyIdentifier =	Environment.UserProperties.ReplyIdentifier;
		SET oRef.erib:OperUID 			=	Environment.UserProperties.OperUID;

		SET oRef.erib:WAYOperName 				     = Environment.UserProperties.WAYOperName;
		SET oRef.erib:WAYContractNumber 			 = Environment.UserProperties.WAYContractNumber;
		SET oRef.erib:WAYDestinationContractNumber   = Environment.UserProperties.WAYDestinationContractNumber;
		SET oRef.erib:WAYAmount 					 = Environment.UserProperties.WAYAmount;
		SET oRef.erib:WAYCurrency 				     = Environment.UserProperties.WAYCurrency;
		SET oRef.erib:WAYRRN						 = Environment.UserProperties.WAYRRN;
		SET oRef.erib:Purpouse					  	 = Environment.UserProperties.Purpouse;
		SET oRef.erib:WAYSenderReference			 = Environment.UserProperties.SenderReference;

        /* !!! TEST !!! */
		---SET oRef.erib:Status.erib:StatusCode = '-105';
        /* !!! TEST !!! */	

		IF oRef.erib:Status.erib:StatusCode = '0' OR oRef.erib:Status.erib:StatusCode = '-105' OR oRef.erib:Status.erib:StatusCode = '-400' THEN -- Good / TimeOut
		   SET oRef.erib:WAY4    =	'Fin';
		ELSE -- Error
    	   SET oRef.erib:WAY4   =	'Debet';
        END IF;

	    PROPAGATE TO TERMINAL 'out1' DELETE NONE; 
	    RETURN FALSE;
	    
        /* !!! TEST !!! */
		---RETURN TRUE; -- ответ о Таймуте в SBOL RS
        /* !!! TEST !!! */
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_XferAddRs_WAY_SBOL
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'XferAddRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
				
		IF Environment.UserProperties.Status.StatusCode <> '0' THEN 
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
			
			SET status_code = Environment.UserProperties.Status.StatusCode || ' ' || Environment.UserProperties.Status.StatusDesc;  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
						
			--SET oRef.erib:Status.erib:StatusCode              = Environment.UserProperties.Status.StatusCode;
			SET oRef.erib:Status.erib:StatusDesc 			  = Environment.UserProperties.Status.StatusDesc;
			SET oRef.erib:Status.erib:ServerStatusDesc 		  = Environment.UserProperties.Status.ServerStatusDesc || '_SenderReference_' || Environment.UserProperties.SenderReference || ';';
		ELSE
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
				
			IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
				SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
			ELSE
				SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
				CALL CRC8(status_code,output_code);
				SET oRef.erib:Status.erib:StatusCode					=	output_code;
			END IF;
			
			--SET oRef.erib:Status.erib:StatusCode				    =	DefineStatusCodeInt(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
			END IF;
			
			IF NOT EXISTS(inRef.Status[]) THEN
				SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText) || '_SenderReference_' || Environment.UserProperties.SenderReference || ';';
			ELSE
				SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText || '_SenderReference_' || Environment.UserProperties.SenderReference || ';';
			END IF;
		END IF; 
		
		RETURN TRUE; -- ответ о Таймуте в SBOL RS
	END;
END MODULE;



CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardAddSMSRq
  	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		
			
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.UFXMsg.MsgData.Application;	
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef REFERENCE TO OutputRoot;
		
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<].*[<];
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.DoIFXRs AS outRoot NAMESPACE erib NAME 'CardAddSMSRs';
		
		SET outRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;

		SET outRoot.erib:RqUID	  					=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  					=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET outRoot.erib:OperUID 					=	COALESCE(Environment.UserProperties.OperUID, ' ');
		--SET outRoot.erib:Status.erib:StatusCode	  	=	DefineStatusCodeInt(inRef.Status.RespCode);
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
				
		IF inRef.Status.RespCode = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCodeInt(inRef.Status.RespCode);
		ELSE
			SET status_code = inRef.Status.RespCode || ' ' || inRef.Status.RespText;  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
			
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(inRef.Status.RespText); 
		END IF;
		IF NOT EXISTS(inRef.Status[]) THEN
			SET outRoot.erib:Status.erib:ServerStatusDesc		=   'WAY_' || inRef.Status.RespCode || '_' || inRef.Status.RespText || ';';			
		ELSE
			SET outRoot.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText) || ';';
		END IF;
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardChangeSMSRq
   	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		
			
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.UFXMsg.MsgData.Application;	
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef REFERENCE TO OutputRoot;
		
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<].*[<];
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.DoIFXRs AS outRoot NAMESPACE erib NAME 'CardChangeSMSRs';
		
		SET outRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;

		SET outRoot.erib:RqUID	  					=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  					=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET outRoot.erib:OperUID 					=	COALESCE(Environment.UserProperties.OperUID, ' ');
		SET outRoot.erib:Status.erib:StatusCode	  	=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
				
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
			
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(outRoot.erib:Status.erib:StatusCode);
		END IF;
		IF NOT EXISTS(inRef.Status[]) THEN
			SET outRoot.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText) || ';';
		ELSE
			SET outRoot.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText || ';';
		END IF;
		/*	
		IF outRoot.erib:Status.erib:StatusCode = '0' THEN 
		      	SET outRoot.erib:SOAPReplyIdentifier 		= Environment.UserProperties.ReplyIdentifier;
				SET outRoot.erib:OperUID 					= Environment.UserProperties.OperUID;
				SET outRoot.erib:RqUID						= Environment.UserProperties.RqUID; 		
				SET outRoot.erib:BankInfo.erib:RbTbBrchId  	= Environment.UserProperties.RbTbBrchId;
				SET outRoot.erib:CustId.erib:CustPermId 	= Environment.UserProperties.CustPermId ;
				SET outRoot.erib:CardAcctId.erib:SystemId 	= Environment.UserProperties.SystemId;
				SET outRoot.erib:CardAcctId.erib:CardNum 	= Environment.UserProperties.CardNum;
				SET outRoot.erib:CardAcctId.erib:AddrSMS 	= Environment.UserProperties.AddrSMS;
				SET outRoot.erib:RegNumber					= Environment.UserProperties.RegNumber;
			  PROPAGATE TO TERMINAL 'out1' DELETE NONE;
			  RETURN FALSE;		
		END IF;*/
		RETURN TRUE;
	END;
END MODULE;

/*
 * Интерфейс CRLIMLIST отображение списка лимитов u06068 24.12.2014
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardLimListRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'CardLimListRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE cardlimlist REFERENCE TO oRef;
		DECLARE limitem REFERENCE TO cardlimlist;
		
		CREATE LASTCHILD OF oRef AS cardlimlist NAMESPACE erib NAME 'CardLimList';
		
		FOR limItem AS inRef.DataRs.ContractRs.Info.Usages.UsageRs[] DO
			
			CREATE LASTCHILD OF cardlimlist AS limitem NAMESPACE erib NAME 'LimItem';
			
			SET limitem.erib:LimId		 =	limItem.Usage.Code;
			SET limitem.erib:LimCode	 =	limItem.Usage.Code;
			SET limitem.erib:LimVal		 =	limItem.Usage.MaxAmount.Amount;
			SET limitem.erib:LimValCurr  =	limItem.Usage.MaxAmount.Currency;
			 
			SET limitem.erib:LimIsActive =  GetLimitStatus(limItem.Info.Status);
			SET limitem.erib:LimPrevDate =  SUBSTRING(limItem.Usage.ActivityPeriod.DateFrom FROM 0 FOR 11);
			SET limitem.erib:LimLastDate =  SUBSTRING(limItem.Usage.ActivityPeriod.DateTo FROM 0 FOR 11); 
			
		END FOR;
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
			
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
		--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF oRef.erib:Status.erib:StatusCode <> '0' THEN
			SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		
		IF NOT EXISTS(inRef.Status[]) THEN
			SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);
		ELSE
			SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText;
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;

/*
 * Интерфейс CRLIMENABLE включение лимита u06068 25.12.2014 
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardLimEnableRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'CardLimEnableRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;		
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
			
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
		--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF oRef.erib:Status.erib:StatusCode <> '0' THEN
			SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		
		IF NOT EXISTS(inRef.Status[]) THEN
			SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);
		ELSE
			SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText;
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;

/*
 * Интерфейс CRLIMDISABLE отключение лимита u06068 25.12.2014
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardLimDisableRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'CardLimDisableRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;		
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
			
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
		--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF oRef.erib:Status.erib:StatusCode <> '0' THEN
			SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		
		IF NOT EXISTS(inRef.Status[]) THEN
			SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);
		ELSE
			SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText;
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CreditGraphRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];		
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		DECLARE mainRoot REFERENCE TO OutputRoot;
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'CreditGraphRs';
						
		SET outRoot.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		--SET outRoot.SPName	=	Environment.UserProperties.SPName;
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		
		
		DECLARE loanRec REFERENCE TO outRoot;
		DECLARE loanInfo REFERENCE TO outRoot; 
		DECLARE loanAcctId REFERENCE TO outRoot;
		
		CREATE LASTCHILD OF outRoot AS loanRec NAMESPACE erib NAME 'LoanRec';
		CREATE LASTCHILD OF loanRec AS loanInfo NAMESPACE erib NAME 'LoanInfo';
		CREATE LASTCHILD OF loanInfo AS loanAcctId NAMESPACE erib NAME 'LoanAcctId';
		
		SET loanAcctId.erib:AcctId		=	origMess.AcctInfo.AcctId;
		SET loanAcctId.erib:AcctCur	    =   GetCurrency(inRoot.AcctInfo.AcctExtAttr.LoanAttr.LoanCur);
		SET loanAcctId.erib:LnRate		=	inRoot.AcctInfo.AcctExtAttr.LoanAttr.LoanRate;
		SET loanAcctId.erib:AgreemtNum 	=   inRoot.ScheduleInfo.AgrNum;
		SET loanAcctId.erib:DtOpen      =   inRoot.ScheduleInfo.AgrDate; 
		SET loanAcctId.erib:BankInfo.erib:RbBrchId	=	'009999';
		
		DECLARE custRec REFERENCE TO outRoot;
		
		CREATE LASTCHILD OF loanInfo AS custRec NAMESPACE erib NAME 'CustRec';
		
		IF NOT EXISTS(origMess.CustId[]) OR origMess.CustId <> '' THEN 
			SET custRec.erib:CustInfo.erib:CustId  									 = origMess.CustId;
		ELSE
			SET custRec.erib:CustInfo.erib:CustId 									 = THE(SELECT ITEM attr.Value FROM inRoot.AcctInfo.ClientInfo.PersonInfo.PersonIdExt[] AS attr WHERE attr.Key = 'UNK');	
		END IF;
		
		IF NOT EXISTS(origMess.PersonInfo.Birthday[]) OR origMess.PersonInfo.Birthday <> '' THEN	
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:Birthday	 				 = origMess.PersonInfo.Birthday;
		ELSE 
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:Birthday					 = '1900-01-01';
		END IF;
		
		IF NOT EXISTS(origMess.PersonInfo.BirthPlace[]) OR origMess.PersonInfo.BirthPlace <> '' THEN		
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace				 = origMess.PersonInfo.BirthPlace;
		ELSE
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace				 = 'родина';	
		END IF;	
		
		IF NOT EXISTS(origMess.PersonInfo.TaxId[]) OR origMess.PersonInfo.TaxId <> '' THEN
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:TaxId					 = origMess.PersonInfo.TaxId;
		ELSE
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:TaxId					 = '000000000000';
		END IF;	
		
		IF NOT EXISTS(origMess.PersonInfo.Citizenship[]) OR origMess.PersonInfo.Citizenship <> '' THEN	
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:Citizenship		 		 = origMess.PersonInfo.Citizenship;
		ELSE
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:Citizenship				 = 'гражданство';
		END IF;
		
		IF NOT EXISTS(origMess.PersonInfo.PersonName.LastName[]) OR origMess.PersonInfo.PersonName.LastName <> '' THEN
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName	 = origMess.PersonInfo.PersonName.LastName;
		ELSE
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName	 = origMess.PersonInfo.PersonName.LastName;
		END IF;	
		
		
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName	 = origMess.PersonInfo.PersonName.FirstName;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName	 = origMess.PersonInfo.PersonName.MiddleName;
		
		
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdSeries	 = origMess.PersonInfo.IdentityCard.IdSeries;
		
		IF NOT EXISTS(origMess.PersonInfo.IdentityCard.IdNum[]) OR origMess.PersonInfo.IdentityCard.IdNum <> '' THEN
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdNum		 = origMess.PersonInfo.IdentityCard.IdNum;
		ELSE
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdNum		 = '000000000000';
		END IF;
		
		IF NOT EXISTS(origMess.PersonInfo.IdentityCard.IssuedBy[]) OR origMess.PersonInfo.IdentityCard.IssuedBy <> '' THEN		
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedBy	 = origMess.PersonInfo.IdentityCard.IssuedBy;
		ELSE
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedBy	 = 'министерство документов';
		END IF;
				
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedCode	 = origMess.PersonInfo.IdentityCard.IssuedCode;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedCode	 = origMess.PersonInfo.IdentityCard.IssuedCode;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssueDt	 = origMess.PersonInfo.IdentityCard.IssueDt;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:ExpDt		 = origMess.PersonInfo.IdentityCard.ExpDt;
		
		DECLARE loanPayments REFERENCE TO outRoot;
		DECLARE loanPayment  REFERENCE TO outRoot;
		
		CREATE LASTCHILD OF loanInfo AS loanPayments NAMESPACE erib NAME 'LoanPayments';
		
		FOR loanPay AS inRoot.ScheduleInfo.ScheduleRec[] DO
			
			CREATE LASTCHILD OF loanPayments AS loanPayment NAMESPACE erib NAME 'LoanPayment';
			 	
			SET loanPayment.erib:PaymentDt	    = 	loanPay.Date;
			SET loanPayment.erib:BalBefore	 	=	THE(SELECT ITEM attr.Amount FROM loanPay.PayInfo.PayRec[] AS attr WHERE attr.PayType = 'CBB');	
			SET loanPayment.erib:BalAfter		=	THE(SELECT ITEM attr.Amount FROM loanPay.PayInfo.PayRec[] AS attr WHERE attr.PayType = 'CBA');
			SET loanPayment.erib:PaymentSum		=	THE(SELECT ITEM attr.Amount FROM loanPay.PayInfo.PayRec[] AS attr WHERE attr.PayType = 'CV');
			SET loanPayment.erib:LnPaymentSum 	=	THE(SELECT ITEM attr.Amount FROM loanPay.PayInfo.PayRec[] AS attr WHERE attr.PayType = 'CVP');	
			SET loanPayment.erib:LnDays	 		=	loanPay.LoanUseDay;
			 	
		END FOR;
		
		DECLARE bankInfo REFERENCE TO outRoot;
		
		CREATE LASTCHILD OF loanRec AS bankInfo NAMESPACE erib NAME 'BankInfo';
		
		IF NOT EXISTS(origMess.BankInfo.AgencyId[]) OR origMess.BankInfo.AgencyId <> '' THEN
			SET bankInfo.erib:AgencyId		=	origMess.BankInfo.AgencyId;
		ELSE
			SET bankInfo.erib:AgencyId		=	'9999';
		END IF;
		
		IF NOT EXISTS(origMess.BankInfo.RegionId[]) OR origMess.BankInfo.RegionId <> '' THEN		
			SET bankInfo.erib:RegionId		=	origMess.BankInfo.RegionId;
		ELSE
			SET bankInfo.erib:RegionId		=	'038';	
		END IF;	
		
		IF NOT EXISTS(origMess.BankInfo.RbBrchId[]) OR origMess.BankInfo.RbBrchId <> '' THEN
			SET bankInfo.erib:RbBrchId		=	origMess.BankInfo.RbBrchId;
		ELSE
			SET bankInfo.erib:RbBrchId		=	'009999';	
		END IF;
		--DECLARE svcAcctId REFERENCE TO outRoot;
		
		--CREATE LASTCHILD OF outRoot AS svcAcctId NAMESPACE erib NAME 'SvcAcctId';
				
		--SET svcAcctId.erib:SvcAcctNum				=	'';		
		--SET svcAcctId.erib:BankInfo.erib:RbBrchId	=	'009999';
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF inRoot.Status.*:StatusCode = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCode(inRoot.Status.*:StatusCode);
		ELSE
			SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
		--SET outRoot.erib:Status.erib:StatusCode				=	DefineStatusCode(inRoot.Status.*:StatusCode);
		SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(inRoot.Status.*:StatusCode);
		SET outRoot.erib:Status.erib:ServerStatusDesc		=	'Pragma_NEW_'||inRoot.Status.*:StatusCode||'_'||inRoot.Status.*:StatusDesc;
		
		--SET outRoot.DstCurAmt						=	inRoot.DocumentSyncResults.DocumentSyncResult.Document.AcountCR;
		SET outRoot.erib:DstCurAmt						=   Environment.UserProperties.Amount;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardLimEditRs
 	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.UFXMsg.MsgData.Application;	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'CardLimEditRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;		
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
				
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
		END IF;	
		
		--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF oRef.erib:Status.erib:StatusCode <> '0' THEN
			SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		
		IF NOT EXISTS(inRef.Status[]) THEN
			SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);
		ELSE
			SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText;
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardOffSMSRq
 	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		
			
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.UFXMsg.MsgData.Application;	
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef REFERENCE TO OutputRoot;
		
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<].*[<];
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.DoIFXRs AS outRoot NAMESPACE erib NAME 'CardOffSMSRs';
		
		SET outRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;

		SET outRoot.erib:RqUID	  					=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  					=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET outRoot.erib:OperUID 					=	COALESCE(Environment.UserProperties.OperUID, ' ');
		--SET outRoot.erib:Status.erib:StatusCode	  	=	DefineStatusCodeInt(inRef.Status.RespCode);
			
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
				
		IF inRef.Status.RespCode = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCodeInt(inRef.Status.RespCode);
		ELSE
			SET status_code = inRef.Status.RespCode || ' ' || inRef.Status.RespText;  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;	
			
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(inRef.Status.RespText);	
		END IF;
		IF NOT EXISTS(inRef.Status[]) THEN
			SET outRoot.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText) || ';';
		ELSE
			SET outRoot.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText || ';';
		END IF;
			
		RETURN TRUE;
	END;
END MODULE;

CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardChangeSMSRq_Add
   	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		
			
		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.UFXMsg.MsgData.Application;	
		DECLARE outRoot REFERENCE TO OutputRoot; 
		DECLARE oRef REFERENCE TO OutputRoot;
		
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<].*[<];
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC.DoIFXRs AS outRoot NAMESPACE erib NAME 'CardChangeSMSRs';
		
		SET outRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;

		SET outRoot.erib:RqUID	  					=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  					=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET outRoot.erib:OperUID 					=	COALESCE(Environment.UserProperties.OperUID, ' ');
		--SET outRoot.erib:Status.erib:StatusCode	  	=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
				
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
			
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(outRoot.erib:Status.erib:StatusCode); 
		END IF;
		IF NOT EXISTS(inRef.Status[]) THEN
			SET outRoot.erib:Status.erib:ServerStatusDesc		=   'WAY_' || inRef.Status.RespCode || '_' || inRef.Status.RespText || ';';			
		ELSE
			SET outRoot.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText) || ';';
		END IF;
		RETURN TRUE;
	END;
END MODULE;

/*
 *	Интерфейс GASL получения списка подписок по платежным инструментам u06068 14.01.2015 
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_GetAutoSubscriptionListRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		  
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];		
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		DECLARE mainRoot REFERENCE TO OutputRoot;
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'GetAutoSubscriptionListRs';
						
		SET outRoot.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		--SET outRoot.SPName	=	Environment.UserProperties.SPName;
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF inRoot.Status.*:StatusCode = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCode(inRoot.Status.*:StatusCode);
		ELSE
			SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		 
		--SET outRoot.erib:Status.erib:StatusCode	  	=	DefineStatusCode(inRoot.Status.StatusCode);
				
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN 
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatusForINTEGRA(outRoot.erib:Status.erib:StatusCode); 
		END IF;

	    SET outRoot.erib:Status.erib:ServerStatusDesc		=	'INTEGRA_'||inRoot.Status.StatusCode||'_'||inRoot.Status.StatusDesc|| ';';
		
		DECLARE autosubRec REFERENCE TO outRoot;
		DECLARE autoTemplate REFERENCE TO outRoot;
		DECLARE bankAcctRec REFERENCE TO outRoot;
				
		FOR items AS inRoot.AutoPayments.AutoPayment[] DO 
		
			CREATE LASTCHILD OF outRoot AS autosubRec NAMESPACE erib NAME 'AutoSubscriptionRec';		
			
			SET autosubRec.erib:AutoSubscriptionId.erib:SystemId										= 'BP_Integra';
			SET autosubRec.erib:AutoSubscriptionId.erib:AutopayId										= items.AutopayId;		
			
			SET autosubRec.erib:AutoSubscriptionInfo.erib:AutopayName									= items.AutopayInfo.AutopayName;
			SET autosubRec.erib:AutoSubscriptionInfo.erib:ExeEventCode									= items.AutopayInfo.ExeEventCode;
			SET autosubRec.erib:AutoSubscriptionInfo.erib:SummaKindCode									= items.AutopayInfo.SummaKindCode;
			SET autosubRec.erib:AutoSubscriptionInfo.erib:AutopayStatus									= items.AutopayInfo.AutopayStatus;
			SET autosubRec.erib:AutoSubscriptionInfo.erib:AutopayStatusDesc								= items.AutopayInfo.AutopayStatusDesc;
			SET autosubRec.erib:AutoSubscriptionInfo.erib:StartDate										= items.AutopayInfo.StartDate;
			SET autosubRec.erib:AutoSubscriptionInfo.erib:IrreducibleAmt								= items.AutopayInfo.IrreducibleAmt;	
			SET autosubRec.erib:AutoSubscriptionInfo.erib:CurAmt										= items.AutopayInfo.CurAmt;	
			SET autosubRec.erib:AutoSubscriptionInfo.erib:NextPayDate									= items.AutopayInfo.NextPayDate;	
			
			CREATE LASTCHILD OF autosubRec AS autoTemplate NAMESPACE erib NAME 'AutoPaymentTemplate';
			
			
			SET autoTemplate.erib:RecipientRec.erib:Name						= items.Billing.Name;
			SET autoTemplate.erib:RecipientRec.erib:TaxId						= THE(SELECT ITEM FIELDVALUE(attr.value) FROM items.Billing.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'TaxId');
			
			CREATE LASTCHILD OF autoTemplate AS bankAcctRec NAMESPACE erib NAME 'BankAcctRec';
				
				SET bankAcctRec.erib:CardAcctId.erib:SystemId		= 'BP_WAY';
				SET bankAcctRec.erib:CardAcctId.erib:CardNum		= FIELDVALUE(items.CardAcctId.CardNum);
				--SET bankAcctRec.erib:CardAcctId.erib:AcctId		= 
				SET bankAcctRec.erib:CardAcctId.erib:CardType		= items.CardAcctId.CardType;
				SET bankAcctRec.erib:CardAcctId.erib:EndDt			= items.CardAcctId.EndDt;
				--SET bankAcctRec.erib:CardAcctId.erib:CustInfo.erib:CustId		= elements.CustId;
				SET bankAcctRec.erib:CardAcctId.erib:BankInfo.erib:RbBrchId	= items.CardAcctId.RbBrchId;
										
			/*FOR elements AS origMess.BankAcctRec[] DO
				
				
				
			END FOR;	*/	
				
		END FOR;
				
		RETURN TRUE;
	END;
END MODULE;

/*
 *	Интерфейс GAPL получения списка платежей по подписке u06068 15.01.2015
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_GetAutoPaymentListRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];		
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		DECLARE mainRoot REFERENCE TO OutputRoot;
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'GetAutoPaymentListRs';
						
		SET outRoot.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		--SET outRoot.SPName	=	Environment.UserProperties.SPName;
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
		
		IF inRoot.Status.*:StatusCode = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	DefineStatusCode(inRoot.Status.*:StatusCode);
		ELSE
			SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		 
		--SET outRoot.erib:Status.erib:StatusCode	  	=	DefineStatusCode(inRoot.Status.StatusCode);
			
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN 
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatusForINTEGRA(outRoot.erib:Status.erib:StatusCode); 
		END IF;

	    SET outRoot.erib:Status.erib:ServerStatusDesc		=	'INTEGRA_'||inRoot.Status.StatusCode||'_'||inRoot.Status.StatusDesc|| ';';
		
		DECLARE autopaymentRec REFERENCE TO outRoot;
		
		FOR items AS inRoot.AutoPayments.AutoPayment[] DO
			
			CREATE LASTCHILD OF outRoot AS autopaymentRec NAMESPACE erib NAME 'AutoPaymentRec';
			
			IF NOT EXISTS(origMess.*:SystemId[]) THEN
				SET autopaymentRec.erib:AutoPaymentId.erib:SystemId	= 'BP_Integra';
			ELSE
				SET autopaymentRec.erib:AutoPaymentId.erib:SystemId	= origMess.*:SystemId;
			END IF;
			
			SET autopaymentRec.erib:AutoPaymentId.erib:PaymentId = items.Payments.Payment.PaymentId;
			SET autopaymentRec.erib:AutoPaymentInfo.erib:PaymentStatus = items.Payments.Payment.PaymentStatus;
			SET autopaymentRec.erib:AutoPaymentInfo.erib:PaymentStatusDesc = items.Payments.Payment.PaymentStatusDesc;
			SET autopaymentRec.erib:AutoPaymentInfo.erib:CurAmt = items.Payments.Payment.CurAmt;
			SET autopaymentRec.erib:AutoPaymentInfo.erib:Commission = items.Payments.Payment.Commission;
			
			SET autopaymentRec.erib:AutoPaymentInfo.erib:ExecStatus.erib:ExecPaymentDate = items.Payments.Payment.ExecStatus.ExecPaymentDate;
			SET autopaymentRec.erib:AutoPaymentInfo.erib:ExecStatus.erib:NonExecReasonCode = items.Payments.Payment.ExecStatus.NonExecReasonCode;
			SET autopaymentRec.erib:AutoPaymentInfo.erib:ExecStatus.erib:NonExecReasonDesc = items.Payments.Payment.ExecStatus.NonExecReasonDesc;
			
			SET autopaymentRec.erib:RecipientRec.erib:Name = items.Billing.Name;
			
		END FOR;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_AutoSubscriptionModRs
   	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.AutoSubscriptionModRs;
		DECLARE mainRoot REFERENCE TO OutputRoot;	
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'AutoSubscriptionModRs';	
		
		
		SET outRoot.erib:RqUID	  					=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  					=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET outRoot.erib:OperUID 					=	COALESCE(Environment.UserProperties.OperUID, null);
		SET outRoot.erib:Status.erib:StatusCode	  		=	DefineStatusCode(inRef.Status.StatusCode);
			
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
			SET outRoot.erib:Status.erib:StatusDesc		=	DefineStatus(outRoot.Status.StatusCode); 
		END IF;
		IF NOT EXISTS(inRef.Status[]) THEN
			SET outRoot.erib:Status.erib:ServerStatusDesc		=   'Integra_' || inRef.Status.RespCode || '_' || inRef.Status.StatusDesc || ';';			
		END IF;
		RETURN TRUE;
	END;
END MODULE;




CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_AutoSubscriptionStatusModRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE inRef REFERENCE TO InputRoot.XMLNSC.AutoSubscriptionStatusModRs;
		DECLARE mainRoot REFERENCE TO OutputRoot;	
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'AutoSubscriptionStatusModRs';
		
		SET outRoot.erib:RqUID	  					=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  					=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET outRoot.erib:OperUID 					=	COALESCE(Environment.UserProperties.OperUID, ' ');
		SET outRoot.erib:Status.erib:StatusCode	  		=	DefineStatusCode(inRef.Status.StatusCode);
			
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
			SET outRoot.erib:Status.erib:StatusDesc		=	DefineStatus(outRoot.Status.StatusCode); 
		END IF;
		IF NOT EXISTS(inRef.Status[]) THEN
			SET outRoot.erib:Status.erib:ServerStatusDesc		=   'Integra_' || inRef.Status.RespCode || '_' || inRef.Status.StatusDesc || ';';			
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_GetAutoSubscriptionDetailInfoRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];		
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		DECLARE mainRoot REFERENCE TO OutputRoot;
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'GetAutoSubscriptionDetailInfoRs';
						
		SET outRoot.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		--SET outRoot.SPName	=	Environment.UserProperties.SPName;
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		 
		SET outRoot.erib:Status.erib:StatusCode	  	=	DefineStatusCode(inRoot.Status.StatusCode);
			
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN 
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatusForINTEGRA(outRoot.erib:Status.erib:StatusCode); 
		END IF;

	    SET outRoot.erib:Status.erib:ServerStatusDesc		=	'INTEGRA_'||inRoot.Status.StatusCode||'_'||inRoot.Status.StatusDesc|| ';';
		
		DECLARE autoSubRec REFERENCE TO outRoot;
		DECLARE bankAcctReq REFERENCE TO outRoot;
		DECLARE cardAcctId REFERENCE TO outRoot;
		DECLARE custInfo REFERENCE TO outRoot;
		DECLARE bankInfo REFERENCE TO outRoot;
		
		FOR items AS inRoot.AutoPayments.AutoPayment[] DO
			
			CREATE LASTCHILD OF outRoot AS autoSubRec NAMESPACE erib NAME 'AutoSubscriptionRec';
			
			SET autoSubRec.erib:AutoSubscriptionId.erib:SystemId	 = 'BP_Integra';
			SET autoSubRec.erib:AutoSubscriptionId.erib:AutopayId	 = items.AutopayId;
			
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:AutopayName   = items.AutopayInfo.AutopayName;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:ExeEventCode  = items.AutopayInfo.ExeEventCode;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:SummaKindCode = items.AutopayInfo.SummaKindCode;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:AutopayStatus = items.AutopayInfo.AutopayStatus;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:AutopayStatusDesc = items.AutopayInfo.AutopayStatusDesc;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:StartDate		= items.AutopayInfo.StartDate;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:UpdateDate	= items.AutopayInfo.UpdateDate;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:MaxSumWritePerMonth = items.AutopayInfo.MaxSumWritePerMonth;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:IrreducibleAmt	  = items.AutopayInfo.IrreducibleAmt;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:CurAmt			  = items.AutopayInfo.CurAmt;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:NextPayDate		  = items.AutopayInfo.NextPayDate;
			
			IF EXISTS(items.AutopayInfo.ChangeStatus.ReasonCode[]) THEN
				SET autoSubRec.erib:AutoSubscriptionInfo.erib:ChangeStatus.erib:ReasonCode = COALESCE(items.AutopayInfo.ChangeStatus.ReasonCode,NULL);
			END IF;
			
			IF EXISTS(items.AutopayInfo.ChangeStatus.ReasonDesc[]) THEN
				SET autoSubRec.erib:AutoSubscriptionInfo.erib:ChangeStatus.erib:ReasonDesc = COALESCE(items.AutopayInfo.ChangeStatus.ReasonDesc,NULL);
			END IF;
			
			IF EXISTS(items.AutoPpayInfo.ChangeStatus.ChangeDate[]) THEN	
				SET autoSubRec.erib:AutoSubscriptionInfo.erib:ChangeStatus.erib:ChangeDate = COALESCE(items.AutoPpayInfo.ChangeStatus.ChangeDate,NULL);
			END IF;
			
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:ChannelType		= items.AutopayInfo.ChannelType;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:SPNum				= items.AutopayInfo.SPNum;	
			
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:BankInfo.erib:BranchId = items.AutopayInfo.BranchId;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:BankInfo.erib:AgencyId = items.AutopayInfo.AgencyId;
			SET autoSubRec.erib:AutoSubscriptionInfo.erib:BankInfo.erib:RegionId = COALESCE(items.AutopayInfo.RegionId, '038');
			
			DECLARE recipientRec REFERENCE TO outRoot;
			
			SET autoSubRec.erib:AutoPaymentTemplate.erib:SystemId = 'esb';
			
			CREATE LASTCHILD OF autoSubRec.erib:AutoPaymentTemplate AS recipientRec NAMESPACE erib NAME 'RecipientRec';
			
			SET recipientRec.erib:CodeRecipientBS	=	items.Billing.Code;
			SET recipientRec.erib:Name				=	items.Billing.Name;
			SET recipientRec.erib:NotVisibleBankDetails = 'true';
			
			--SET recipientRec.erib:CodeService		=	origMess.RecipientRec.CodeService;
			--SET recipientRec.erib:NameService		=	origMess.RecipientRec.NameService;
			
			SET recipientRec.erib:TaxId				=	COALESCE(THE(SELECT ITEM FIELDVALUE(attr.value) FROM items.Billing.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'TaxId'),NULL);
			SET recipientRec.erib:BIC				=	COALESCE(THE(SELECT ITEM FIELDVALUE(attr.value) FROM items.Billing.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'BIC'),NULL);
			SET recipientRec.erib:AcctId			=	COALESCE(THE(SELECT ITEM FIELDVALUE(attr.value) FROM items.Billing.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'AcctId'),NULL);
			
			SET recipientRec.erib:BankInfo.erib:BranchId			=	items.AutopayInfo.BranchId;
			SET recipientRec.erib:BankInfo.erib:AgencyId			=	items.AutopayInfo.AgencyId;
			SET recipientRec.erib:BankInfo.erib:RegionId			=   COALESCE(items.AutopayInfo.RegionId, '038');
						
			DECLARE requisites REFERENCE TO outRoot;
			DECLARE requisite  REFERENCE TO requisites;
			
			DECLARE counter INTEGER 1;
			DECLARE counting CHARACTER;
			
			CREATE LASTCHILD OF recipientRec AS requisites NAMESPACE erib NAME 'Requisites';
			
			FOR req AS items.Billing.Body.objects.object[] DO				
				
				DECLARE operation CHARACTER FIELDVALUE(req.(XMLNSC.Attribute)"name"); 
				
				CASE operation
					WHEN 'Target' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= 'Target'; 
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsKey		= 'true';
						--SET requisite.erib:IsEditable	= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
				END CASE;
			
			END FOR;
			
			
			CREATE LASTCHILD OF autoSubRec.erib:AutoPaymentTemplate AS bankAcctReq NAMESPACE erib NAME 'BankAcctRec';
			CREATE LASTCHILD OF bankAcctReq AS cardAcctId NAMESPACE erib NAME 'CardAcctId';
			
			SET cardAcctId.erib:SystemId	= 'BP_WAY';
			SET cardAcctId.erib:CardNum  = items.CardAcctId.CardNum;
			--SET cardAcctId.AcctId	
			SET cardAcctId.erib:CardType = items.CardAcctId.CardType;
			SET cardAcctId.erib:EndDt	= items.CardAcctId.EndDt;
			
			CREATE LASTCHILD OF cardAcctId AS custInfo NAMESPACE erib NAME 'CustInfo';
			
			SET custInfo.erib:PersonInfo.erib:PersonName.erib:LastName	= items.CardAcctId.LastName;
			SET custInfo.erib:PersonInfo.erib:PersonName.erib:FirstName = items.CardAcctId.FirstName;
			--SET custInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName
			
			SET custInfo.erib:PersonInfo.erib:ContactInfo.erib:PostAddr.erib:AddrType	= items.CardAcctId.AddrType;
			SET custInfo.erib:PersonInfo.erib:ContactInfo.erib:PostAddr.erib:Addr3		= items.CardAcctId.Addr3;
			
			CREATE LASTCHILD OF cardAcctId AS bankInfo NAMESPACE erib NAME 'BankInfo';
			
			SET bankInfo.erib:RbBrchId		= items.CardAcctId.RbBrchId;
			
			
		END FOR;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_GetAutoPaymentDetailInfoRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		
		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];		
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		DECLARE mainRoot REFERENCE TO OutputRoot;
		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];		
		
		DECLARE amount BOOLEAN;
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'GetAutoPaymentDetailInfoRs';
						
		SET outRoot.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		--SET outRoot.SPName	=	Environment.UserProperties.SPName;
		SET outRoot.erib:OperUID =	Environment.UserProperties.OperUID;
		 
		SET outRoot.erib:Status.erib:StatusCode	  	=	DefineStatusCode(inRoot.Status.StatusCode);
			
		IF outRoot.erib:Status.erib:StatusCode <> '0' THEN 
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatusForINTEGRA(outRoot.erib:Status.erib:StatusCode); 
		END IF;

	    SET outRoot.erib:Status.erib:ServerStatusDesc		=	'INTEGRA_'||inRoot.Status.StatusCode||'_'||inRoot.Status.StatusDesc|| ';';
		
		DECLARE autoPayRec REFERENCE TO outRoot;
		DECLARE recipientRec REFERENCE TO outRoot;
		
		FOR items AS inRoot.AutoPayments.AutoPayment[] DO
			
			DECLARE inRef REFERENCE TO items.Billing;	
			
			CREATE LASTCHILD OF outRoot AS autoPayRec NAMESPACE erib NAME 'AutoPaymentRec';
			
			SET autoPayRec.erib:AutoPaymentId.erib:SystemId		=	'BP_Integra';
			SET autoPayRec.erib:AutoPaymentId.erib:PaymentId	=	items.Payments.Payment.PaymentId;	
			
			SET autoPayRec.erib:AutoPaymentInfo.erib:PaymentStatus 	   = items.Payments.Payment.PaymentStatus;
			SET autoPayRec.erib:AutoPaymentInfo.erib:PaymentStatusDesc = items.Payments.Payment.PaymentStatusDesc;
			SET autoPayRec.erib:AutoPaymentInfo.erib:Commission 	   = items.Payments.Payment.Comission;
			SET autoPayRec.erib:AutoPaymentInfo.erib:MadeOperationId   = items.Payments.Payment.MadeOperationId;
			
			SET autoPayRec.erib:AutoPaymentInfo.erib:ExecStatus.erib:ExecPaymentDate   = items.Payments.Payment.ExecStatus.ExecPaymentDate;
			SET autoPayRec.erib:AutoPaymentInfo.erib:ExecStatus.erib:NonExecReasonCode = items.Payments.Payment.ExecStatus.NonExecReasonCode;
			SET autoPayRec.erib:AutoPaymentInfo.erib:ExecStatus.erib:NonExecReasonDesc = items.Payments.Payment.ExecStatus.NonExecReasonDesc;			
			
			CREATE LASTCHILD OF autoPayRec AS recipientRec NAMESPACE erib NAME 'RecipientRec';
			
			SET recipientRec.erib:CodeRecipientBS		  =	items.Billing.Code;
			SET recipientRec.erib:Name					  =	FIELDVALUE(items.Billing.Name);
			SET recipientRec.erib:NotVisibleBankDetails   = 'true';
			SET recipientRec.erib:BankInfo.erib:BranchId  = '9999';
			SET recipientRec.erib:BankInfo.erib:AgencyId  = '9999';
			SET recipientRec.erib:BankInfo.erib:RegionId  = '038';
			--SET recipientRec.erib:CodeService		=	origMess.RecipientRec.CodeService;
			--SET recipientRec.erib:NameService		=	origMess.RecipientRec.NameService;
			SET recipientRec.erib:TaxId				=	COALESCE(THE(SELECT ITEM FIELDVALUE(attr.value) FROM items.Billing.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'TaxId'),NULL);
			SET recipientRec.erib:BIC				=	COALESCE(THE(SELECT ITEM FIELDVALUE(attr.value) FROM items.Billing.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'BIC'),NULL);
			SET recipientRec.erib:AcctId			=	COALESCE(THE(SELECT ITEM FIELDVALUE(attr.value) FROM items.Billing.Recipient.Requisites.objects.object[] AS attr WHERE attr.name = 'AcctId'),NULL);
			
			DECLARE requisites REFERENCE TO outRoot;
			DECLARE requisite  REFERENCE TO requisites;
			
			DECLARE counter INTEGER 1;
			DECLARE counting CHARACTER;
			
			CREATE LASTCHILD OF recipientRec AS requisites NAMESPACE erib NAME 'Requisites';
			
			FOR req AS items.Billing.Body.objects.object[] DO				
				
				DECLARE operation CHARACTER FIELDVALUE(req.(XMLNSC.Attribute)"name"); 
				
				CASE operation
					WHEN 'Target' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= 'Target'; 
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsKey		= 'true';
						--SET requisite.erib:IsEditable	= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value"); 
					WHEN 'Amount' THEN 
						
						SET amount = TRUE;
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Amount'; 
						SET requisite.erib:Type			= 'money';--FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsSum		= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");--inRef.Pay.Amount;
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");--inRef.Pay.Amount;--FIELDVALUE(req.(XMLNSC.Attribute)"value"); 
					WHEN 'Invoice' THEN
						
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Invoice';
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
						
					WHEN 'BalanceAmount' THEN	
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'BalanceAmount';
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
					
					WHEN 'parameters' THEN 	
						FOR objects AS req.objects.object[] DO
							 
							 DECLARE suboperation CHARACTER FIELDVALUE(objects.(XMLNSC.Attribute)"name"); 
							 
							 CASE suboperation
							 WHEN 'AccountAddress' THEN
								 CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Адрес/Мекенжайы';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'AccountAddress';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							 WHEN 'IVC_ADDRESS' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Адрес/Мекенжайы';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'IVC_ADDRESS';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'Date' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Дата квитанции/Түбіртек күні';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'Date';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'ExpireDate' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Оплатить до/...дейін төлеу';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'ExpireDate';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'tenantCount' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Количество проживающих/Тұратын адам саны';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'tenantCount';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'HeatingSquare' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Отапливаемая площадь/Ауданы, m²';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'HeatingSquare';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");		
							WHEN '2' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Отапливаемая площадь/Ауданы, m²';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'HeatingSquare';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'IVC_FIO' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Ф.И.О';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'IVC_FIO';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");
							WHEN 'LodgerAmount' THEN
							 	CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
									SET requisite.erib:NameVisible	= 'Количество проживающих';--FIELDVALUE(objects.(XMLNSC.Attribute)"title");
									SET requisite.erib:NameBS	= 'LodgerAmount';
									SET requisite.erib:Type			= 'String';
									SET requisite.erib:IsVisible	= 'true';
									SET requisite.erib:IsForBill	= 'true';
									SET requisite.erib:DefaultValue	= FIELDVALUE(objects.(XMLNSC.Attribute)"value");
									SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(objects.(XMLNSC.Attribute)"value");															
							 END CASE;
							 
						END FOR;

	
												
				END CASE;			
				FOR objects AS req.objects.object[] DO
					FOR object AS objects.objects.object[] DO									
					
					/*CASE operation
					WHEN 'Target' THEN
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS		= 'Target'; 
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsKey		= 'true';
						--SET requisite.erib:IsEditable	= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value"); 
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");	
					WHEN 'Amount' THEN
						
						SET amount = TRUE;
						
						/*CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite'; 
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Amount'; 
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsSum		= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");*/
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						
						SET requisite.erib:NameVisible	= 'Amount';--FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Amount'; 
						SET requisite.erib:Type			= 'money';--FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsSum		= 'true';
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= inRef.Pay.Amount;--FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = inRef.Pay.Amount;--FIELDVALUE(req.(XMLNSC.Attribute)"value");  
					WHEN 'Invoice' THEN
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'Invoice';
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
					WHEN 'BalanceAmount' THEN	
						CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
						SET requisite.erib:NameVisible	= FIELDVALUE(req.(XMLNSC.Attribute)"title");
						SET requisite.erib:NameBS	= 'BalanceAmount';
						SET requisite.erib:Type			= FIELDVALUE(req.(XMLNSC.Attribute)"type");
						SET requisite.erib:IsVisible	= 'true';
						SET requisite.erib:DefaultValue	= FIELDVALUE(req.(XMLNSC.Attribute)"value");
						SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(req.(XMLNSC.Attribute)"value");
							
					ELSE
						IF origMess.RecipientRec.CodeRecipientBS IN ('ALSECO','IVC','0004','0137','0229','0232','0465','0619','0679','0695','0697','0698') THEN
							*/
							SET counting = CAST(counter AS CHARACTER);							
							
							CASE FIELDVALUE(object.(XMLNSC.Attribute)"name")
							WHEN 'groupName' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= 'Наименование';--FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  		= 'Field_' || counting || '_NameService';
								SET requisite.erib:Type	   		= FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");	
							WHEN 'Id' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_ServiceID';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'Measure' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_Measure';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");	
							WHEN 'MinTariffValue' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_minTariff';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'MidTariffValue' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_midTariff';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");		
							WHEN 'MaxTariffValue' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_maxTariff';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");	
							WHEN 'MinTariffThreshold' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_minTariffThresh';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'MidTariffThreshold' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_midTariffThresh';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'PrevCount' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_prevCount';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'LastCount' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_lastCount';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'PrevCountDate' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_prevDate';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'LastCountDate' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_lastDate';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'PayCounts' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_payCount';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'FixSum' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_countSum';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								/*IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;*/
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'tenantCount' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_tenantCount';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'serviceType' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title"); 
								SET requisite.erib:NameBS  = 'Field_' || counting || '_serviceType';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'DebtInfo' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title");
								SET requisite.erib:NameBS  = 'Field_' || counting || '_DebtInfo';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							WHEN 'PaySum' THEN
								CREATE LASTCHILD OF requisites AS requisite NAMESPACE erib NAME 'Requisite';
								SET requisite.erib:NameVisible	= FIELDVALUE(object.(XMLNSC.Attribute)"title");
								SET requisite.erib:NameBS  = 'Field_' || counting || '_PaySum';
								SET requisite.erib:Type	   = FIELDVALUE(object.(XMLNSC.Attribute)"type");
								IF inRef.Pay.Amount = '0.0' THEN
									SET requisite.erib:IsEditable	= 'true';
								END IF;
								SET requisite.erib:IsVisible	= 'true';
								SET requisite.erib:DefaultValue	= FIELDVALUE(object.(XMLNSC.Attribute)"value");
								SET requisite.erib:EnteredData.erib:DataItem = FIELDVALUE(object.(XMLNSC.Attribute)"value");
							END CASE;													 			
						/*END IF;
						
					END CASE;	*/					
					
					END FOR;
					
					SET counter = counter + 1;
							
				END FOR;		 
						 	
			END FOR;			
			
			SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:SystemId	=	'BP_WAY';
			SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:CardNum	=	items.CardAcctId.CardNum;
			--SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:AcctId	
			SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:CardType	=	items.CardAcctId.CardType;
			SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:EndDt		=	items.CardAcctId.EndDt;
			SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName		=	items.CardAcctId.LastName;
			SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName	=	items.CardAcctId.FirstName;
			
			SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:CustInfo.erib:PersonInfo.erib:ContactInfo.erib:PostAddr.erib:AddrType	=	items.CardAcctId.AddrType;
			SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:CustInfo.erib:PersonInfo.erib:ContactInfo.erib:PostAddr.erib:Addr3		=	items.CardAcctId.Addr3;
			
			--SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:CustInfo.erib:PersonInfo.erib:ContactIn.erib:PostAddr.erib:AddrType
			
			SET autoPayRec.erib:BankAcctRec.erib:CardAcctId.erib:BankInfo.erib:RbBrchId =	items.CardAcctId.RbBrchId;
			
			--SET autoPayRec.erib:CardAuthorization.erib:AuthorizationCode
			--SET autoPayRec.erib:CardAuthorization.erib:AuthorizationDtTm
			
			SET autoPayRec.erib:AutoSubscriptionId.erib:SystemId	 = 'BP_Integra';
			SET autoPayRec.erib:AutoSubscriptionId.erib:AutopayId 	 = items.AutopayId;	
		
		END FOR;
		
		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardEnrollmentRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		--DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
				 
		DECLARE way_clientinq		  REFERENCE TO Environment.UserProperties.WayClientInq.XMLNSC.*[<];
		DECLARE way_getphone	      REFERENCE TO Environment.UserProperties.WayGetPhone.XMLNSC.*[<];
		DECLARE way_updateclient      REFERENCE TO Environment.UserProperties.WayUpdateClient.XMLNSC.*[<];
						 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'CardEnrollmentRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	origMess.*[<].*:OperUID;--Environment.UserProperties.OperUID;
		
		DECLARE cardEnroll REFERENCE TO oRef;
		
		CREATE LASTCHILD OF oRef AS cardEnroll NAMESPACE erib NAME 'CardAcctRec';
		
		SET cardEnroll.erib:CardAcctId.erib:CardNum 	=	origMess.*[<].*:CardAcctRec.*:CardAcctId.*:CardNum;
		SET cardEnroll.erib:CardAcctId.erib:SystemId	=	'BP_WAY';
		
		DECLARE mobile_phone CHARACTER;
		
		FOR items AS way_getphone.MsgData.Information.DataRs.ContractRs[] DO
			
			IF items.Contract.Product.AddInfo.Parm.ParmCode = 'ContractCategory' AND items.Contract.Product.AddInfo.Parm.Value = 'Card' THEN				
				
				DECLARE vAT03 CHARACTER;								
			  
			    SET vAT03		= SUBSTRING(items.Contract.AddContractInfo.ExtraRs AFTER 'ADDR_SMS1=' FOR 11);
			    
			    IF CONTAINS(vAT03, '7') THEN
			    	SET mobile_phone = vAT03;
			    ELSE
			    	SET vAT03 = SUBSTRING(items.Contract.AddContractInfo.ExtraRs AFTER 'ADDR_SMS2=' FOR 11);
			    	IF CONTAINS(vAT03, '7') THEN
			    		--SET cardEnroll.erib:CardAcctId.erib:AddrSMS		=	vAT03;
			    		SET mobile_phone = vAT03;
			    	ELSE
			    		SET vAT03 = SUBSTRING(items.Contract.AddContractInfo.ExtraRs AFTER 'ADDR_SMS3=' FOR 11);
			    		IF CONTAINS(vAT03, '7') THEN
			    			--SET cardEnroll.erib:CardAcctId.erib:AddrSMS		=	vAT03;
			    			SET mobile_phone = vAT03;
			    		END IF;			
			    	END IF;			
			    END IF;				
			END IF;
		END FOR;
		
		SET cardEnroll.erib:CardAcctId.erib:AddrSMS		=	mobile_phone;				
		
		DECLARE custRec REFERENCE TO oRef;
		
		CREATE LASTCHILD OF oRef AS custRec NAMESPACE erib NAME 'CustRec';
		
		SET custRec.erib:CustId															= way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.ClientNumber;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:Birthday							= way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.BirthDate;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:BirthPlace						= way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.BirthPlace;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:TaxId							= way_clientinq.MsgData.Information.DataRs.ClientRs.Client.AddInfo.AddInfo01;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:Citizenship						= COALESCE(way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.Country,null);
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName			= way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.LastName;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName		= way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.FirstName;
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName		= way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.MiddleName;	
		--SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdSeries       = '';
		SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IdNum			= way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.RegNumber;
		--SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedBy		= '';
		--SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssuedCode		= '';
		
		DECLARE data1 CHARACTER SUBSTRING(way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.RegNumberDetails FROM 0 FOR 11);
		DECLARE data2 CHARACTER SUBSTRING(way_clientinq.MsgData.Information.DataRs.ClientRs.Client.ClientInfo.RegNumberDetails FROM 12 FOR 10);
		
		IF data1 <> '' AND data2 <> '' THEN
			DECLARE data1_1	CHARACTER SUBSTRING(data1 FROM 0 FOR 3);
			DECLARE data1_2 CHARACTER SUBSTRING(data1 FROM 4 FOR 2);	
			DECLARE data1_3 CHARACTER SUBSTRING(data1 FROM 7 FOR 4);
			DECLARE data1_main CHARACTER;
			SET data1_main = data1_3 || '-' || data1_2 || '-' || data1_1; 
			
			DECLARE data2_1	CHARACTER SUBSTRING(data2 FROM 0 FOR 3);
			DECLARE data2_2 CHARACTER SUBSTRING(data2 FROM 4 FOR 2);
			DECLARE data2_3 CHARACTER SUBSTRING(data2 FROM 7 FOR 4);
			DECLARE data2_main CHARACTER;
			SET data2_main = data2_3 || '-' || data2_2 || '-' || data2_1;	
			
			
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:IssueDt		= COALESCE(data1_main,'');
			SET custRec.erib:CustInfo.erib:PersonInfo.erib:IdentityCard.erib:ExpDt			= COALESCE(data2_main,''); 
		
		END IF;		
		
		/*IF way_updateclient.(XMLNSC.Attribute)"resp_code" <> '0' THEN
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
			
			SET status_code = way_updateclient.(XMLNSC.Attribute)"resp_code" || ' ' || way_updateclient.(XMLNSC.Attribute)"resp_text";  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
						
			--SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(way_clientinq.(XMLNSC.Attribute)"resp_code");
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(way_updateclient.(XMLNSC.Attribute)"resp_code"); 
			END IF;
			SET oRef.erib:Status.erib:ServerStatusDesc				=	'WAY_'||way_updateclient.(XMLNSC.Attribute)"resp_code"||'_'||way_updateclient.(XMLNSC.Attribute)"resp_text";
		
			RETURN TRUE;
		
		END IF;*/
		
		IF way_clientinq.(XMLNSC.Attribute)"resp_code" <> '0' THEN
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
			
			SET status_code = way_clientinq.(XMLNSC.Attribute)"resp_code" || ' ' || way_clientinq.(XMLNSC.Attribute)"resp_text";  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
						
			--SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(way_clientinq.(XMLNSC.Attribute)"resp_code");
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(way_clientinq.(XMLNSC.Attribute)"resp_code"); 
			END IF;
			SET oRef.erib:Status.erib:ServerStatusDesc				=	'WAY_'||way_clientinq.(XMLNSC.Attribute)"resp_code"||'_'||way_clientinq.(XMLNSC.Attribute)"resp_text";
		
		RETURN TRUE;
		
		END IF;
		
		IF COALESCE(way_getphone.(XMLNSC.Attribute)"resp_code",way_getphone.MsgData.*[<].Status.RespCode) <> '0' THEN
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
			
			SET status_code = COALESCE(way_getphone.(XMLNSC.Attribute)"resp_code",way_getphone.MsgData.*[<].Status.RespCode) || ' ' || COALESCE(way_getphone.(XMLNSC.Attribute)"resp_text",way_getphone.MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
			
			--SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(way_getphone.(XMLNSC.Attribute)"resp_code");
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(way_getphone.(XMLNSC.Attribute)"resp_code",way_getphone.MsgData.*[<].Status.RespCode)); 
			END IF;
			SET oRef.erib:Status.erib:ServerStatusDesc				=	'WAY_'||COALESCE(way_getphone.(XMLNSC.Attribute)"resp_code",way_getphone.MsgData.*[<].Status.RespCode)||'_'||COALESCE(way_getphone.(XMLNSC.Attribute)"resp_text",way_getphone.MsgData.*[<].Status.RespText);
		
		RETURN TRUE;
		
		END IF;	
		
		IF COALESCE(way_clientinq.(XMLNSC.Attribute)"resp_code",way_clientinq.MsgData.*[<].Status.RespCode) = '0' AND COALESCE(way_getphone.(XMLNSC.Attribute)"resp_code",way_getphone.MsgData.*[<].Status.RespCode) = '0' THEN	
			SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(way_clientinq.(XMLNSC.Attribute)"resp_code",way_clientinq.MsgData.*[<].Status.RespCode));
			IF oRef.erib:Status.erib:StatusCode <> '0' THEN
				SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(way_clientinq.(XMLNSC.Attribute)"resp_code",way_clientinq.MsgData.*[<].Status.RespCode)); 
			END IF;
			SET oRef.erib:Status.erib:ServerStatusDesc				=	'WAY_'||COALESCE(way_clientinq.(XMLNSC.Attribute)"resp_code",way_clientinq.MsgData.*[<].Status.RespCode)||'_'||COALESCE(way_clientinq.(XMLNSC.Attribute)"resp_text",way_clientinq.MsgData.*[<].Status.RespText)	|| ';' || 'WAY_'||COALESCE(way_getphone.(XMLNSC.Attribute)"resp_code",way_getphone.MsgData.*[<].Status.RespCode)||'_'||COALESCE(way_getphone.(XMLNSC.Attribute)"resp_text",way_getphone.MsgData.*[<].Status.RespText) || ';' || 'WAY_'||COALESCE(way_updateclient.(XMLNSC.Attribute)"resp_code",way_updateclient.MsgData.*[<].Status.RespCode)||'_'||COALESCE(way_updateclient.(XMLNSC.Attribute)"resp_text",way_updateclient.MsgData.*[<].Status.RespText)||';';
		
		RETURN TRUE;
		
		END IF;
		
		RETURN FALSE;
	END;
END MODULE;


/* u06068 Интерфейс DCA. Проверка возможности открытия вклад клиентом.

   Интерфейс отрабатывает непосредственно перед началом процедуры открытия вклада - проверяет возможность открытия вклада клиентом, 
   а так же возвращает результаты проверок и филиал (подразделение) на котором ведется карточка клиента в АБИС QPragma.

   14.05.2015 Done by Djapenov Aydar

 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_DepChkAddRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		DECLARE mainRoot REFERENCE TO OutputRoot;	
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'DepChkAddRs';
		
		SET outRoot.erib:RqUID	  					=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  					=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET outRoot.erib:OperUID 					=	COALESCE(Environment.UserProperties.OperUID, ' ');
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
				
		IF inRoot.Status.*:StatusCode = '0' THEN		
			SET outRoot.erib:Status.erib:StatusCode					=	inRoot.Status.*:StatusCode;
		ELSE
			SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
			CALL CRC8(status_code,output_code);
			SET outRoot.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		 
		--SET outRoot.erib:Status.erib:StatusCode				=	inRoot.Status.*:StatusCode;
		
		IF inRoot.Status.*:StatusCode <> '0' THEN 
			SET outRoot.erib:Status.erib:StatusDesc				=	inRoot.Status.*:StatusDesc;
			SET outRoot.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||inRoot.Status.*:StatusCode||'_'||inRoot.Status.*:StatusDesc;
		END IF;	
		
		IF inRoot.Status.*:StatusCode = '0' THEN
			
			SET outRoot.erib:SystemChk.erib:ClientChk			= inRoot.SystemChk.ClientChk;
			SET outRoot.erib:SystemChk.erib:AMLChk				= inRoot.SystemChk.AMLChk;
			SET outRoot.erib:SystemChk.erib:TaxOffChk			= inRoot.SystemChk.TaxOffChk;
			SET outRoot.erib:SystemChk.erib:LawChk				= inRoot.SystemChk.LawChk;
			SET outRoot.erib:SystemChk.erib:AcctBlockChk		= inRoot.SystemChk.AcctBlockChk;
			
			SET outRoot.erib:DepCanAddChk						= inRoot.SystemChk.DepCanAddChk;
			
			IF inRoot.SystemChk.ClientChk = 'true' THEN
			
				SET outRoot.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:TaxId						= inRoot.CustRec.CustInfo.PersonInfo.TaxId;	
				SET outRoot.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:ClientBranch				= inRoot.CustRec.CustInfo.PersonInfo.ClientBranch;		
				SET outRoot.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:LastName	= inRoot.CustRec.CustInfo.PersonInfo.PersonName.LastName;
				SET outRoot.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:FirstName	= inRoot.CustRec.CustInfo.PersonInfo.PersonName.FirstName;
				SET outRoot.erib:CustRec.erib:CustInfo.erib:PersonInfo.erib:PersonName.erib:MiddleName	= inRoot.CustRec.CustInfo.PersonInfo.PersonName.MiddleName;
		
			END IF;
		
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;

/*
 * Done by Djapenov Aydar
 	
   Интерфейс NDAF. Открытие вклада с переводом на него денежных средств с карты\текущего счета.
   
   Интерфейс позволяет осуществить открытие вклада с пополнением в АБИС Qpragma, согласно выбранным и заполненным клиентом параметрам. 
   Пополнение вклада доступно, как с карты (в любой валюте), так и с текущего счета (при наличии счета в валюте открываемого вклада). 	
 
 */
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_NewDepAddFillRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		 
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 

		DECLARE inRoot REFERENCE TO InputRoot.XMLNSC.*[<];
		DECLARE mainRoot REFERENCE TO OutputRoot;	
		DECLARE outRoot REFERENCE TO OutputRoot; 	
		
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS mainRoot NAMESPACE erib NAME 'DoIFXRs';
		
		SET mainRoot.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		
		CREATE LASTCHILD OF mainRoot AS outRoot NAMESPACE erib NAME 'NewDepAddFillRs';
		
		SET outRoot.erib:RqUID	  					=	Environment.UserProperties.RqUID;
		SET outRoot.erib:RqTm	  					=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);
		SET outRoot.erib:OperUID 					=	COALESCE(Environment.UserProperties.OperUID, ' ');
		SET outRoot.erib:OperRRN					=   Environment.UserProperties.OperRRN;
		/* 
		SET outRoot.erib:Status.erib:StatusCode				=	DefineStatusCode(inRoot.Status.*:StatusCode);
		
		IF inRoot.Status.*:StatusCode <> '0' THEN
			SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus(inRoot.Status.*:StatusCode);
			SET outRoot.erib:Status.erib:ServerStatusDesc		=	'Pragma_NEW_'||inRoot.Status.*:StatusCode||'_'||inRoot.Status.*:StatusDesc;
		END IF;	
		
		IF inRoot.Status.*:StatusCode = '0' AND (inRoot.AgreemtInfo.DepInfo.AcctId <> '' OR NOT EXISTS(inRoot.AgreemtInfo.DepInfo.AcctId[])) THEN 
			SET outRoot.erib:AgreemtInfo.erib:DepInfo.erib:AcctId					= inRoot.AgreemtInfo.DepInfo.AcctId;
			SET outRoot.erib:AgreemtInfo.erib:DepInfo.erib:SystemId					= inRoot.AgreemtInfo.DepInfo.SystemId;
			SET outRoot.erib:AgreemtInfo.erib:DepInfo.erib:BankInfo.erib:RbBrchId	= inRoot.AgreemtInfo.DepInfo.RbBrchId;
		ELSE			
		    SET outRoot.erib:Status.erib:StatusCode				=	DefineStatusCode('-1');
		    SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatus('-1'); 
			SET outRoot.erib:Status.erib:ServerStatusDesc		=	'Pragma_NEW_Ошибка создания вклада';
		END IF;	*/
		 
		IF FIELDNAME(InputRoot.XMLNSC.*[<]) = 'UFXMsg_Error' THEN
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
					
			IF inRoot.Status.*:StatusCode = '0' THEN		
				SET outRoot.erib:Status.erib:StatusCode					=	inRoot.Status.*:StatusCode;
			ELSE
				SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
				CALL CRC8(status_code,output_code);
				SET outRoot.erib:Status.erib:StatusCode					=	output_code;
			END IF;
			
			--SET outRoot.erib:Status.erib:StatusCode				=	InputRoot.XMLNSC.*[<].Status.StatusCode;
			IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
				SET outRoot.erib:Status.erib:StatusDesc			=	InputRoot.XMLNSC.*[<].Status.StatusDesc; 
			END IF;
			
			IF NOT EXISTS(inRoot.Status[]) THEN
				SET outRoot.erib:Status.erib:ServerStatusDesc		=	'WAY_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc||'_RRN_'||InputRoot.XMLNSC.*[<].Status.StatusRRN||'_AuthCode_'||COALESCE(InputRoot.XMLNSC.*[<].Status.StatusAuthCode,'Non AuthCode');
			ELSE
				SET outRoot.erib:Status.erib:ServerStatusDesc		=   'WAY_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc||'_RRN_'||InputRoot.XMLNSC.*[<].Status.StatusRRN||'_AuthCode_'||COALESCE(InputRoot.XMLNSC.*[<].Status.StatusAuthCode,'Non AuthCode');
			END IF;
		
		ELSEIF FIELDNAME(InputRoot.XMLNSC.*[<]) = 'QPragma_Error' THEN
			
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
					
			IF inRoot.Status.*:StatusCode = '0' THEN		
				SET outRoot.erib:Status.erib:StatusCode					=	inRoot.Status.*:StatusCode;
			ELSE
				SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
				CALL CRC8(status_code,output_code);
				SET outRoot.erib:Status.erib:StatusCode					=	output_code;
			END IF;
			
			--SET outRoot.erib:Status.erib:StatusCode				=	DefineStatusCodeFORVKLADI(InputRoot.XMLNSC.*[<].Status.StatusCode);
			--SET outRoot.erib:Status.erib:StatusCode					=	InputRoot.XMLNSC.*[<].Status.StatusCode;
			
			IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
				--SET outRoot.erib:Status.erib:StatusDesc				=	DefineStatusFORVKLADI(InputRoot.XMLNSC.*[<].Status.StatusCode);
				SET outRoot.erib:Status.erib:StatusDesc				=	InputRoot.XMLNSC.*[<].Status.StatusDesc;  
			END IF;
			
			IF NOT EXISTS(inRoot.Status[]) THEN
				SET outRoot.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc;
			ELSE
				SET outRoot.erib:Status.erib:ServerStatusDesc		=   'PRAGMANEW_'||InputRoot.XMLNSC.*[<].Status.StatusCode||'_'||InputRoot.XMLNSC.*[<].Status.StatusDesc;
			END IF;
			
		ELSE
			DECLARE status_code CHARACTER;
			DECLARE output_code CHARACTER;
					
			IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' OR inRoot.Status.*:StatusCode = '0' THEN		
				SET outRoot.erib:Status.erib:StatusCode					=	COALESCE(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode),inRoot.Status.*:StatusCode);
			ELSE
				SET status_code = COALESCE(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode),inRoot.Status.*:StatusCode) || ' ' || COALESCE(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText),inRoot.Status.*:StatusDesc);  
				CALL CRC8(status_code,output_code);
				SET outRoot.erib:Status.erib:StatusCode					=	output_code;
			END IF;
			
			--SET outRoot.erib:Status.erib:StatusCode				=	DefineStatusCodeFORVKLADI(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",inRoot.Status.*:StatusCode));
			--SET outRoot.erib:Status.erib:StatusCode					=	COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",inRoot.Status.*:StatusCode);
			--IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
			--SET outRoot.erib:Status.erib:StatusDesc					=	DefineStatusFORVKLADI(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",inRoot.Status.*:StatusCode)); 
			SET outRoot.erib:Status.erib:StatusDesc					=	COALESCE(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText),inRoot.Status.*:StatusDesc);
			--END IF;
			
			DECLARE RRN CHARACTER;
			SET RRN = THE(SELECT ITEM attr.Value FROM inRoot.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'RRN');
			
			DECLARE AuthCode CHARACTER;
			SET AuthCode = THE(SELECT ITEM attr.Value FROM inRoot.MsgData.Doc.DocRefSet.Parm[] AS attr WHERE attr.ParmCode = 'AuthCode');
			
			IF NOT EXISTS(inRoot.Status[]) THEN
				SET outRoot.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText)||'_RRN_'||RRN;
			ELSE
				IF EXISTS(inRoot.Status.RespCode[]) THEN
					SET outRoot.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRoot.Status.RespCode||'_'||inRoot.Status.RespText;
				ELSE
					SET outRoot.erib:Status.erib:ServerStatusDesc		=  	'PRAGMANEW_'||inRoot.Status.*:StatusCode||'_'||inRoot.Status.*:StatusDesc;
				END IF;	
			END IF;
			
			IF EXISTS(inRoot.Agreemt[]) THEN		
				SET outRoot.erib:AgreemtInfo.erib:DepInfo.erib:AcctId					= inRoot.Agreemt.Account;
				SET outRoot.erib:AgreemtInfo.erib:DepInfo.erib:SystemId					= inRoot.Agreemt.SystemId;
				SET outRoot.erib:AgreemtInfo.erib:DepInfo.erib:BankInfo.erib:RbBrchId	= inRoot.Agreemt.RbBrchId;
			ELSEIF EXISTS(inRoot.AgreemtInfo[]) THEN
				IF inRoot.Status.*:StatusCode = '0' AND (inRoot.AgreemtInfo.DepInfo.AcctId <> '' OR NOT EXISTS(inRoot.AgreemtInfo.DepInfo.AcctId[])) THEN
					SET outRoot.erib:AgreemtInfo.erib:DepInfo.erib:AcctId					= inRoot.AgreemtInfo.DepInfo.AcctId;
					SET outRoot.erib:AgreemtInfo.erib:DepInfo.erib:SystemId					= inRoot.AgreemtInfo.DepInfo.SystemId;
					SET outRoot.erib:AgreemtInfo.erib:DepInfo.erib:BankInfo.erib:RbBrchId	= inRoot.AgreemtInfo.DepInfo.RbBrchId;
				ELSE
					
					IF inRoot.Status.*:StatusCode <> '0' THEN
						SET status_code = inRoot.Status.*:StatusCode || ' ' || inRoot.Status.*:StatusDesc;  
						CALL CRC8(status_code,output_code);
						SET outRoot.erib:Status.erib:StatusCode					=	output_code;					
					
					ELSE
						SET outRoot.erib:Status.erib:StatusCode					=   '0';
					END IF;
								
				    --SET outRoot.erib:Status.erib:StatusCode				=	inRoot.Status.*:StatusCode;
				    IF inRoot.Status.*:StatusDesc <> '' THEN
				    	SET outRoot.erib:Status.erib:StatusDesc				=	COALESCE(inRoot.Status.*:StatusDesc,NULL); 
				    END IF;
					
					SET outRoot.erib:Status.erib:ServerStatusDesc		=	'PRAGMANEW_' || ' ' || inRoot.Status.*:StatusCode || COALESCE(inRoot.Status.*:StatusDesc,'PRAGMANEW_Ошибка создания вклада');
					--SET outRoot.erib:Status.erib:StatusCode				=	DefineStatusCodeFORVKLADI(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",inRoot.Status.*:StatusCode));
					--IF outRoot.erib:Status.erib:StatusCode <> '0' THEN
					--SET outRoot.erib:Status.erib:StatusDesc			=	DefineStatusFORVKLADI(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",inRoot.Status.*:StatusCode)); 
				    --SET outRoot.erib:Status.erib:ServerStatusDesc		=  	'Pragma_NEW_'||inRoot.Status.*:StatusCode||'_'||inRoot.Status.*:StatusDesc;
					--SET outRoot.erib:Status.erib:ServerStatusDesc		=	'Pragma_NEW_Ошибка создания вклада';
				END IF;					
			END IF;
		END IF;
		
		
		RETURN TRUE;
	END;
END MODULE;

 
CREATE COMPUTE MODULE HTTPResponseForSBOL_Convert2MDO_CardListPhoneRs
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL CopyMessageHeaders(InputRoot, OutputRoot);		 
		 
		DECLARE ERIB CONSTANT CHARACTER 'http://sbrf.ru/baseproduct/erib/adapter/1';
		DECLARE erib NAMESPACE ERIB;		

		DECLARE origMess REFERENCE TO InputRoot.XMLNSC.OrigMess.*[<];
		DECLARE inRef	 REFERENCE TO InputRoot.XMLNSC.*[<].*[<].*[<];	
		
		DECLARE oRef REFERENCE TO OutputRoot; 
		
				 
		CREATE LASTCHILD OF OutputRoot DOMAIN('XMLNSC') NAME 'XMLNSC';
		CREATE LASTCHILD OF OutputRoot.XMLNSC AS oRef NAMESPACE erib NAME 'DoIFXRs';		
		
		SET oRef.(XMLNSC.NamespaceDecl)xmlns:erib = erib;
		CREATE LASTCHILD OF oRef AS oRef NAMESPACE erib NAME 'CardListPhoneRs';
		
		SET oRef.erib:RqUID	=	Environment.UserProperties.RqUID;
		SET oRef.erib:RqTm	=	SUBSTRING(Environment.UserProperties.RqTm FROM 0 FOR 20);--CAST(CURRENT_DATE AS CHARACTER FORMAT 'yyyy-MM-ddHH:MM:SS');
		SET oRef.erib:OperUID =	Environment.UserProperties.OperUID;
		
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN
		
		DECLARE cardAcctRec REFERENCE TO oRef;
		
		-- Данное условие работает для случая если StatusClass = 'Valid' and ProductionStatus = 'Ready'
		IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN			
			FOR itemList AS inRef.DataRs.ContractRs[] DO	
			   IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN					
			    IF itemList.Info.Status.StatusClass = 'Valid' AND itemList.Info.Status.ProductionStatus = 'Ready' THEN			
						--проверка срока действия карты 12.01 08083
						DECLARE currDate CHARACTER;
						DECLARE cardDate CHARACTER;
						SET currDate = CAST (CURRENT_DATE AS CHARACTER FORMAT 'YYMM');
						SET cardDate = CAST(itemList.Contract.ProductionParms.CardExpiry AS CHARACTER FORMAT 'YYMM');
						IF  cardDate >= currDate THEN		
					
					CREATE LASTCHILD OF oRef AS cardAcctRec NAMESPACE erib NAME 'CardAcctRec';
					
					DECLARE cardAcctId REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS cardAcctId NAMESPACE erib NAME 'CardAcctId';
					
					SET cardAcctId.erib:CardNum = itemList.Contract.ContractIDT.ContractNumber; 
					--SET cardAcctRec.erib:AcctId	 = itemList.Contract.ContractIDT."";
					SET cardAcctId.erib:EndDtForWay  = itemList.Contract.ProductionParms.CardExpiry;
					SET cardAcctId.erib:IssDt		 = itemList.Contract.DateOpen;
					SET cardAcctId.erib:AcctCur	 	 = itemList.Contract.Currency;
					
					DECLARE vAT01         INTEGER;
					DECLARE vAT02         INTEGER;
					DECLARE vAT03         CHARACTER;
									
					SET vAT01		= POSITION('IS_CREDIT=' IN itemList.Contract.AddContractInfo.ExtraRs);
					SET vAT01		= vAT01 + 10;
					SET vAT03		= SUBSTRING(itemList.Contract.AddContractInfo.ExtraRs FROM vAT01 FOR 2);									 
					
					SET cardAcctId.erib:CardType	 = ChangeType(vAT03);
					SET cardAcctId.erib:SystemId	 = 'BP_WAY';
					
					DECLARE bankAcctStatus REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS bankAcctStatus NAMESPACE erib NAME 'BankAcctStatus';					
								
					SET bankAcctStatus.erib:BankAcctStatusCode = 'Active';			
							
					SET bankAcctStatus.erib:StatusDesc = itemList.Info.Status.StatusDetails;
						END IF;				
			     END IF;
			    END IF;			
			END FOR;		
		END IF;
		
		
		IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN			
			FOR itemList AS inRef.DataRs.ContractRs[] DO	
			 IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN					
			    IF itemList.Info.Status.StatusCode <> '105' AND itemList.Info.Status.StatusClass = 'Decline' THEN			
								
					CREATE LASTCHILD OF oRef AS cardAcctRec NAMESPACE erib NAME 'CardAcctRec';
					
					DECLARE cardAcctId REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS cardAcctId NAMESPACE erib NAME 'CardAcctId';
					
					SET cardAcctId.erib:CardNum = itemList.Contract.ContractIDT.ContractNumber; 
					--SET cardAcctRec.erib:AcctId	 = itemList.Contract.ContractIDT."";
					SET cardAcctId.erib:EndDtForWay  = itemList.Contract.ProductionParms.CardExpiry;
					SET cardAcctId.erib:IssDt		 = itemList.Contract.DateOpen;
					SET cardAcctId.erib:AcctCur	 	 = itemList.Contract.Currency;
					
					DECLARE vAT01         INTEGER;
					DECLARE vAT02         INTEGER;
					DECLARE vAT03         CHARACTER;
									
					SET vAT01		= POSITION('IS_CREDIT=' IN itemList.Contract.AddContractInfo.ExtraRs);
					SET vAT01		= vAT01 + 10;
					SET vAT03		= SUBSTRING(itemList.Contract.AddContractInfo.ExtraRs FROM vAT01 FOR 2);									 
					
					SET cardAcctId.erib:CardType	 = ChangeType(vAT03);
					SET cardAcctId.erib:SystemId	 = 'BP_WAY';
					
					DECLARE bankAcctStatus REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS bankAcctStatus NAMESPACE erib NAME 'BankAcctStatus';					
								
					SET bankAcctStatus.erib:BankAcctStatusCode = 'Blocked';			
							
					SET bankAcctStatus.erib:StatusDesc = itemList.Info.Status.StatusDetails;				
				
			    END IF;
			 END IF; 			
			END FOR;							
		END IF;	
		
		IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN			
			FOR itemList AS inRef.DataRs.ContractRs[] DO			
			  IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN		
			    IF itemList.Info.Status.StatusCode <> '105' AND itemList.Info.Status.StatusClass = 'Invalid' THEN			
								
					CREATE LASTCHILD OF oRef AS cardAcctRec NAMESPACE erib NAME 'CardAcctRec';
					
					DECLARE cardAcctId REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS cardAcctId NAMESPACE erib NAME 'CardAcctId';
					
					SET cardAcctId.erib:CardNum = itemList.Contract.ContractIDT.ContractNumber; 
					--SET cardAcctRec.erib:AcctId	 = itemList.Contract.ContractIDT."";
					SET cardAcctId.erib:EndDtForWay  = itemList.Contract.ProductionParms.CardExpiry;
					SET cardAcctId.erib:IssDt		 = itemList.Contract.DateOpen;
					SET cardAcctId.erib:AcctCur	 	 = itemList.Contract.Currency;
					
					DECLARE vAT01         INTEGER;
					DECLARE vAT02         INTEGER;
					DECLARE vAT03         CHARACTER;
									
					SET vAT01		= POSITION('IS_CREDIT=' IN itemList.Contract.AddContractInfo.ExtraRs);
					SET vAT01		= vAT01 + 10;
					SET vAT03		= SUBSTRING(itemList.Contract.AddContractInfo.ExtraRs FROM vAT01 FOR 2);									 
					
					SET cardAcctId.erib:CardType	 = ChangeType(vAT03);
					SET cardAcctId.erib:SystemId	 = 'BP_WAY';
					
					DECLARE bankAcctStatus REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS bankAcctStatus NAMESPACE erib NAME 'BankAcctStatus';					
								
					SET bankAcctStatus.erib:BankAcctStatusCode = 'Stoped';			
							
					SET bankAcctStatus.erib:StatusDesc = itemList.Info.Status.StatusDetails;				
				
			    END IF;
			  END IF;  			
			END FOR;			
		END IF;
		
		IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN			
			FOR itemList AS inRef.DataRs.ContractRs[] DO
			   IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN		 				
			    IF itemList.Info.Status.StatusCode = '105' AND itemList.Info.Status.StatusClass = 'Decline' THEN			
								
					CREATE LASTCHILD OF oRef AS cardAcctRec NAMESPACE erib NAME 'CardAcctRec';
					
					DECLARE cardAcctId REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS cardAcctId NAMESPACE erib NAME 'CardAcctId';
					
					SET cardAcctId.erib:CardNum = itemList.Contract.ContractIDT.ContractNumber; 
					--SET cardAcctRec.erib:AcctId	 = itemList.Contract.ContractIDT."";
					SET cardAcctId.erib:EndDtForWay  = itemList.Contract.ProductionParms.CardExpiry;
					SET cardAcctId.erib:IssDt		 = itemList.Contract.DateOpen;
					SET cardAcctId.erib:AcctCur	 	 = itemList.Contract.Currency;
					
					DECLARE vAT01         INTEGER;
					DECLARE vAT02         INTEGER;
					DECLARE vAT03         CHARACTER;
									
					SET vAT01		= POSITION('IS_CREDIT=' IN itemList.Contract.AddContractInfo.ExtraRs);
					SET vAT01		= vAT01 + 10;
					SET vAT03		= SUBSTRING(itemList.Contract.AddContractInfo.ExtraRs FROM vAT01 FOR 2);									 
					
					SET cardAcctId.erib:CardType	 = ChangeType(vAT03);
					SET cardAcctId.erib:SystemId	 = 'BP_WAY';
					
					DECLARE bankAcctStatus REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS bankAcctStatus NAMESPACE erib NAME 'BankAcctStatus';					
								
					SET bankAcctStatus.erib:BankAcctStatusCode = 'TempBlocked';			
							
					SET bankAcctStatus.erib:StatusDesc = itemList.Info.Status.StatusDetails;				
				
			    END IF;
			   END IF; 			
			END FOR;			
		END IF;
		
		IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN			
			FOR itemList AS inRef.DataRs.ContractRs[] DO			
			    IF NOT EXISTS(oRef.erib:CardAcctRec[]) THEN										
					CREATE LASTCHILD OF oRef AS cardAcctRec NAMESPACE erib NAME 'CardAcctRec';
					
					DECLARE cardAcctId REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS cardAcctId NAMESPACE erib NAME 'CardAcctId';
					
					SET cardAcctId.erib:CardNum = itemList.Contract.ContractIDT.ContractNumber; 
					--SET cardAcctRec.erib:AcctId	 = itemList.Contract.ContractIDT."";
					SET cardAcctId.erib:EndDtForWay  = itemList.Contract.ProductionParms.CardExpiry;
					SET cardAcctId.erib:IssDt		 = itemList.Contract.DateOpen;
					SET cardAcctId.erib:AcctCur	 	 = itemList.Contract.Currency;
					
					DECLARE vAT01         INTEGER;
					DECLARE vAT02         INTEGER;
					DECLARE vAT03         CHARACTER;
									
					SET vAT01		= POSITION('IS_CREDIT=' IN itemList.Contract.AddContractInfo.ExtraRs);
					SET vAT01		= vAT01 + 10;
					SET vAT03		= SUBSTRING(itemList.Contract.AddContractInfo.ExtraRs FROM vAT01 FOR 2);									 
					
					SET cardAcctId.erib:CardType	 = ChangeType(vAT03);
					SET cardAcctId.erib:SystemId	 = 'BP_WAY';
					
					DECLARE bankAcctStatus REFERENCE TO cardAcctRec;
					CREATE LASTCHILD OF cardAcctRec AS bankAcctStatus NAMESPACE erib NAME 'BankAcctStatus';					
								
					SET bankAcctStatus.erib:BankAcctStatusCode = 'Stoped';			
							
					SET bankAcctStatus.erib:StatusDesc = itemList.Info.Status.StatusDetails;				
			    END IF;
			END FOR;			
		END IF;
		
		END IF;
		
		DECLARE custRec REFERENCE TO oRef;
		CREATE LASTCHILD OF oRef AS custRec NAMESPACE erib NAME 'CustRec';
				
		SET custRec.erib:PhoneNumber 			   = origMess.PhoneNumber;		
		
		DECLARE status_code CHARACTER;
		DECLARE output_code CHARACTER;
			
		IF COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) = '0' THEN		
			
			FOR itemList AS inRef.DataRs.ContractRs[] DO
			
			--IF itemList.Contract.PlasticInfo.FirstName = 'INSTANT' OR itemList.Contract.PlasticInfo.FirstName = 'MOMENTUM' THEN
					
					DECLARE lastName CHARACTER;
					DECLARE firstName CHARACTER;
					
					SET lastName  = SUBSTRING(itemList.Contract.AddContractInfo.ExtraRs BEFORE ' ');
					SET lastName  = REPLACE(lastName,'FIO=','');
					
					SET firstName = SUBSTRING(itemList.Contract.AddContractInfo.ExtraRs AFTER ' '); 
					SET firstName = SUBSTRING(firstName BEFORE ' ');
									
					SET custRec.erib:PersonName.erib:LastName  = lastName; 				
					SET custRec.erib:PersonName.erib:FirstName = firstName;					
					
			/*ELSE
						
					SET custRec.erib:PersonName.erib:LastName  = COALESCE(itemList.Contract.PlasticInfo.LastName,'Sberbank');
					SET custRec.erib:PersonName.erib:FirstName = COALESCE(itemList.Contract.PlasticInfo.FirstName,'Client');
					
			END IF;*/
		
			END FOR;
			
			SET oRef.erib:Status.erib:StatusCode					=	DefineStatusCode(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode));
		ELSE
			SET status_code = COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode) || ' ' || COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);  
			CALL CRC8(status_code,output_code);
			SET oRef.erib:Status.erib:StatusCode					=	output_code;
		END IF;
		
		--SET oRef.erib:Status.erib:StatusCode				=	DefineStatusCode(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code");
		IF oRef.erib:Status.erib:StatusCode <> '0' THEN
			SET oRef.erib:Status.erib:StatusDesc				=	DefineStatus(COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)); 
		END IF;
		
		IF NOT EXISTS(inRef.Status[]) THEN
			SET oRef.erib:Status.erib:ServerStatusDesc		=	'WAY_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_code",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespCode)||'_'||COALESCE(InputRoot.XMLNSC.*[<].(XMLNSC.Attribute)"resp_text",InputRoot.XMLNSC.*[<].MsgData.*[<].Status.RespText);
		ELSE
			SET oRef.erib:Status.erib:ServerStatusDesc		=   'WAY_'||inRef.Status.RespCode||'_'||inRef.Status.RespText;
		END IF;
		
		RETURN TRUE;
	END;
END MODULE;
